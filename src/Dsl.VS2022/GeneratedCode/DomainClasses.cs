//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass ConfigurationSectionModel
	/// The configuration section being designed, which contains all configuration
	/// elements.
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionModel.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionModel.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a923fcd2-2d2e-4bd5-ac9f-296eb48b3a12")]
	public partial class ConfigurationSectionModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConfigurationSectionModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa923fcd2, 0x2d2e, 0x4bd5, 0xac, 0x9f, 0x29, 0x6e, 0xb4, 0x8b, 0x3a, 0x12);
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public ConfigurationSectionModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public ConfigurationSectionModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0x472be10d, 0xb8f9, 0x46c0, 0x8c, 0x17, 0x49, 0xca, 0x59, 0xfa, 0x26, 0x6a);
		
		/// <summary>
		/// Storage for Namespace
		/// </summary>
		private global::System.String namespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// The root namespace used for code generation.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionModel/Namespace.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationSectionModel/Namespace.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionModel/Namespace.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("472be10d-b8f9-46c0-8c17-49ca59fa266a")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationSectionModel.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationSectionModel, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationSectionModel.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationSectionModel.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConfigurationSectionModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationSectionModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region XmlSchemaNamespace domain property code
		
		/// <summary>
		/// XmlSchemaNamespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid XmlSchemaNamespaceDomainPropertyId = new global::System.Guid(0xa9b8787d, 0x43f1, 0x4989, 0xb1, 0xda, 0x64, 0x91, 0x40, 0x89, 0x55, 0x82);
		
		/// <summary>
		/// Storage for XmlSchemaNamespace
		/// </summary>
		private global::System.String xmlSchemaNamespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of XmlSchemaNamespace domain property.
		/// The root XML namespace for XML Schema (XSD) generation.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionModel/XmlSchemaNamespace.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationSectionModel/XmlSchemaNamespace.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionModel/XmlSchemaNamespace.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a9b8787d-43f1-4989-b1da-649140895582")]
		public global::System.String XmlSchemaNamespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return xmlSchemaNamespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				XmlSchemaNamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationSectionModel.XmlSchemaNamespace domain property.
		/// </summary>
		internal sealed partial class XmlSchemaNamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationSectionModel, global::System.String>
		{
			private XmlSchemaNamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationSectionModel.XmlSchemaNamespace domain property value handler.
			/// </summary>
			public static readonly XmlSchemaNamespacePropertyHandler Instance = new XmlSchemaNamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationSectionModel.XmlSchemaNamespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return XmlSchemaNamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConfigurationSectionModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.xmlSchemaNamespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationSectionModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.xmlSchemaNamespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TypeDefinitions opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TypeDefinitions.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions.ConfigurationSectionModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TypeDefinition> TypeDefinitions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TypeDefinition>, TypeDefinition>(global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions.ConfigurationSectionModelDomainRoleId);
			}
		}
		#endregion
		#region ConfigurationElements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ConfigurationElements.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements.ConfigurationSectionModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<BaseConfigurationType> ConfigurationElements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<BaseConfigurationType>, BaseConfigurationType>(global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements.ConfigurationSectionModelDomainRoleId);
			}
		}
		#endregion
		#region PropertyValidators opposite domain role accessor
		/// <summary>
		/// Gets or sets PropertyValidators.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators.ConfigurationSectionModel
		/// </summary>
		public virtual PropertyValidators PropertyValidators
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators.ConfigurationSectionModelDomainRoleId) as PropertyValidators;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators.ConfigurationSectionModelDomainRoleId, value);
			}
		}
		#endregion
		#region CustomTypeConverters opposite domain role accessor
		
		/// <summary>
		/// Gets a list of CustomTypeConverters.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters.ConfigurationSectionModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CustomTypeConverter> CustomTypeConverters
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CustomTypeConverter>, CustomTypeConverter>(global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters.ConfigurationSectionModelDomainRoleId);
			}
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionModelHasComments.ConfigurationSectionModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments.ConfigurationSectionModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ConfigurationSectionDesigner.TypeDefinition.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ConfigurationSectionDesigner.BaseConfigurationType.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ConfigurationSectionDesigner.PropertyValidators.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: ConfigurationSectionModelHasPropertyValidators.PropertyValidators
					if (this.PropertyValidators != null)
					{
						return false;
					}
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ConfigurationSectionDesigner.CustomTypeConverter.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ConfigurationSectionDesigner.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::ConfigurationSectionDesigner.TypeDefinition sourceTypeDefinition1 = sourceElement as global::ConfigurationSectionDesigner.TypeDefinition;
			if (sourceTypeDefinition1 != null)
			{
				// Create link for path ConfigurationSectionModelHasTypeDefinitions.TypeDefinitions
				this.TypeDefinitions.Add(sourceTypeDefinition1);

				return;
			}
				
			global::ConfigurationSectionDesigner.BaseConfigurationType sourceBaseConfigurationType2 = sourceElement as global::ConfigurationSectionDesigner.BaseConfigurationType;
			if (sourceBaseConfigurationType2 != null)
			{
				// Create link for path ConfigurationSectionModelHasConfigurationElements.ConfigurationElements
				this.ConfigurationElements.Add(sourceBaseConfigurationType2);

				return;
			}
				
			global::ConfigurationSectionDesigner.PropertyValidators sourcePropertyValidators3 = sourceElement as global::ConfigurationSectionDesigner.PropertyValidators;
			if (sourcePropertyValidators3 != null)
			{
				// Create link for path ConfigurationSectionModelHasPropertyValidators.PropertyValidators
				this.PropertyValidators = sourcePropertyValidators3;

				return;
			}
				
			global::ConfigurationSectionDesigner.CustomTypeConverter sourceCustomTypeConverter4 = sourceElement as global::ConfigurationSectionDesigner.CustomTypeConverter;
			if (sourceCustomTypeConverter4 != null)
			{
				// Create link for path ConfigurationSectionModelHasCustomTypeConverters.CustomTypeConverters
				this.CustomTypeConverters.Add(sourceCustomTypeConverter4);

				return;
			}
				
			global::ConfigurationSectionDesigner.Comment sourceComment5 = sourceElement as global::ConfigurationSectionDesigner.Comment;
			if (sourceComment5 != null)
			{
				// Create link for path ConfigurationSectionModelHasComments.Comments
				this.Comments.Add(sourceComment5);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::ConfigurationSectionDesigner.TypeDefinition sourceTypeDefinition1 = sourceElement as global::ConfigurationSectionDesigner.TypeDefinition;
			if (sourceTypeDefinition1 != null)
			{
				// Delete link for path ConfigurationSectionModelHasTypeDefinitions.TypeDefinitions
				
				foreach (DslModeling::ElementLink link in global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions.GetLinks((global::ConfigurationSectionDesigner.ConfigurationSectionModel)this, sourceTypeDefinition1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions.ConfigurationSectionModelDomainRoleId, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions.TypeDefinitionDomainRoleId);
				}

				return;
			}
				
			global::ConfigurationSectionDesigner.BaseConfigurationType sourceBaseConfigurationType2 = sourceElement as global::ConfigurationSectionDesigner.BaseConfigurationType;
			if (sourceBaseConfigurationType2 != null)
			{
				// Delete link for path ConfigurationSectionModelHasConfigurationElements.ConfigurationElements
				
				foreach (DslModeling::ElementLink link in global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements.GetLinks((global::ConfigurationSectionDesigner.ConfigurationSectionModel)this, sourceBaseConfigurationType2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements.ConfigurationSectionModelDomainRoleId, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements.BaseConfigurationTypeDomainRoleId);
				}

				return;
			}
				
			global::ConfigurationSectionDesigner.PropertyValidators sourcePropertyValidators3 = sourceElement as global::ConfigurationSectionDesigner.PropertyValidators;
			if (sourcePropertyValidators3 != null)
			{
				// Delete link for path ConfigurationSectionModelHasPropertyValidators.PropertyValidators
				
				foreach (DslModeling::ElementLink link in global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators.GetLinks((global::ConfigurationSectionDesigner.ConfigurationSectionModel)this, sourcePropertyValidators3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators.ConfigurationSectionModelDomainRoleId, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators.PropertyValidatorsDomainRoleId);
				}

				return;
			}
				
			global::ConfigurationSectionDesigner.CustomTypeConverter sourceCustomTypeConverter4 = sourceElement as global::ConfigurationSectionDesigner.CustomTypeConverter;
			if (sourceCustomTypeConverter4 != null)
			{
				// Delete link for path ConfigurationSectionModelHasCustomTypeConverters.CustomTypeConverters
				
				foreach (DslModeling::ElementLink link in global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters.GetLinks((global::ConfigurationSectionDesigner.ConfigurationSectionModel)this, sourceCustomTypeConverter4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters.ConfigurationSectionModelDomainRoleId, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters.CustomTypeConverterDomainRoleId);
				}

				return;
			}
				
			global::ConfigurationSectionDesigner.Comment sourceComment5 = sourceElement as global::ConfigurationSectionDesigner.Comment;
			if (sourceComment5 != null)
			{
				// Delete link for path ConfigurationSectionModelHasComments.Comments
				
				foreach (DslModeling::ElementLink link in global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments.GetLinks((global::ConfigurationSectionDesigner.ConfigurationSectionModel)this, sourceComment5))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments.ConfigurationSectionModelDomainRoleId, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass ConfigurationElement
	/// Description for ConfigurationSectionDesigner.ConfigurationElement
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElement.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElement.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("82c927d7-0b4a-43e8-8157-463859ba944b")]
	public partial class ConfigurationElement : BaseConfigurationType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConfigurationElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x82c927d7, 0x0b4a, 0x43e8, 0x81, 0x57, 0x46, 0x38, 0x59, 0xba, 0x94, 0x4b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConfigurationElement(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConfigurationElement(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Documentation domain property code
		
		/// <summary>
		/// Documentation domain property Id.
		/// </summary>
		public static readonly global::System.Guid DocumentationDomainPropertyId = new global::System.Guid(0x17f06e52, 0x3480, 0x4df2, 0x89, 0xd9, 0xf4, 0xf2, 0xbb, 0xac, 0x78, 0x17);
		
		/// <summary>
		/// Storage for Documentation
		/// </summary>
		private global::System.String documentationPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Documentation domain property.
		/// Provides documentation notes on this Configuration Element.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElement/Documentation.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationElement/Documentation.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElement/Documentation.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("17f06e52-3480-4df2-89d9-f4f2bbac7817")]
		public global::System.String Documentation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return documentationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DocumentationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationElement.Documentation domain property.
		/// </summary>
		internal sealed partial class DocumentationPropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationElement, global::System.String>
		{
			private DocumentationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationElement.Documentation domain property value handler.
			/// </summary>
			public static readonly DocumentationPropertyHandler Instance = new DocumentationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationElement.Documentation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DocumentationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConfigurationElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.documentationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.documentationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region HasCustomChildElements domain property code
		
		/// <summary>
		/// HasCustomChildElements domain property Id.
		/// </summary>
		public static readonly global::System.Guid HasCustomChildElementsDomainPropertyId = new global::System.Guid(0xaa25d7d3, 0x4d0e, 0x46d5, 0xa0, 0x40, 0xcb, 0x96, 0x98, 0xce, 0x24, 0x2e);
		
		/// <summary>
		/// Storage for HasCustomChildElements
		/// </summary>
		private global::System.Boolean hasCustomChildElementsPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of HasCustomChildElements domain property.
		/// Determines if this configuration element has custom child elements that are not
		/// known at design-time. WARNING: Setting this to true will disable intellisense to
		/// the ENTIRE configuration file because the resulting schema will become
		/// ambiguous.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElement/HasCustomChildElements.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationElement/HasCustomChildElements.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElement/HasCustomChildElements.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("aa25d7d3-4d0e-46d5-a040-cb9698ce242e")]
		public global::System.Boolean HasCustomChildElements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return hasCustomChildElementsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				HasCustomChildElementsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationElement.HasCustomChildElements domain property.
		/// </summary>
		internal sealed partial class HasCustomChildElementsPropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationElement, global::System.Boolean>
		{
			private HasCustomChildElementsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationElement.HasCustomChildElements domain property value handler.
			/// </summary>
			public static readonly HasCustomChildElementsPropertyHandler Instance = new HasCustomChildElementsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationElement.HasCustomChildElements domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return HasCustomChildElementsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ConfigurationElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.hasCustomChildElementsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationElement element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.hasCustomChildElementsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsReadOnly domain property code
		
		/// <summary>
		/// IsReadOnly domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsReadOnlyDomainPropertyId = new global::System.Guid(0xa66fa5f7, 0x3682, 0x4f69, 0xbe, 0xae, 0x38, 0x9c, 0x13, 0x77, 0x60, 0xa1);
		
		/// <summary>
		/// Storage for IsReadOnly
		/// </summary>
		private global::System.Boolean isReadOnlyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsReadOnly domain property.
		/// Determines whether the configuration element can be modified or not.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElement/IsReadOnly.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationElement/IsReadOnly.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElement/IsReadOnly.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a66fa5f7-3682-4f69-beae-389c137760a1")]
		public global::System.Boolean IsReadOnly
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isReadOnlyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsReadOnlyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationElement.IsReadOnly domain property.
		/// </summary>
		internal sealed partial class IsReadOnlyPropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationElement, global::System.Boolean>
		{
			private IsReadOnlyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationElement.IsReadOnly domain property value handler.
			/// </summary>
			public static readonly IsReadOnlyPropertyHandler Instance = new IsReadOnlyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationElement.IsReadOnly domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsReadOnlyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ConfigurationElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isReadOnlyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationElement element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isReadOnlyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DisplayName domain property code
		
		/// <summary>
		/// DisplayName domain property Id.
		/// </summary>
		public static readonly global::System.Guid DisplayNameDomainPropertyId = new global::System.Guid(0x9c1f3dc0, 0x662f, 0x4ba3, 0x90, 0xd3, 0x57, 0x46, 0xd7, 0xcb, 0xb9, 0x83);
		
		/// <summary>
		/// Storage for DisplayName
		/// </summary>
		private global::System.String displayNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DisplayName domain property.
		/// Specifies the display name for this element
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElement/DisplayName.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationElement/DisplayName.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElement/DisplayName.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9c1f3dc0-662f-4ba3-90d3-5746d7cbb983")]
		public global::System.String DisplayName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return displayNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DisplayNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationElement.DisplayName domain property.
		/// </summary>
		internal sealed partial class DisplayNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationElement, global::System.String>
		{
			private DisplayNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationElement.DisplayName domain property value handler.
			/// </summary>
			public static readonly DisplayNamePropertyHandler Instance = new DisplayNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationElement.DisplayName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DisplayNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConfigurationElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.displayNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.displayNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AttributeProperties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of AttributeProperties.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties.ConfigurationElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AttributeProperty> AttributeProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<AttributeProperty>, AttributeProperty>(global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties.ConfigurationElementDomainRoleId);
			}
		}
		#endregion
		#region ReferringConfigurationElementCollections opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ReferringConfigurationElementCollections.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType.ConfigurationElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConfigurationElementCollection> ReferringConfigurationElementCollections
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ConfigurationElementCollection>, ConfigurationElementCollection>(global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType.ConfigurationElementDomainRoleId);
			}
		}
		#endregion
		#region ElementProperties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ElementProperties.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationElementHasElementProperties.ConfigurationElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ElementProperty> ElementProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ElementProperty>, ElementProperty>(global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties.ConfigurationElementDomainRoleId);
			}
		}
		#endregion
		#region ReferringElements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ReferringElements.
		/// Description for
		/// ConfigurationSectionDesigner.ElementPropertyHasType.ConfigurationElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ElementProperty> ReferringElements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ElementProperty>, ElementProperty>(global::ConfigurationSectionDesigner.ElementPropertyHasType.ConfigurationElementDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ConfigurationSectionDesigner.AttributeProperty.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ConfigurationSectionDesigner.ElementProperty.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::ConfigurationSectionDesigner.AttributeProperty sourceAttributeProperty1 = sourceElement as global::ConfigurationSectionDesigner.AttributeProperty;
			if (sourceAttributeProperty1 != null)
			{
				// Create link for path ConfigurationElementHasAttributeProperties.AttributeProperties
				this.AttributeProperties.Add(sourceAttributeProperty1);

				return;
			}
				
			global::ConfigurationSectionDesigner.ElementProperty sourceElementProperty2 = sourceElement as global::ConfigurationSectionDesigner.ElementProperty;
			if (sourceElementProperty2 != null)
			{
				// Create link for path ConfigurationElementHasElementProperties.ElementProperties
				this.ElementProperties.Add(sourceElementProperty2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::ConfigurationSectionDesigner.AttributeProperty sourceAttributeProperty1 = sourceElement as global::ConfigurationSectionDesigner.AttributeProperty;
			if (sourceAttributeProperty1 != null)
			{
				// Delete link for path ConfigurationElementHasAttributeProperties.AttributeProperties
				
				foreach (DslModeling::ElementLink link in global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties.GetLinks((global::ConfigurationSectionDesigner.ConfigurationElement)this, sourceAttributeProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties.ConfigurationElementDomainRoleId, global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties.AttributePropertyDomainRoleId);
				}

				return;
			}
				
			global::ConfigurationSectionDesigner.ElementProperty sourceElementProperty2 = sourceElement as global::ConfigurationSectionDesigner.ElementProperty;
			if (sourceElementProperty2 != null)
			{
				// Delete link for path ConfigurationElementHasElementProperties.ElementProperties
				
				foreach (DslModeling::ElementLink link in global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties.GetLinks((global::ConfigurationSectionDesigner.ConfigurationElement)this, sourceElementProperty2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties.ConfigurationElementDomainRoleId, global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties.ElementPropertyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass AttributeProperty
	/// Description for ConfigurationSectionDesigner.AttributeProperty
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.AttributeProperty.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.AttributeProperty.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("efff5100-9242-483b-8788-acb3c0690c30")]
	public partial class AttributeProperty : ConfigurationProperty
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AttributeProperty domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xefff5100, 0x9242, 0x483b, 0x87, 0x88, 0xac, 0xb3, 0xc0, 0x69, 0x0c, 0x30);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AttributeProperty(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AttributeProperty(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DefaultValue domain property code
		
		/// <summary>
		/// DefaultValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultValueDomainPropertyId = new global::System.Guid(0x4a2024cd, 0xf112, 0x4678, 0x90, 0x47, 0x5e, 0xcb, 0xe3, 0x75, 0x3f, 0x56);
		
		/// <summary>
		/// Storage for DefaultValue
		/// </summary>
		private global::System.String defaultValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DefaultValue domain property.
		/// The default value of this property.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.AttributeProperty/DefaultValue.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.AttributeProperty/DefaultValue.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.AttributeProperty/DefaultValue.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4a2024cd-f112-4678-9047-5ecbe3753f56")]
		public global::System.String DefaultValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AttributeProperty.DefaultValue domain property.
		/// </summary>
		internal sealed partial class DefaultValuePropertyHandler : DslModeling::DomainPropertyValueHandler<AttributeProperty, global::System.String>
		{
			private DefaultValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AttributeProperty.DefaultValue domain property value handler.
			/// </summary>
			public static readonly DefaultValuePropertyHandler Instance = new DefaultValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AttributeProperty.DefaultValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AttributeProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.defaultValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AttributeProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CustomEditor domain property code
		
		/// <summary>
		/// CustomEditor domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomEditorDomainPropertyId = new global::System.Guid(0x39303ae2, 0x7f95, 0x42dd, 0x91, 0x37, 0xc0, 0xbc, 0x09, 0xc3, 0x29, 0x01);
		
		/// <summary>
		/// Storage for CustomEditor
		/// </summary>
		private CustomEditors customEditorPropertyStorage = CustomEditors.None;
		
		/// <summary>
		/// Gets or sets the value of CustomEditor domain property.
		/// Use a custom editor to edit this attribute
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.AttributeProperty/CustomEditor.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.AttributeProperty/CustomEditor.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.AttributeProperty/CustomEditor.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(CustomEditors.None)]
		[DslModeling::DomainObjectId("39303ae2-7f95-42dd-9137-c0bc09c32901")]
		public CustomEditors CustomEditor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return customEditorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CustomEditorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AttributeProperty.CustomEditor domain property.
		/// </summary>
		internal sealed partial class CustomEditorPropertyHandler : DslModeling::DomainPropertyValueHandler<AttributeProperty, CustomEditors>
		{
			private CustomEditorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AttributeProperty.CustomEditor domain property value handler.
			/// </summary>
			public static readonly CustomEditorPropertyHandler Instance = new CustomEditorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AttributeProperty.CustomEditor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomEditorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed CustomEditors GetValue(AttributeProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.customEditorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AttributeProperty element, CustomEditors newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				CustomEditors oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.customEditorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ConfigurationElement opposite domain role accessor
		/// <summary>
		/// Gets or sets ConfigurationElement.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties.AttributeProperty
		/// </summary>
		public virtual ConfigurationElement ConfigurationElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties.AttributePropertyDomainRoleId) as ConfigurationElement;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties.AttributePropertyDomainRoleId, value);
			}
		}
		#endregion
		#region Type opposite domain role accessor
		/// <summary>
		/// Gets or sets Type.
		/// The type of this property.
		/// </summary>
		public virtual TypeDefinition Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType.AttributePropertyDomainRoleId) as TypeDefinition;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType.AttributePropertyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass ConfigurationSection
	/// Description for ConfigurationSectionDesigner.ConfigurationSection
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSection.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSection.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d298038b-5200-4aeb-a6a2-d91e6aa2ba90")]
	public partial class ConfigurationSection : ConfigurationElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConfigurationSection domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd298038b, 0x5200, 0x4aeb, 0xa6, 0xa2, 0xd9, 0x1e, 0x6a, 0xa2, 0xba, 0x90);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConfigurationSection(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConfigurationSection(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region CodeGenOptions domain property code
		
		/// <summary>
		/// CodeGenOptions domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeGenOptionsDomainPropertyId = new global::System.Guid(0xd73f86af, 0x29ec, 0x42bd, 0x9a, 0x44, 0x40, 0xa1, 0x48, 0xc6, 0xec, 0x3a);
		
		/// <summary>
		/// Storage for CodeGenOptions
		/// </summary>
		private ConfigurationSectionCodeGenOptions codeGenOptionsPropertyStorage = ConfigurationSectionCodeGenOptions.Singleton|ConfigurationSectionCodeGenOptions.XmlnsProperty;
		
		/// <summary>
		/// Gets or sets the value of CodeGenOptions domain property.
		/// The possible blocks of code that are generated for a Configuration Section.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSection/CodeGenOptions.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationSection/CodeGenOptions.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSection/CodeGenOptions.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ConfigurationSectionCodeGenOptions.Singleton|ConfigurationSectionCodeGenOptions.XmlnsProperty)]
		[DslModeling::DomainObjectId("d73f86af-29ec-42bd-9a44-40a148c6ec3a")]
		public ConfigurationSectionCodeGenOptions CodeGenOptions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return codeGenOptionsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CodeGenOptionsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationSection.CodeGenOptions domain property.
		/// </summary>
		internal sealed partial class CodeGenOptionsPropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationSection, ConfigurationSectionCodeGenOptions>
		{
			private CodeGenOptionsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationSection.CodeGenOptions domain property value handler.
			/// </summary>
			public static readonly CodeGenOptionsPropertyHandler Instance = new CodeGenOptionsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationSection.CodeGenOptions domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CodeGenOptionsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ConfigurationSectionCodeGenOptions GetValue(ConfigurationSection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.codeGenOptionsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationSection element, ConfigurationSectionCodeGenOptions newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ConfigurationSectionCodeGenOptions oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.codeGenOptionsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region XmlSectionName domain property code
		
		/// <summary>
		/// XmlSectionName domain property Id.
		/// </summary>
		public static readonly global::System.Guid XmlSectionNameDomainPropertyId = new global::System.Guid(0x7430c978, 0x4ebf, 0x41ee, 0xb1, 0xd5, 0x65, 0xfe, 0x8e, 0x5b, 0x80, 0x30);
		
		/// <summary>
		/// Storage for XmlSectionName
		/// </summary>
		private global::System.String xmlSectionNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of XmlSectionName domain property.
		/// The name of this Configuration Section as it appears in XML.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSection/XmlSectionName.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationSection/XmlSectionName.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSection/XmlSectionName.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7430c978-4ebf-41ee-b1d5-65fe8e5b8030")]
		public global::System.String XmlSectionName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return xmlSectionNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				XmlSectionNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationSection.XmlSectionName domain property.
		/// </summary>
		internal sealed partial class XmlSectionNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationSection, global::System.String>
		{
			private XmlSectionNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationSection.XmlSectionName domain property value handler.
			/// </summary>
			public static readonly XmlSectionNamePropertyHandler Instance = new XmlSectionNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationSection.XmlSectionName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return XmlSectionNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConfigurationSection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.xmlSectionNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationSection element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.xmlSectionNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ProtectionProvider domain property code
		
		/// <summary>
		/// ProtectionProvider domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProtectionProviderDomainPropertyId = new global::System.Guid(0xf69dcbb6, 0xd525, 0x445f, 0xa0, 0x57, 0xdc, 0x0c, 0x09, 0x28, 0x84, 0xaa);
		
		/// <summary>
		/// Storage for ProtectionProvider
		/// </summary>
		private ProtectionProviders protectionProviderPropertyStorage = ProtectionProviders.RSAProtectedConfigurationProvider;
		
		/// <summary>
		/// Gets or sets the value of ProtectionProvider domain property.
		/// Decides which section protection provider to protect this configuration section
		/// with
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSection/ProtectionProvider.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationSection/ProtectionProvider.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSection/ProtectionProvider.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ProtectionProviders.RSAProtectedConfigurationProvider)]
		[DslModeling::DomainObjectId("f69dcbb6-d525-445f-a057-dc0c092884aa")]
		public ProtectionProviders ProtectionProvider
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return protectionProviderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProtectionProviderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationSection.ProtectionProvider domain property.
		/// </summary>
		internal sealed partial class ProtectionProviderPropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationSection, ProtectionProviders>
		{
			private ProtectionProviderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationSection.ProtectionProvider domain property value handler.
			/// </summary>
			public static readonly ProtectionProviderPropertyHandler Instance = new ProtectionProviderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationSection.ProtectionProvider domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProtectionProviderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ProtectionProviders GetValue(ConfigurationSection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.protectionProviderPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationSection element, ProtectionProviders newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ProtectionProviders oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.protectionProviderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CustomProtectionProvider domain property code
		
		/// <summary>
		/// CustomProtectionProvider domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomProtectionProviderDomainPropertyId = new global::System.Guid(0x81ec3bc7, 0x323b, 0x4fb2, 0xaf, 0x8c, 0x8d, 0x16, 0xe9, 0xe9, 0xde, 0x6d);
		
		/// <summary>
		/// Storage for CustomProtectionProvider
		/// </summary>
		private global::System.String customProtectionProviderPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CustomProtectionProvider domain property.
		/// If "Protection Provider" is set to Custom, this property decides which custom
		/// provider to use
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSection/CustomProtectionProvider.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationSection/CustomProtectionProvider.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSection/CustomProtectionProvider.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("81ec3bc7-323b-4fb2-af8c-8d16e9e9de6d")]
		public global::System.String CustomProtectionProvider
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return customProtectionProviderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CustomProtectionProviderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationSection.CustomProtectionProvider domain property.
		/// </summary>
		internal sealed partial class CustomProtectionProviderPropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationSection, global::System.String>
		{
			private CustomProtectionProviderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationSection.CustomProtectionProvider domain property value handler.
			/// </summary>
			public static readonly CustomProtectionProviderPropertyHandler Instance = new CustomProtectionProviderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationSection.CustomProtectionProvider domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomProtectionProviderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConfigurationSection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.customProtectionProviderPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationSection element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.customProtectionProviderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReferringConfigurationSectionGroup opposite domain role accessor
		/// <summary>
		/// Gets or sets ReferringConfigurationSectionGroup.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection.ConfigurationSection
		/// </summary>
		public virtual ConfigurationSectionProperty ReferringConfigurationSectionGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection.ConfigurationSectionDomainRoleId) as ConfigurationSectionProperty;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection.ConfigurationSectionDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass ConfigurationElementCollection
	/// Description for ConfigurationSectionDesigner.ConfigurationElementCollection
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElementCollection.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElementCollection.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a7457ba6-e6fd-440f-b940-c6ff94b181df")]
	public partial class ConfigurationElementCollection : ConfigurationElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConfigurationElementCollection domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa7457ba6, 0xe6fd, 0x440f, 0xb9, 0x40, 0xc6, 0xff, 0x94, 0xb1, 0x81, 0xdf);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConfigurationElementCollection(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConfigurationElementCollection(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region CollectionType domain property code
		
		/// <summary>
		/// CollectionType domain property Id.
		/// </summary>
		public static readonly global::System.Guid CollectionTypeDomainPropertyId = new global::System.Guid(0x43dc46ec, 0xa850, 0x4e6c, 0xa1, 0x31, 0x11, 0x2e, 0xca, 0xaa, 0x56, 0x83);
		
		/// <summary>
		/// Storage for CollectionType
		/// </summary>
		private global::System.Configuration.ConfigurationElementCollectionType collectionTypePropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Configuration.ConfigurationElementCollectionType>("BasicMapAlternate");
		
		/// <summary>
		/// Gets or sets the value of CollectionType domain property.
		/// The type of this collection.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElementCollection/CollectionType.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationElementCollection/CollectionType.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElementCollection/CollectionType.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Configuration.ConfigurationElementCollectionType), "BasicMapAlternate")]
		[DslModeling::DomainObjectId("43dc46ec-a850-4e6c-a131-112ecaaa5683")]
		public global::System.Configuration.ConfigurationElementCollectionType CollectionType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return collectionTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CollectionTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationElementCollection.CollectionType domain property.
		/// </summary>
		internal sealed partial class CollectionTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationElementCollection, global::System.Configuration.ConfigurationElementCollectionType>
		{
			private CollectionTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationElementCollection.CollectionType domain property value handler.
			/// </summary>
			public static readonly CollectionTypePropertyHandler Instance = new CollectionTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationElementCollection.CollectionType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CollectionTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Configuration.ConfigurationElementCollectionType GetValue(ConfigurationElementCollection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.collectionTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationElementCollection element, global::System.Configuration.ConfigurationElementCollectionType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Configuration.ConfigurationElementCollectionType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.collectionTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region XmlItemName domain property code
		
		/// <summary>
		/// XmlItemName domain property Id.
		/// </summary>
		public static readonly global::System.Guid XmlItemNameDomainPropertyId = new global::System.Guid(0x189ca66a, 0x11e8, 0x4aa9, 0x82, 0x70, 0xf5, 0xd8, 0x26, 0x64, 0xc0, 0xb7);
		
		/// <summary>
		/// Storage for XmlItemName
		/// </summary>
		private global::System.String xmlItemNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of XmlItemName domain property.
		/// The name of each item in the collection as it appears in XML.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElementCollection/XmlItemName.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationElementCollection/XmlItemName.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElementCollection/XmlItemName.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("189ca66a-11e8-4aa9-8270-f5d82664c0b7")]
		public global::System.String XmlItemName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return xmlItemNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				XmlItemNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationElementCollection.XmlItemName domain property.
		/// </summary>
		internal sealed partial class XmlItemNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationElementCollection, global::System.String>
		{
			private XmlItemNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationElementCollection.XmlItemName domain property value handler.
			/// </summary>
			public static readonly XmlItemNamePropertyHandler Instance = new XmlItemNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationElementCollection.XmlItemName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return XmlItemNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConfigurationElementCollection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.xmlItemNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationElementCollection element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.xmlItemNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CodeGenOptions domain property code
		
		/// <summary>
		/// CodeGenOptions domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeGenOptionsDomainPropertyId = new global::System.Guid(0x814d95d9, 0xa63e, 0x4f30, 0x81, 0x25, 0xfa, 0x9f, 0x78, 0x3a, 0x18, 0x98);
		
		/// <summary>
		/// Storage for CodeGenOptions
		/// </summary>
		private ConfigurationElementCollectionCodeGenOptions codeGenOptionsPropertyStorage = ConfigurationElementCollectionCodeGenOptions.Indexer|ConfigurationElementCollectionCodeGenOptions.AddMethod|ConfigurationElementCollectionCodeGenOptions.RemoveMethod|ConfigurationElementCollectionCodeGenOptions.GetItemMethods;
		
		/// <summary>
		/// Gets or sets the value of CodeGenOptions domain property.
		/// The possible blocks of code that are generated for a Configuration Element
		/// Collection.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElementCollection/CodeGenOptions.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationElementCollection/CodeGenOptions.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElementCollection/CodeGenOptions.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ConfigurationElementCollectionCodeGenOptions.Indexer|ConfigurationElementCollectionCodeGenOptions.AddMethod|ConfigurationElementCollectionCodeGenOptions.RemoveMethod|ConfigurationElementCollectionCodeGenOptions.GetItemMethods)]
		[DslModeling::DomainObjectId("814d95d9-a63e-4f30-8125-fa9f783a1898")]
		public ConfigurationElementCollectionCodeGenOptions CodeGenOptions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return codeGenOptionsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CodeGenOptionsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationElementCollection.CodeGenOptions domain property.
		/// </summary>
		internal sealed partial class CodeGenOptionsPropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationElementCollection, ConfigurationElementCollectionCodeGenOptions>
		{
			private CodeGenOptionsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationElementCollection.CodeGenOptions domain property value handler.
			/// </summary>
			public static readonly CodeGenOptionsPropertyHandler Instance = new CodeGenOptionsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationElementCollection.CodeGenOptions domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CodeGenOptionsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ConfigurationElementCollectionCodeGenOptions GetValue(ConfigurationElementCollection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.codeGenOptionsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationElementCollection element, ConfigurationElementCollectionCodeGenOptions newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ConfigurationElementCollectionCodeGenOptions oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.codeGenOptionsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AddItemName domain property code
		
		/// <summary>
		/// AddItemName domain property Id.
		/// </summary>
		public static readonly global::System.Guid AddItemNameDomainPropertyId = new global::System.Guid(0x69f09ff9, 0xd8ff, 0x4ade, 0xaa, 0xf6, 0xcc, 0xfa, 0x0c, 0x43, 0x8c, 0xd9);
		
		/// <summary>
		/// Storage for AddItemName
		/// </summary>
		private global::System.String addItemNamePropertyStorage = "add";
		
		/// <summary>
		/// Gets or sets the value of AddItemName domain property.
		/// The name of the 'add' configuration element. This value is only used if
		/// CollectionType is AddRemoveClearMap or AddRemoveClearMapAlternate.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElementCollection/AddItemName.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationElementCollection/AddItemName.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElementCollection/AddItemName.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("add")]
		[DslModeling::DomainObjectId("69f09ff9-d8ff-4ade-aaf6-ccfa0c438cd9")]
		public global::System.String AddItemName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return addItemNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AddItemNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationElementCollection.AddItemName domain property.
		/// </summary>
		internal sealed partial class AddItemNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationElementCollection, global::System.String>
		{
			private AddItemNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationElementCollection.AddItemName domain property value handler.
			/// </summary>
			public static readonly AddItemNamePropertyHandler Instance = new AddItemNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationElementCollection.AddItemName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AddItemNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConfigurationElementCollection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.addItemNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationElementCollection element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.addItemNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RemoveItemName domain property code
		
		/// <summary>
		/// RemoveItemName domain property Id.
		/// </summary>
		public static readonly global::System.Guid RemoveItemNameDomainPropertyId = new global::System.Guid(0xb47481a3, 0x4ac1, 0x4502, 0xbe, 0xcc, 0xf5, 0x2a, 0xd6, 0x6c, 0xef, 0xef);
		
		/// <summary>
		/// Storage for RemoveItemName
		/// </summary>
		private global::System.String removeItemNamePropertyStorage = "remove";
		
		/// <summary>
		/// Gets or sets the value of RemoveItemName domain property.
		/// The name of the 'remove' configuration element. This value is only used if
		/// CollectionType is AddRemoveClearMap or AddRemoveClearMapAlternate.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElementCollection/RemoveItemName.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationElementCollection/RemoveItemName.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElementCollection/RemoveItemName.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("remove")]
		[DslModeling::DomainObjectId("b47481a3-4ac1-4502-becc-f52ad66cefef")]
		public global::System.String RemoveItemName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return removeItemNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RemoveItemNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationElementCollection.RemoveItemName domain property.
		/// </summary>
		internal sealed partial class RemoveItemNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationElementCollection, global::System.String>
		{
			private RemoveItemNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationElementCollection.RemoveItemName domain property value handler.
			/// </summary>
			public static readonly RemoveItemNamePropertyHandler Instance = new RemoveItemNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationElementCollection.RemoveItemName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RemoveItemNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConfigurationElementCollection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.removeItemNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationElementCollection element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.removeItemNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ClearItemsName domain property code
		
		/// <summary>
		/// ClearItemsName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ClearItemsNameDomainPropertyId = new global::System.Guid(0x7c2d861e, 0xcc41, 0x4970, 0x9c, 0x48, 0x42, 0xcb, 0xde, 0xae, 0x22, 0x25);
		
		/// <summary>
		/// Storage for ClearItemsName
		/// </summary>
		private global::System.String clearItemsNamePropertyStorage = "clear";
		
		/// <summary>
		/// Gets or sets the value of ClearItemsName domain property.
		/// The name for the 'clear' configuration element. This value is only used if
		/// CollectionType is AddRemoveClearMap or AddRemoveClearMapAlternate.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElementCollection/ClearItemsName.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationElementCollection/ClearItemsName.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElementCollection/ClearItemsName.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("clear")]
		[DslModeling::DomainObjectId("7c2d861e-cc41-4970-9c48-42cbdeae2225")]
		public global::System.String ClearItemsName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return clearItemsNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ClearItemsNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationElementCollection.ClearItemsName domain property.
		/// </summary>
		internal sealed partial class ClearItemsNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationElementCollection, global::System.String>
		{
			private ClearItemsNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationElementCollection.ClearItemsName domain property value handler.
			/// </summary>
			public static readonly ClearItemsNamePropertyHandler Instance = new ClearItemsNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationElementCollection.ClearItemsName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ClearItemsNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConfigurationElementCollection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.clearItemsNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationElementCollection element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.clearItemsNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region UseHashForElementKey domain property code
		
		/// <summary>
		/// UseHashForElementKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid UseHashForElementKeyDomainPropertyId = new global::System.Guid(0x543af28a, 0xa969, 0x476d, 0xa9, 0x34, 0xb8, 0xc5, 0x96, 0x42, 0x7c, 0xd4);
		
		/// <summary>
		/// Storage for UseHashForElementKey
		/// </summary>
		private global::System.Boolean useHashForElementKeyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of UseHashForElementKey domain property.
		/// If set to true, allow the ItemType element to be keyless, uses GetHashCode on
		/// the elemt itself.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElementCollection/UseHashForElementKey.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationElementCollection/UseHashForElementKey.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElementCollection/UseHashForElementKey.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("543af28a-a969-476d-a934-b8c596427cd4")]
		public global::System.Boolean UseHashForElementKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return useHashForElementKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UseHashForElementKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationElementCollection.UseHashForElementKey domain property.
		/// </summary>
		internal sealed partial class UseHashForElementKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationElementCollection, global::System.Boolean>
		{
			private UseHashForElementKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationElementCollection.UseHashForElementKey domain property value handler.
			/// </summary>
			public static readonly UseHashForElementKeyPropertyHandler Instance = new UseHashForElementKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationElementCollection.UseHashForElementKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UseHashForElementKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ConfigurationElementCollection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.useHashForElementKeyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationElementCollection element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.useHashForElementKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ItemType opposite domain role accessor
		/// <summary>
		/// Gets or sets ItemType.
		/// The type of the items in this collection.
		/// </summary>
		public virtual ConfigurationElement ItemType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType.ConfigurationElementCollectionDomainRoleId) as ConfigurationElement;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType.ConfigurationElementCollectionDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass ElementProperty
	/// Description for ConfigurationSectionDesigner.ElementProperty
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ElementProperty.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ElementProperty.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8faa6746-c23e-4bcd-8c92-14ea26fa03da")]
	public partial class ElementProperty : ConfigurationProperty
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ElementProperty domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8faa6746, 0xc23e, 0x4bcd, 0x8c, 0x92, 0x14, 0xea, 0x26, 0xfa, 0x03, 0xda);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ElementProperty(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ElementProperty(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ConfigurationElement opposite domain role accessor
		/// <summary>
		/// Gets or sets ConfigurationElement.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationElementHasElementProperties.ElementProperty
		/// </summary>
		public virtual ConfigurationElement ConfigurationElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties.ElementPropertyDomainRoleId) as ConfigurationElement;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties.ElementPropertyDomainRoleId, value);
			}
		}
		#endregion
		#region Type opposite domain role accessor
		/// <summary>
		/// Gets or sets Type.
		/// The type of this property.
		/// </summary>
		public virtual ConfigurationElement Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.ElementPropertyHasType.ElementPropertyDomainRoleId) as ConfigurationElement;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.ElementPropertyHasType.ElementPropertyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass ConfigurationProperty
	/// Description for ConfigurationSectionDesigner.ConfigurationProperty
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationProperty.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationProperty.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("37d3b10e-35a5-4608-8bf5-5556ad9d3fe9")]
	public abstract partial class ConfigurationProperty : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConfigurationProperty domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x37d3b10e, 0x35a5, 0x4608, 0x8b, 0xf5, 0x55, 0x56, 0xad, 0x9d, 0x3f, 0xe9);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ConfigurationProperty(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x8bbb2285, 0xfa6e, 0x44d4, 0x9c, 0xe7, 0xe4, 0x91, 0xa0, 0x28, 0x61, 0x01);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of this property.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationProperty/Name.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationProperty/Name.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationProperty/Name.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("8bbb2285-fa6e-44d4-9ce7-e491a0286101")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationProperty.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationProperty, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationProperty.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationProperty.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConfigurationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsRequired domain property code
		
		/// <summary>
		/// IsRequired domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsRequiredDomainPropertyId = new global::System.Guid(0x1c7c520e, 0xfb0b, 0x4718, 0xb5, 0xd8, 0x31, 0x86, 0xba, 0xca, 0x90, 0x8e);
		
		/// <summary>
		/// Storage for IsRequired
		/// </summary>
		private global::System.Boolean isRequiredPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsRequired domain property.
		/// Determines if this is a required property.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationProperty/IsRequired.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationProperty/IsRequired.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationProperty/IsRequired.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1c7c520e-fb0b-4718-b5d8-3186baca908e")]
		public global::System.Boolean IsRequired
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isRequiredPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsRequiredPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationProperty.IsRequired domain property.
		/// </summary>
		internal sealed partial class IsRequiredPropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationProperty, global::System.Boolean>
		{
			private IsRequiredPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationProperty.IsRequired domain property value handler.
			/// </summary>
			public static readonly IsRequiredPropertyHandler Instance = new IsRequiredPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationProperty.IsRequired domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsRequiredDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ConfigurationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isRequiredPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationProperty element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isRequiredPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsKey domain property code
		
		/// <summary>
		/// IsKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsKeyDomainPropertyId = new global::System.Guid(0x21f0455b, 0x950a, 0x47eb, 0x9d, 0x2f, 0x7c, 0xc8, 0xb5, 0x45, 0xbd, 0x71);
		
		/// <summary>
		/// Storage for IsKey
		/// </summary>
		private global::System.Boolean isKeyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsKey domain property.
		/// Determines if this property is the key for the element in which it appears.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationProperty/IsKey.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationProperty/IsKey.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationProperty/IsKey.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("21f0455b-950a-47eb-9d2f-7cc8b545bd71")]
		public global::System.Boolean IsKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationProperty.IsKey domain property.
		/// </summary>
		internal sealed partial class IsKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationProperty, global::System.Boolean>
		{
			private IsKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationProperty.IsKey domain property value handler.
			/// </summary>
			public static readonly IsKeyPropertyHandler Instance = new IsKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationProperty.IsKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ConfigurationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isKeyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationProperty element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsDefaultCollection domain property code
		
		/// <summary>
		/// IsDefaultCollection domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsDefaultCollectionDomainPropertyId = new global::System.Guid(0x5c09c892, 0x7be1, 0x466a, 0xb7, 0x82, 0x3f, 0x7a, 0x38, 0x8b, 0xf0, 0x29);
		
		/// <summary>
		/// Storage for IsDefaultCollection
		/// </summary>
		private global::System.Boolean isDefaultCollectionPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsDefaultCollection domain property.
		/// Determines if this is the default property collection. NOTE: If false, the .NET
		/// framework will build a nested section like '<items> ...</items>' to hold the
		/// collection. This property will be ignored if element is not a collections.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationProperty/IsDefaultCollection.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationProperty/IsDefaultCollection.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationProperty/IsDefaultCollection.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5c09c892-7be1-466a-b782-3f7a388bf029")]
		public global::System.Boolean IsDefaultCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isDefaultCollectionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsDefaultCollectionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationProperty.IsDefaultCollection domain property.
		/// </summary>
		internal sealed partial class IsDefaultCollectionPropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationProperty, global::System.Boolean>
		{
			private IsDefaultCollectionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationProperty.IsDefaultCollection domain property value handler.
			/// </summary>
			public static readonly IsDefaultCollectionPropertyHandler Instance = new IsDefaultCollectionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationProperty.IsDefaultCollection domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsDefaultCollectionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ConfigurationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isDefaultCollectionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationProperty element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isDefaultCollectionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region XmlName domain property code
		
		/// <summary>
		/// XmlName domain property Id.
		/// </summary>
		public static readonly global::System.Guid XmlNameDomainPropertyId = new global::System.Guid(0x41c30859, 0xfc52, 0x430a, 0xbd, 0x7b, 0xea, 0x00, 0x56, 0xdb, 0x7b, 0x9e);
		
		/// <summary>
		/// Storage for XmlName
		/// </summary>
		private global::System.String xmlNamePropertyStorage = " ";
		
		/// <summary>
		/// Gets or sets the value of XmlName domain property.
		/// The name of this property as it appears in XML.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationProperty/XmlName.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationProperty/XmlName.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationProperty/XmlName.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(" ")]
		[DslModeling::DomainObjectId("41c30859-fc52-430a-bd7b-ea0056db7b9e")]
		public global::System.String XmlName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return xmlNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				XmlNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationProperty.XmlName domain property.
		/// </summary>
		internal sealed partial class XmlNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationProperty, global::System.String>
		{
			private XmlNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationProperty.XmlName domain property value handler.
			/// </summary>
			public static readonly XmlNamePropertyHandler Instance = new XmlNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationProperty.XmlName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return XmlNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConfigurationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.xmlNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.xmlNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsReadOnly domain property code
		
		/// <summary>
		/// IsReadOnly domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsReadOnlyDomainPropertyId = new global::System.Guid(0x3ccc2359, 0x840a, 0x4a5c, 0x85, 0x28, 0x2c, 0xa1, 0xc0, 0x8b, 0xd7, 0xd3);
		
		/// <summary>
		/// Storage for IsReadOnly
		/// </summary>
		private global::System.Boolean isReadOnlyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsReadOnly domain property.
		/// Determines if this property has only a getter or also a setter.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationProperty/IsReadOnly.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationProperty/IsReadOnly.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationProperty/IsReadOnly.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3ccc2359-840a-4a5c-8528-2ca1c08bd7d3")]
		public global::System.Boolean IsReadOnly
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isReadOnlyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsReadOnlyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationProperty.IsReadOnly domain property.
		/// </summary>
		internal sealed partial class IsReadOnlyPropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationProperty, global::System.Boolean>
		{
			private IsReadOnlyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationProperty.IsReadOnly domain property value handler.
			/// </summary>
			public static readonly IsReadOnlyPropertyHandler Instance = new IsReadOnlyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationProperty.IsReadOnly domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsReadOnlyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ConfigurationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isReadOnlyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationProperty element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isReadOnlyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Documentation domain property code
		
		/// <summary>
		/// Documentation domain property Id.
		/// </summary>
		public static readonly global::System.Guid DocumentationDomainPropertyId = new global::System.Guid(0x7fd60b77, 0x80a0, 0x401d, 0xb3, 0x14, 0xe5, 0x7b, 0x31, 0x9b, 0x9e, 0x58);
		
		/// <summary>
		/// Storage for Documentation
		/// </summary>
		private global::System.String documentationPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Documentation domain property.
		/// Provides documentation notes on this property.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationProperty/Documentation.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationProperty/Documentation.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationProperty/Documentation.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7fd60b77-80a0-401d-b314-e57b319b9e58")]
		public global::System.String Documentation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return documentationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DocumentationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationProperty.Documentation domain property.
		/// </summary>
		internal sealed partial class DocumentationPropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationProperty, global::System.String>
		{
			private DocumentationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationProperty.Documentation domain property value handler.
			/// </summary>
			public static readonly DocumentationPropertyHandler Instance = new DocumentationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationProperty.Documentation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DocumentationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConfigurationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.documentationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.documentationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CustomAttributes domain property code
		
		/// <summary>
		/// CustomAttributes domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomAttributesDomainPropertyId = new global::System.Guid(0x09023d9a, 0x8496, 0x4fa2, 0x8c, 0x9e, 0x92, 0xe4, 0x96, 0x75, 0x36, 0x69);
		
		/// <summary>
		/// Gets or sets the value of CustomAttributes domain property.
		/// Adds custom Attributes to the property. These will be applied to the property in
		/// the code behind file as VS attributes. Make sure the custom attributes declared
		/// here are defined.
		/// </summary>
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
		[System.ComponentModel.Editor(typeof( ConfigurationSectionDesigner.AttributeEditor ), typeof( System.Drawing.Design.UITypeEditor ))]
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationProperty/CustomAttributes.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationProperty/CustomAttributes.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationProperty/CustomAttributes.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("09023d9a-8496-4fa2-8c9e-92e496753669")]
		public global::System.String CustomAttributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return CustomAttributesPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationProperty.CustomAttributes domain property.
		/// </summary>
		internal sealed partial class CustomAttributesPropertyHandler : DslModeling::CalculatedPropertyValueHandler<ConfigurationProperty, global::System.String>
		{
			private CustomAttributesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationProperty.CustomAttributes domain property value handler.
			/// </summary>
			public static readonly CustomAttributesPropertyHandler Instance = new CustomAttributesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationProperty.CustomAttributes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomAttributesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConfigurationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for CustomAttributes because its Kind is
				// set to Calculated. Please provide the GetCustomAttributesValue()
				// method on the domain class.
				return element.GetCustomAttributesValue();
			}
		
		}
		
		#endregion
		#region Browsable domain property code
		
		/// <summary>
		/// Browsable domain property Id.
		/// </summary>
		public static readonly global::System.Guid BrowsableDomainPropertyId = new global::System.Guid(0x423997b8, 0xe502, 0x4df9, 0xa1, 0x28, 0x6d, 0xbc, 0x26, 0xa2, 0x6c, 0x48);
		
		/// <summary>
		/// Storage for Browsable
		/// </summary>
		private global::System.Boolean browsablePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of Browsable domain property.
		/// Whether a property should be displayed
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationProperty/Browsable.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationProperty/Browsable.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationProperty/Browsable.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("423997b8-e502-4df9-a128-6dbc26a26c48")]
		public global::System.Boolean Browsable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return browsablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				BrowsablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationProperty.Browsable domain property.
		/// </summary>
		internal sealed partial class BrowsablePropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationProperty, global::System.Boolean>
		{
			private BrowsablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationProperty.Browsable domain property value handler.
			/// </summary>
			public static readonly BrowsablePropertyHandler Instance = new BrowsablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationProperty.Browsable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BrowsableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ConfigurationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.browsablePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationProperty element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.browsablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DisplayName domain property code
		
		/// <summary>
		/// DisplayName domain property Id.
		/// </summary>
		public static readonly global::System.Guid DisplayNameDomainPropertyId = new global::System.Guid(0xccc0b3a9, 0xe394, 0x409d, 0x9b, 0xf9, 0xbc, 0xc9, 0x0b, 0x4e, 0x9d, 0x97);
		
		/// <summary>
		/// Storage for DisplayName
		/// </summary>
		private global::System.String displayNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DisplayName domain property.
		/// Specifies the display name for a property
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationProperty/DisplayName.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationProperty/DisplayName.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationProperty/DisplayName.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ccc0b3a9-e394-409d-9bf9-bcc90b4e9d97")]
		public global::System.String DisplayName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return displayNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DisplayNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationProperty.DisplayName domain property.
		/// </summary>
		internal sealed partial class DisplayNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationProperty, global::System.String>
		{
			private DisplayNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationProperty.DisplayName domain property value handler.
			/// </summary>
			public static readonly DisplayNamePropertyHandler Instance = new DisplayNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationProperty.DisplayName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DisplayNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConfigurationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.displayNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.displayNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Category domain property code
		
		/// <summary>
		/// Category domain property Id.
		/// </summary>
		public static readonly global::System.Guid CategoryDomainPropertyId = new global::System.Guid(0xc262d286, 0x0a65, 0x4903, 0xb2, 0x76, 0x89, 0xb2, 0xed, 0xe6, 0xd1, 0x4c);
		
		/// <summary>
		/// Storage for Category
		/// </summary>
		private global::System.String categoryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Category domain property.
		/// The name of the category in which to group the property
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationProperty/Category.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationProperty/Category.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationProperty/Category.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c262d286-0a65-4903-b276-89b2ede6d14c")]
		public global::System.String Category
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return categoryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CategoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationProperty.Category domain property.
		/// </summary>
		internal sealed partial class CategoryPropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationProperty, global::System.String>
		{
			private CategoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationProperty.Category domain property value handler.
			/// </summary>
			public static readonly CategoryPropertyHandler Instance = new CategoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationProperty.Category domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CategoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConfigurationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.categoryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.categoryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TypeConverter domain property code
		
		/// <summary>
		/// TypeConverter domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeConverterDomainPropertyId = new global::System.Guid(0x147ba091, 0xbc2a, 0x4bce, 0xa6, 0xdb, 0xaa, 0x7f, 0x00, 0x20, 0x5c, 0xf6);
		
		/// <summary>
		/// Storage for TypeConverter
		/// </summary>
		private TypeConverters typeConverterPropertyStorage = TypeConverters.None;
		
		/// <summary>
		/// Gets or sets the value of TypeConverter domain property.
		/// The typeconverter to use for this property
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationProperty/TypeConverter.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationProperty/TypeConverter.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationProperty/TypeConverter.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(TypeConverters.None)]
		[DslModeling::DomainObjectId("147ba091-bc2a-4bce-a6db-aa7f00205cf6")]
		public TypeConverters TypeConverter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typeConverterPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypeConverterPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationProperty.TypeConverter domain property.
		/// </summary>
		internal sealed partial class TypeConverterPropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationProperty, TypeConverters>
		{
			private TypeConverterPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationProperty.TypeConverter domain property value handler.
			/// </summary>
			public static readonly TypeConverterPropertyHandler Instance = new TypeConverterPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationProperty.TypeConverter domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeConverterDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed TypeConverters GetValue(ConfigurationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typeConverterPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationProperty element, TypeConverters newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				TypeConverters oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typeConverterPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Validator opposite domain role accessor
		/// <summary>
		/// Gets or sets Validator.
		/// The validator used to validate this property. Add validators by viewing the
		/// 'Configuration Section Explorer' explorer tab and locating the Property
		/// Validators item. Right-click that item to add.
		/// </summary>
		public virtual PropertyValidator Validator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator.ConfigurationPropertyDomainRoleId) as PropertyValidator;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator.ConfigurationPropertyDomainRoleId, value);
			}
		}
		#endregion
		#region CustomTypeConverter opposite domain role accessor
		/// <summary>
		/// Gets or sets CustomTypeConverter.
		/// The custom type converter to use if the TypeConverter property is set to Custom
		/// </summary>
		public virtual CustomTypeConverter CustomTypeConverter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter.ConfigurationPropertyDomainRoleId) as CustomTypeConverter;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter.ConfigurationPropertyDomainRoleId, value);
			}
		}
		#endregion
		#region Attributes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Attributes.
		/// Adds custom Attributes to the property
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Attribute> Attributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Attribute>, Attribute>(global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes.ConfigurationPropertyDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ConfigurationSectionDesigner.Attribute.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::ConfigurationSectionDesigner.Attribute sourceAttribute1 = sourceElement as global::ConfigurationSectionDesigner.Attribute;
			if (sourceAttribute1 != null)
			{
				// Create link for path ConfigurationPropertyHasAttributes.Attributes
				this.Attributes.Add(sourceAttribute1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::ConfigurationSectionDesigner.Attribute sourceAttribute1 = sourceElement as global::ConfigurationSectionDesigner.Attribute;
			if (sourceAttribute1 != null)
			{
				// Delete link for path ConfigurationPropertyHasAttributes.Attributes
				
				foreach (DslModeling::ElementLink link in global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes.GetLinks((global::ConfigurationSectionDesigner.ConfigurationProperty)this, sourceAttribute1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes.ConfigurationPropertyDomainRoleId, global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes.AttributeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass TypeDefinition
	/// Description for ConfigurationSectionDesigner.TypeDefinition
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.TypeDefinition.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.TypeDefinition.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c03f81ec-babe-4771-8886-ce2a697f1831")]
	public abstract partial class TypeDefinition : TypeBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TypeDefinition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc03f81ec, 0xbabe, 0x4771, 0x88, 0x86, 0xce, 0x2a, 0x69, 0x7f, 0x18, 0x31);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected TypeDefinition(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ReferringAttributes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ReferringAttributes.
		/// Description for
		/// ConfigurationSectionDesigner.AttributePropertyHasPropertyType.TypeDefinition
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AttributeProperty> ReferringAttributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<AttributeProperty>, AttributeProperty>(global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType.TypeDefinitionDomainRoleId);
			}
		}
		#endregion
		#region ConfigurationSectionModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ConfigurationSectionModel.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions.TypeDefinition
		/// </summary>
		public virtual ConfigurationSectionModel ConfigurationSectionModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions.TypeDefinitionDomainRoleId) as ConfigurationSectionModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions.TypeDefinitionDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass ExternalType
	/// Description for ConfigurationSectionDesigner.ExternalType
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ExternalType.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ExternalType.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1e95de2f-c311-4845-b897-eccbd1d0489c")]
	public partial class ExternalType : TypeDefinition
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExternalType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1e95de2f, 0xc311, 0x4845, 0xb8, 0x97, 0xec, 0xcb, 0xd1, 0xd0, 0x48, 0x9c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExternalType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExternalType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass EnumeratedType
	/// Description for ConfigurationSectionDesigner.EnumeratedType
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.EnumeratedType.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.EnumeratedType.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0dc675b4-e762-431b-a967-858fc923164b")]
	public partial class EnumeratedType : TypeDefinition
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EnumeratedType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0dc675b4, 0xe762, 0x431b, 0xa9, 0x67, 0x85, 0x8f, 0xc9, 0x23, 0x16, 0x4b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnumeratedType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnumeratedType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsFlags domain property code
		
		/// <summary>
		/// IsFlags domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsFlagsDomainPropertyId = new global::System.Guid(0x63e72b7e, 0xfd20, 0x4bd3, 0xa4, 0x80, 0xa8, 0x53, 0x25, 0xde, 0x3b, 0x1e);
		
		/// <summary>
		/// Storage for IsFlags
		/// </summary>
		private global::System.Boolean isFlagsPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsFlags domain property.
		/// Determines if this type is a flags enumeration.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.EnumeratedType/IsFlags.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.EnumeratedType/IsFlags.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.EnumeratedType/IsFlags.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("63e72b7e-fd20-4bd3-a480-a85325de3b1e")]
		public global::System.Boolean IsFlags
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isFlagsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsFlagsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EnumeratedType.IsFlags domain property.
		/// </summary>
		internal sealed partial class IsFlagsPropertyHandler : DslModeling::DomainPropertyValueHandler<EnumeratedType, global::System.Boolean>
		{
			private IsFlagsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EnumeratedType.IsFlags domain property value handler.
			/// </summary>
			public static readonly IsFlagsPropertyHandler Instance = new IsFlagsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EnumeratedType.IsFlags domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsFlagsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EnumeratedType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isFlagsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EnumeratedType element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isFlagsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Documentation domain property code
		
		/// <summary>
		/// Documentation domain property Id.
		/// </summary>
		public static readonly global::System.Guid DocumentationDomainPropertyId = new global::System.Guid(0xe42e806a, 0x8d97, 0x44f1, 0x8d, 0xfe, 0xf1, 0x54, 0xb0, 0x0f, 0x81, 0x6c);
		
		/// <summary>
		/// Storage for Documentation
		/// </summary>
		private global::System.String documentationPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Documentation domain property.
		/// Provides documentation notes on this type definition.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.EnumeratedType/Documentation.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.EnumeratedType/Documentation.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.EnumeratedType/Documentation.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e42e806a-8d97-44f1-8dfe-f154b00f816c")]
		public global::System.String Documentation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return documentationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DocumentationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EnumeratedType.Documentation domain property.
		/// </summary>
		internal sealed partial class DocumentationPropertyHandler : DslModeling::DomainPropertyValueHandler<EnumeratedType, global::System.String>
		{
			private DocumentationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EnumeratedType.Documentation domain property value handler.
			/// </summary>
			public static readonly DocumentationPropertyHandler Instance = new DocumentationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EnumeratedType.Documentation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DocumentationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EnumeratedType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.documentationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EnumeratedType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.documentationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CodeGenOptions domain property code
		
		/// <summary>
		/// CodeGenOptions domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeGenOptionsDomainPropertyId = new global::System.Guid(0x9d1f6ae2, 0x9eb7, 0x4cfa, 0xb8, 0x69, 0xcd, 0xb8, 0x4c, 0x86, 0x1e, 0x3e);
		
		/// <summary>
		/// Storage for CodeGenOptions
		/// </summary>
		private TypeDefinitionCodeGenOptions codeGenOptionsPropertyStorage = TypeDefinitionCodeGenOptions.TypeDefinition;
		
		/// <summary>
		/// Gets or sets the value of CodeGenOptions domain property.
		/// Defines if code for the enumeration is generated.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.EnumeratedType/CodeGenOptions.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.EnumeratedType/CodeGenOptions.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.EnumeratedType/CodeGenOptions.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(TypeDefinitionCodeGenOptions.TypeDefinition)]
		[DslModeling::DomainObjectId("9d1f6ae2-9eb7-4cfa-b869-cdb84c861e3e")]
		public TypeDefinitionCodeGenOptions CodeGenOptions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return codeGenOptionsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CodeGenOptionsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EnumeratedType.CodeGenOptions domain property.
		/// </summary>
		internal sealed partial class CodeGenOptionsPropertyHandler : DslModeling::DomainPropertyValueHandler<EnumeratedType, TypeDefinitionCodeGenOptions>
		{
			private CodeGenOptionsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EnumeratedType.CodeGenOptions domain property value handler.
			/// </summary>
			public static readonly CodeGenOptionsPropertyHandler Instance = new CodeGenOptionsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EnumeratedType.CodeGenOptions domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CodeGenOptionsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed TypeDefinitionCodeGenOptions GetValue(EnumeratedType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.codeGenOptionsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EnumeratedType element, TypeDefinitionCodeGenOptions newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				TypeDefinitionCodeGenOptions oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.codeGenOptionsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Literals opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Literals.
		/// Description for
		/// ConfigurationSectionDesigner.EnumeratedTypeHasLiterals.EnumeratedType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EnumerationLiteral> Literals
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EnumerationLiteral>, EnumerationLiteral>(global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals.EnumeratedTypeDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ConfigurationSectionDesigner.EnumerationLiteral.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::ConfigurationSectionDesigner.EnumerationLiteral sourceEnumerationLiteral1 = sourceElement as global::ConfigurationSectionDesigner.EnumerationLiteral;
			if (sourceEnumerationLiteral1 != null)
			{
				// Create link for path EnumeratedTypeHasLiterals.Literals
				this.Literals.Add(sourceEnumerationLiteral1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::ConfigurationSectionDesigner.EnumerationLiteral sourceEnumerationLiteral1 = sourceElement as global::ConfigurationSectionDesigner.EnumerationLiteral;
			if (sourceEnumerationLiteral1 != null)
			{
				// Delete link for path EnumeratedTypeHasLiterals.Literals
				
				foreach (DslModeling::ElementLink link in global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals.GetLinks((global::ConfigurationSectionDesigner.EnumeratedType)this, sourceEnumerationLiteral1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals.EnumeratedTypeDomainRoleId, global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals.EnumerationLiteralDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass EnumerationLiteral
	/// Description for ConfigurationSectionDesigner.EnumerationLiteral
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.EnumerationLiteral.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.EnumerationLiteral.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("43dcc559-12e4-42be-9fc6-770a07480377")]
	public partial class EnumerationLiteral : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EnumerationLiteral domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x43dcc559, 0x12e4, 0x42be, 0x9f, 0xc6, 0x77, 0x0a, 0x07, 0x48, 0x03, 0x77);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnumerationLiteral(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnumerationLiteral(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x03447a00, 0x87e1, 0x4d93, 0x91, 0xc8, 0xc4, 0x02, 0x63, 0x86, 0xa7, 0x57);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the enumeration literal.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.EnumerationLiteral/Name.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.EnumerationLiteral/Name.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.EnumerationLiteral/Name.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("03447a00-87e1-4d93-91c8-c4026386a757")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EnumerationLiteral.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<EnumerationLiteral, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EnumerationLiteral.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EnumerationLiteral.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EnumerationLiteral element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EnumerationLiteral element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Value domain property code
		
		/// <summary>
		/// Value domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueDomainPropertyId = new global::System.Guid(0xa47f00b1, 0xebcd, 0x482b, 0xb8, 0xb1, 0xfc, 0xf6, 0xd6, 0xd6, 0x61, 0x26);
		
		/// <summary>
		/// Storage for Value
		/// </summary>
		private global::System.String valuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Value domain property.
		/// The numeric value of the enumeration literal (may be null).
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.EnumerationLiteral/Value.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.EnumerationLiteral/Value.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.EnumerationLiteral/Value.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a47f00b1-ebcd-482b-b8b1-fcf6d6d66126")]
		public global::System.String Value
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return valuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EnumerationLiteral.Value domain property.
		/// </summary>
		internal sealed partial class ValuePropertyHandler : DslModeling::DomainPropertyValueHandler<EnumerationLiteral, global::System.String>
		{
			private ValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EnumerationLiteral.Value domain property value handler.
			/// </summary>
			public static readonly ValuePropertyHandler Instance = new ValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EnumerationLiteral.Value domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EnumerationLiteral element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.valuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EnumerationLiteral element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.valuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Documentation domain property code
		
		/// <summary>
		/// Documentation domain property Id.
		/// </summary>
		public static readonly global::System.Guid DocumentationDomainPropertyId = new global::System.Guid(0xaa6e7b02, 0x754b, 0x428b, 0x9c, 0x16, 0x76, 0x52, 0xc9, 0xa6, 0xc1, 0x10);
		
		/// <summary>
		/// Storage for Documentation
		/// </summary>
		private global::System.String documentationPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Documentation domain property.
		/// Provides documentation notes on this enumeration literal.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.EnumerationLiteral/Documentation.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.EnumerationLiteral/Documentation.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.EnumerationLiteral/Documentation.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("aa6e7b02-754b-428b-9c16-7652c9a6c110")]
		public global::System.String Documentation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return documentationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DocumentationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EnumerationLiteral.Documentation domain property.
		/// </summary>
		internal sealed partial class DocumentationPropertyHandler : DslModeling::DomainPropertyValueHandler<EnumerationLiteral, global::System.String>
		{
			private DocumentationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EnumerationLiteral.Documentation domain property value handler.
			/// </summary>
			public static readonly DocumentationPropertyHandler Instance = new DocumentationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EnumerationLiteral.Documentation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DocumentationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EnumerationLiteral element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.documentationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EnumerationLiteral element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.documentationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EnumeratedType opposite domain role accessor
		/// <summary>
		/// Gets or sets EnumeratedType.
		/// Description for
		/// ConfigurationSectionDesigner.EnumeratedTypeHasLiterals.EnumerationLiteral
		/// </summary>
		public virtual EnumeratedType EnumeratedType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals.EnumerationLiteralDomainRoleId) as EnumeratedType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals.EnumerationLiteralDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass BaseConfigurationType
	/// Description for ConfigurationSectionDesigner.BaseConfigurationType
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.BaseConfigurationType.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.BaseConfigurationType.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("63af814b-6a3c-4043-a197-7859295f34d0")]
	public abstract partial class BaseConfigurationType : TypeBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// BaseConfigurationType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x63af814b, 0x6a3c, 0x4043, 0xa1, 0x97, 0x78, 0x59, 0x29, 0x5f, 0x34, 0xd0);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected BaseConfigurationType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TypeName domain property code
		
		/// <summary>
		/// TypeName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeNameDomainPropertyId = new global::System.Guid(0xc9f30476, 0x3f09, 0x45f5, 0xbd, 0x35, 0x1b, 0xa8, 0x44, 0x19, 0x4c, 0xfe);
		
		/// <summary>
		/// Gets or sets the value of TypeName domain property.
		/// The actual type name of this Configuration Element.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.BaseConfigurationType/TypeName.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.BaseConfigurationType/TypeName.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.BaseConfigurationType/TypeName.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("c9f30476-3f09-45f5-bd35-1ba844194cfe")]
		public global::System.String TypeName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TypeNamePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the BaseConfigurationType.TypeName domain property.
		/// </summary>
		internal sealed partial class TypeNamePropertyHandler : DslModeling::CalculatedPropertyValueHandler<BaseConfigurationType, global::System.String>
		{
			private TypeNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseConfigurationType.TypeName domain property value handler.
			/// </summary>
			public static readonly TypeNamePropertyHandler Instance = new TypeNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseConfigurationType.TypeName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BaseConfigurationType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TypeName because its Kind is
				// set to Calculated. Please provide the GetTypeNameValue()
				// method on the domain class.
				return element.GetTypeNameValue();
			}
		
		}
		
		#endregion
		#region InheritanceModifier domain property code
		
		/// <summary>
		/// InheritanceModifier domain property Id.
		/// </summary>
		public static readonly global::System.Guid InheritanceModifierDomainPropertyId = new global::System.Guid(0x2a1bb1bb, 0x73fe, 0x4a36, 0xbe, 0x74, 0x3e, 0x0d, 0x7d, 0x51, 0xd9, 0xda);
		
		/// <summary>
		/// Storage for InheritanceModifier
		/// </summary>
		private InheritanceModifiers inheritanceModifierPropertyStorage = InheritanceModifiers.None;
		
		/// <summary>
		/// Gets or sets the value of InheritanceModifier domain property.
		/// Determines if the inheritance modifier of the generated class is none, abstract
		/// or sealed
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.BaseConfigurationType/InheritanceModifier.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.BaseConfigurationType/InheritanceModifier.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.BaseConfigurationType/InheritanceModifier.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(InheritanceModifiers.None)]
		[DslModeling::DomainObjectId("2a1bb1bb-73fe-4a36-be74-3e0d7d51d9da")]
		public InheritanceModifiers InheritanceModifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return inheritanceModifierPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InheritanceModifierPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BaseConfigurationType.InheritanceModifier domain property.
		/// </summary>
		internal sealed partial class InheritanceModifierPropertyHandler : DslModeling::DomainPropertyValueHandler<BaseConfigurationType, InheritanceModifiers>
		{
			private InheritanceModifierPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseConfigurationType.InheritanceModifier domain property value handler.
			/// </summary>
			public static readonly InheritanceModifierPropertyHandler Instance = new InheritanceModifierPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseConfigurationType.InheritanceModifier domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InheritanceModifierDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed InheritanceModifiers GetValue(BaseConfigurationType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.inheritanceModifierPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BaseConfigurationType element, InheritanceModifiers newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				InheritanceModifiers oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.inheritanceModifierPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AccessModifier domain property code
		
		/// <summary>
		/// AccessModifier domain property Id.
		/// </summary>
		public static readonly global::System.Guid AccessModifierDomainPropertyId = new global::System.Guid(0x00041019, 0xa117, 0x4bf5, 0xb5, 0xdc, 0x19, 0x0a, 0x1e, 0xe7, 0xa4, 0xd1);
		
		/// <summary>
		/// Storage for AccessModifier
		/// </summary>
		private AccessModifiers accessModifierPropertyStorage = AccessModifiers.Public;
		
		/// <summary>
		/// Gets or sets the value of AccessModifier domain property.
		/// Determines what the access modifier for the generated class is.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.BaseConfigurationType/AccessModifier.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.BaseConfigurationType/AccessModifier.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.BaseConfigurationType/AccessModifier.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(AccessModifiers.Public)]
		[DslModeling::DomainObjectId("00041019-a117-4bf5-b5dc-190a1ee7a4d1")]
		public AccessModifiers AccessModifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return accessModifierPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AccessModifierPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BaseConfigurationType.AccessModifier domain property.
		/// </summary>
		internal sealed partial class AccessModifierPropertyHandler : DslModeling::DomainPropertyValueHandler<BaseConfigurationType, AccessModifiers>
		{
			private AccessModifierPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseConfigurationType.AccessModifier domain property value handler.
			/// </summary>
			public static readonly AccessModifierPropertyHandler Instance = new AccessModifierPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseConfigurationType.AccessModifier domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AccessModifierDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed AccessModifiers GetValue(BaseConfigurationType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.accessModifierPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BaseConfigurationType element, AccessModifiers newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				AccessModifiers oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.accessModifierPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ConfigurationSectionModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ConfigurationSectionModel.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements.BaseConfigurationType
		/// </summary>
		public virtual ConfigurationSectionModel ConfigurationSectionModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements.BaseConfigurationTypeDomainRoleId) as ConfigurationSectionModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements.BaseConfigurationTypeDomainRoleId, value);
			}
		}
		#endregion
		#region BaseClass opposite domain role accessor
		/// <summary>
		/// Gets or sets BaseClass.
		/// Base class of this type
		/// </summary>
		public virtual BaseConfigurationType BaseClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass.SourceBaseConfigurationTypeDomainRoleId) as BaseConfigurationType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass.SourceBaseConfigurationTypeDomainRoleId, value);
			}
		}
		#endregion
		#region SuperClassOf opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SuperClassOf.
		/// Description for
		/// ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass.TargetBaseConfigurationType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<BaseConfigurationType> SuperClassOf
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<BaseConfigurationType>, BaseConfigurationType>(global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass.TargetBaseConfigurationTypeDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass ConfigurationSectionGroup
	/// Description for ConfigurationSectionDesigner.ConfigurationSectionGroup
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionGroup.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionGroup.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d475254d-0763-4840-aee9-f64e7388dec6")]
	public partial class ConfigurationSectionGroup : BaseConfigurationType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConfigurationSectionGroup domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd475254d, 0x0763, 0x4840, 0xae, 0xe9, 0xf6, 0x4e, 0x73, 0x88, 0xde, 0xc6);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConfigurationSectionGroup(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConfigurationSectionGroup(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ConfigurationSectionProperties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ConfigurationSectionProperties.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties.ConfigurationSectionGroup
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConfigurationSectionProperty> ConfigurationSectionProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ConfigurationSectionProperty>, ConfigurationSectionProperty>(global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties.ConfigurationSectionGroupDomainRoleId);
			}
		}
		#endregion
		#region ConfigurationSectionGroupProperties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ConfigurationSectionGroupProperties.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties.ConfigurationSectionGroup
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConfigurationSectionGroupProperty> ConfigurationSectionGroupProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ConfigurationSectionGroupProperty>, ConfigurationSectionGroupProperty>(global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties.ConfigurationSectionGroupDomainRoleId);
			}
		}
		#endregion
		#region ReferringConfigurationSectionGroup opposite domain role accessor
		/// <summary>
		/// Gets or sets ReferringConfigurationSectionGroup.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup.ConfigurationSectionGroup
		/// </summary>
		public virtual ConfigurationSectionGroupProperty ReferringConfigurationSectionGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup.ConfigurationSectionGroupDomainRoleId) as ConfigurationSectionGroupProperty;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup.ConfigurationSectionGroupDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ConfigurationSectionDesigner.ConfigurationSectionProperty.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ConfigurationSectionDesigner.ConfigurationSectionGroupProperty.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::ConfigurationSectionDesigner.ConfigurationSectionProperty sourceConfigurationSectionProperty1 = sourceElement as global::ConfigurationSectionDesigner.ConfigurationSectionProperty;
			if (sourceConfigurationSectionProperty1 != null)
			{
				// Create link for path ConfigurationSectionGroupHasConfigurationSectionProperties.ConfigurationSectionProperties
				this.ConfigurationSectionProperties.Add(sourceConfigurationSectionProperty1);

				return;
			}
				
			global::ConfigurationSectionDesigner.ConfigurationSectionGroupProperty sourceConfigurationSectionGroupProperty2 = sourceElement as global::ConfigurationSectionDesigner.ConfigurationSectionGroupProperty;
			if (sourceConfigurationSectionGroupProperty2 != null)
			{
				// Create link for path ConfigurationSectionGroupHasConfigurationSectionGroupProperties.ConfigurationSectionGroupProperties
				this.ConfigurationSectionGroupProperties.Add(sourceConfigurationSectionGroupProperty2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::ConfigurationSectionDesigner.ConfigurationSectionProperty sourceConfigurationSectionProperty1 = sourceElement as global::ConfigurationSectionDesigner.ConfigurationSectionProperty;
			if (sourceConfigurationSectionProperty1 != null)
			{
				// Delete link for path ConfigurationSectionGroupHasConfigurationSectionProperties.ConfigurationSectionProperties
				
				foreach (DslModeling::ElementLink link in global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties.GetLinks((global::ConfigurationSectionDesigner.ConfigurationSectionGroup)this, sourceConfigurationSectionProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties.ConfigurationSectionGroupDomainRoleId, global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties.ConfigurationSectionPropertyDomainRoleId);
				}

				return;
			}
				
			global::ConfigurationSectionDesigner.ConfigurationSectionGroupProperty sourceConfigurationSectionGroupProperty2 = sourceElement as global::ConfigurationSectionDesigner.ConfigurationSectionGroupProperty;
			if (sourceConfigurationSectionGroupProperty2 != null)
			{
				// Delete link for path ConfigurationSectionGroupHasConfigurationSectionGroupProperties.ConfigurationSectionGroupProperties
				
				foreach (DslModeling::ElementLink link in global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties.GetLinks((global::ConfigurationSectionDesigner.ConfigurationSectionGroup)this, sourceConfigurationSectionGroupProperty2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties.ConfigurationSectionGroupDomainRoleId, global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties.ConfigurationSectionGroupPropertyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass ConfigurationSectionProperty
	/// Description for ConfigurationSectionDesigner.ConfigurationSectionProperty
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionProperty.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionProperty.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("29e0dc85-a1b6-40ee-8d5e-297e31619245")]
	public partial class ConfigurationSectionProperty : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConfigurationSectionProperty domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x29e0dc85, 0xa1b6, 0x40ee, 0x8d, 0x5e, 0x29, 0x7e, 0x31, 0x61, 0x92, 0x45);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConfigurationSectionProperty(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConfigurationSectionProperty(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ConfigurationSectionName domain property code
		
		/// <summary>
		/// ConfigurationSectionName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationSectionNameDomainPropertyId = new global::System.Guid(0xf755f792, 0x28ba, 0x40f4, 0x85, 0x01, 0xf8, 0xc5, 0x47, 0x67, 0xfa, 0xad);
		
		/// <summary>
		/// Gets or sets the value of ConfigurationSectionName domain property.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionProperty.Configuration Section
		/// Name
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionProperty/ConfigurationSectionName.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionProperty/ConfigurationSectionName.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("f755f792-28ba-40f4-8501-f8c54767faad")]
		public global::System.String ConfigurationSectionName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ConfigurationSectionNamePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationSectionProperty.ConfigurationSectionName domain property.
		/// </summary>
		internal sealed partial class ConfigurationSectionNamePropertyHandler : DslModeling::CalculatedPropertyValueHandler<ConfigurationSectionProperty, global::System.String>
		{
			private ConfigurationSectionNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationSectionProperty.ConfigurationSectionName domain property value handler.
			/// </summary>
			public static readonly ConfigurationSectionNamePropertyHandler Instance = new ConfigurationSectionNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationSectionProperty.ConfigurationSectionName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConfigurationSectionNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConfigurationSectionProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ConfigurationSectionName because its Kind is
				// set to Calculated. Please provide the GetConfigurationSectionNameValue()
				// method on the domain class.
				return element.GetConfigurationSectionNameValue();
			}
		
		}
		
		#endregion
		#region ConfigurationSectionGroup opposite domain role accessor
		/// <summary>
		/// Gets or sets ConfigurationSectionGroup.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties.ConfigurationSectionProperty
		/// </summary>
		public virtual ConfigurationSectionGroup ConfigurationSectionGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties.ConfigurationSectionPropertyDomainRoleId) as ConfigurationSectionGroup;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties.ConfigurationSectionPropertyDomainRoleId, value);
			}
		}
		#endregion
		#region ContainedConfigurationSection opposite domain role accessor
		/// <summary>
		/// Gets or sets ContainedConfigurationSection.
		/// The configuration section the section group contains
		/// </summary>
		public virtual ConfigurationSection ContainedConfigurationSection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection.ConfigurationSectionPropertyDomainRoleId) as ConfigurationSection;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection.ConfigurationSectionPropertyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass ConfigurationSectionGroupProperty
	/// Description for ConfigurationSectionDesigner.ConfigurationSectionGroupProperty
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionGroupProperty.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionGroupProperty.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("eb5ac774-3003-4615-8158-f0f6e6b5133d")]
	public partial class ConfigurationSectionGroupProperty : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConfigurationSectionGroupProperty domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xeb5ac774, 0x3003, 0x4615, 0x81, 0x58, 0xf0, 0xf6, 0xe6, 0xb5, 0x13, 0x3d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConfigurationSectionGroupProperty(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConfigurationSectionGroupProperty(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ConfigurationSectionGroupName domain property code
		
		/// <summary>
		/// ConfigurationSectionGroupName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationSectionGroupNameDomainPropertyId = new global::System.Guid(0x815800d0, 0x413c, 0x4861, 0x9a, 0xdd, 0x7b, 0x35, 0x08, 0x45, 0x0d, 0xe2);
		
		/// <summary>
		/// Gets or sets the value of ConfigurationSectionGroupName domain property.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionGroupProperty.Configuration
		/// Section Group Name
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionGroupProperty/ConfigurationSectionGroupName.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionGroupProperty/ConfigurationSectionGroupName.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("815800d0-413c-4861-9add-7b3508450de2")]
		public global::System.String ConfigurationSectionGroupName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ConfigurationSectionGroupNamePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationSectionGroupProperty.ConfigurationSectionGroupName domain property.
		/// </summary>
		internal sealed partial class ConfigurationSectionGroupNamePropertyHandler : DslModeling::CalculatedPropertyValueHandler<ConfigurationSectionGroupProperty, global::System.String>
		{
			private ConfigurationSectionGroupNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationSectionGroupProperty.ConfigurationSectionGroupName domain property value handler.
			/// </summary>
			public static readonly ConfigurationSectionGroupNamePropertyHandler Instance = new ConfigurationSectionGroupNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationSectionGroupProperty.ConfigurationSectionGroupName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConfigurationSectionGroupNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConfigurationSectionGroupProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ConfigurationSectionGroupName because its Kind is
				// set to Calculated. Please provide the GetConfigurationSectionGroupNameValue()
				// method on the domain class.
				return element.GetConfigurationSectionGroupNameValue();
			}
		
		}
		
		#endregion
		#region ConfigurationSectionGroup opposite domain role accessor
		/// <summary>
		/// Gets or sets ConfigurationSectionGroup.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties.ConfigurationSectionGroupProperty
		/// </summary>
		public virtual ConfigurationSectionGroup ConfigurationSectionGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties.ConfigurationSectionGroupPropertyDomainRoleId) as ConfigurationSectionGroup;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties.ConfigurationSectionGroupPropertyDomainRoleId, value);
			}
		}
		#endregion
		#region ContainedConfigurationSectionGroup opposite domain role accessor
		/// <summary>
		/// Gets or sets ContainedConfigurationSectionGroup.
		/// The configuration section the section group contains
		/// </summary>
		public virtual ConfigurationSectionGroup ContainedConfigurationSectionGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup.ConfigurationSectionGroupPropertyDomainRoleId) as ConfigurationSectionGroup;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup.ConfigurationSectionGroupPropertyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass PropertyValidators
	/// Description for ConfigurationSectionDesigner.PropertyValidators
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.PropertyValidators.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.PropertyValidators.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("14a6d386-5e9e-42d3-a6cc-335ab70d14cf")]
	public partial class PropertyValidators : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PropertyValidators domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x14a6d386, 0x5e9e, 0x42d3, 0xa6, 0xcc, 0x33, 0x5a, 0xb7, 0x0d, 0x14, 0xcf);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PropertyValidators(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PropertyValidators(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ConfigurationSectionModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ConfigurationSectionModel.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators.PropertyValidators
		/// </summary>
		public virtual ConfigurationSectionModel ConfigurationSectionModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators.PropertyValidatorsDomainRoleId) as ConfigurationSectionModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators.PropertyValidatorsDomainRoleId, value);
			}
		}
		#endregion
		#region Validators opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Validators.
		/// Description for
		/// ConfigurationSectionDesigner.PropertyValidatorsHasValidators.PropertyValidators
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<PropertyValidator> Validators
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<PropertyValidator>, PropertyValidator>(global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators.PropertyValidatorsDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ConfigurationSectionDesigner.PropertyValidator.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::ConfigurationSectionDesigner.PropertyValidator sourcePropertyValidator1 = sourceElement as global::ConfigurationSectionDesigner.PropertyValidator;
			if (sourcePropertyValidator1 != null)
			{
				// Create link for path PropertyValidatorsHasValidators.Validators
				this.Validators.Add(sourcePropertyValidator1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::ConfigurationSectionDesigner.PropertyValidator sourcePropertyValidator1 = sourceElement as global::ConfigurationSectionDesigner.PropertyValidator;
			if (sourcePropertyValidator1 != null)
			{
				// Delete link for path PropertyValidatorsHasValidators.Validators
				
				foreach (DslModeling::ElementLink link in global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators.GetLinks((global::ConfigurationSectionDesigner.PropertyValidators)this, sourcePropertyValidator1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators.PropertyValidatorsDomainRoleId, global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators.PropertyValidatorDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass PropertyValidator
	/// Description for ConfigurationSectionDesigner.PropertyValidator
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.PropertyValidator.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.PropertyValidator.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("27282ca0-27e0-4bb3-86d8-f534f0f35173")]
	public abstract partial class PropertyValidator : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PropertyValidator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x27282ca0, 0x27e0, 0x4bb3, 0x86, 0xd8, 0xf5, 0x34, 0xf0, 0xf3, 0x51, 0x73);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected PropertyValidator(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x986fecd5, 0x8de3, 0x4085, 0x85, 0xbc, 0x7f, 0xaf, 0x5e, 0xb4, 0x69, 0x41);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The validator's name
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.PropertyValidator/Name.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.PropertyValidator/Name.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.PropertyValidator/Name.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("986fecd5-8de3-4085-85bc-7faf5eb46941")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PropertyValidator.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<PropertyValidator, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PropertyValidator.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PropertyValidator.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PropertyValidator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PropertyValidator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PropertyValidators opposite domain role accessor
		/// <summary>
		/// Gets or sets PropertyValidators.
		/// Description for
		/// ConfigurationSectionDesigner.PropertyValidatorsHasValidators.PropertyValidator
		/// </summary>
		public virtual PropertyValidators PropertyValidators
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators.PropertyValidatorDomainRoleId) as PropertyValidators;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators.PropertyValidatorDomainRoleId, value);
			}
		}
		#endregion
		#region ReferringConfigurationProperties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ReferringConfigurationProperties.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator.PropertyValidator
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConfigurationProperty> ReferringConfigurationProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ConfigurationProperty>, ConfigurationProperty>(global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator.PropertyValidatorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass CallbackValidator
	/// Provides dynamic validation of an object by calling a method to validate it.
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.CallbackValidator.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.CallbackValidator.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("78185a4a-fbfc-453e-a0cb-b88efc0dfd8f")]
	public sealed partial class CallbackValidator : PropertyValidator
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CallbackValidator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x78185a4a, 0xfbfc, 0x453e, 0xa0, 0xcb, 0xb8, 0x8e, 0xfc, 0x0d, 0xfd, 0x8f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CallbackValidator(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CallbackValidator(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Callback domain property code
		
		/// <summary>
		/// Callback domain property Id.
		/// </summary>
		public static readonly global::System.Guid CallbackDomainPropertyId = new global::System.Guid(0x9c9c90ef, 0x595f, 0x44bd, 0xa3, 0x11, 0xb6, 0x78, 0x9c, 0x60, 0x7c, 0x89);
		
		/// <summary>
		/// Storage for Callback
		/// </summary>
		private global::System.String callbackPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Callback domain property.
		/// The method to call for validation.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.CallbackValidator/Callback.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.CallbackValidator/Callback.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.CallbackValidator/Callback.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9c9c90ef-595f-44bd-a311-b6789c607c89")]
		public global::System.String Callback
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return callbackPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CallbackPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CallbackValidator.Callback domain property.
		/// </summary>
		internal sealed partial class CallbackPropertyHandler : DslModeling::DomainPropertyValueHandler<CallbackValidator, global::System.String>
		{
			private CallbackPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CallbackValidator.Callback domain property value handler.
			/// </summary>
			public static readonly CallbackPropertyHandler Instance = new CallbackPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CallbackValidator.Callback domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CallbackDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CallbackValidator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.callbackPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CallbackValidator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.callbackPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass NumberValidator
	/// Description for ConfigurationSectionDesigner.NumberValidator
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.NumberValidator.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.NumberValidator.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a4446ac7-f21f-45e4-ba96-5d32a7882695")]
	public abstract partial class NumberValidator : PropertyValidator
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NumberValidator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa4446ac7, 0xf21f, 0x45e4, 0xba, 0x96, 0x5d, 0x32, 0xa7, 0x88, 0x26, 0x95);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NumberValidator(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ExcludeRange domain property code
		
		/// <summary>
		/// ExcludeRange domain property Id.
		/// </summary>
		public static readonly global::System.Guid ExcludeRangeDomainPropertyId = new global::System.Guid(0xbf8817ed, 0xa49c, 0x4b34, 0xb6, 0x9e, 0xf6, 0x85, 0x7f, 0x7c, 0x1a, 0xc2);
		
		/// <summary>
		/// Storage for ExcludeRange
		/// </summary>
		private global::System.Boolean excludeRangePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ExcludeRange domain property.
		/// Indicates whether to include or exclude the range defined by the MinValue and
		/// MaxValue property values.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.NumberValidator/ExcludeRange.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.NumberValidator/ExcludeRange.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.NumberValidator/ExcludeRange.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bf8817ed-a49c-4b34-b69e-f6857f7c1ac2")]
		public global::System.Boolean ExcludeRange
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return excludeRangePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ExcludeRangePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NumberValidator.ExcludeRange domain property.
		/// </summary>
		internal sealed partial class ExcludeRangePropertyHandler : DslModeling::DomainPropertyValueHandler<NumberValidator, global::System.Boolean>
		{
			private ExcludeRangePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NumberValidator.ExcludeRange domain property value handler.
			/// </summary>
			public static readonly ExcludeRangePropertyHandler Instance = new ExcludeRangePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NumberValidator.ExcludeRange domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ExcludeRangeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(NumberValidator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.excludeRangePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NumberValidator element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.excludeRangePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass IntegerValidator
	/// Validates properties of Int32 type.
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.IntegerValidator.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.IntegerValidator.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("83c56d8d-2749-4edc-bb83-c447b784134c")]
	public sealed partial class IntegerValidator : NumberValidator
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// IntegerValidator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x83c56d8d, 0x2749, 0x4edc, 0xbb, 0x83, 0xc4, 0x47, 0xb7, 0x84, 0x13, 0x4c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IntegerValidator(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IntegerValidator(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region MaxValue domain property code
		
		/// <summary>
		/// MaxValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid MaxValueDomainPropertyId = new global::System.Guid(0xf43c8b67, 0x86c7, 0x4d75, 0xbf, 0x62, 0xf3, 0x06, 0xb4, 0x0b, 0x74, 0x98);
		
		/// <summary>
		/// Storage for MaxValue
		/// </summary>
		private global::System.Int32 maxValuePropertyStorage = 2147483647;
		
		/// <summary>
		/// Gets or sets the value of MaxValue domain property.
		/// The maximum value allowed for the property.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.IntegerValidator/MaxValue.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.IntegerValidator/MaxValue.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.IntegerValidator/MaxValue.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(2147483647)]
		[DslModeling::DomainObjectId("f43c8b67-86c7-4d75-bf62-f306b40b7498")]
		public global::System.Int32 MaxValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return maxValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MaxValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IntegerValidator.MaxValue domain property.
		/// </summary>
		internal sealed partial class MaxValuePropertyHandler : DslModeling::DomainPropertyValueHandler<IntegerValidator, global::System.Int32>
		{
			private MaxValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IntegerValidator.MaxValue domain property value handler.
			/// </summary>
			public static readonly MaxValuePropertyHandler Instance = new MaxValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IntegerValidator.MaxValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MaxValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(IntegerValidator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.maxValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IntegerValidator element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.maxValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MinValue domain property code
		
		/// <summary>
		/// MinValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid MinValueDomainPropertyId = new global::System.Guid(0x7dd1e02b, 0x8f45, 0x41e9, 0x9c, 0x50, 0x92, 0x50, 0xcd, 0x04, 0xe2, 0x84);
		
		/// <summary>
		/// Storage for MinValue
		/// </summary>
		private global::System.Int32 minValuePropertyStorage = -2147483648;
		
		/// <summary>
		/// Gets or sets the value of MinValue domain property.
		/// The minimum value allowed for the property.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.IntegerValidator/MinValue.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.IntegerValidator/MinValue.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.IntegerValidator/MinValue.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(-2147483648)]
		[DslModeling::DomainObjectId("7dd1e02b-8f45-41e9-9c50-9250cd04e284")]
		public global::System.Int32 MinValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return minValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MinValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IntegerValidator.MinValue domain property.
		/// </summary>
		internal sealed partial class MinValuePropertyHandler : DslModeling::DomainPropertyValueHandler<IntegerValidator, global::System.Int32>
		{
			private MinValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IntegerValidator.MinValue domain property value handler.
			/// </summary>
			public static readonly MinValuePropertyHandler Instance = new MinValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IntegerValidator.MinValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MinValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(IntegerValidator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.minValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IntegerValidator element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.minValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass LongValidator
	/// Validates properties of Int64 type.
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.LongValidator.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.LongValidator.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("615db1fd-b687-4686-a6d3-a5b16b94bb60")]
	public sealed partial class LongValidator : NumberValidator
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// LongValidator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x615db1fd, 0xb687, 0x4686, 0xa6, 0xd3, 0xa5, 0xb1, 0x6b, 0x94, 0xbb, 0x60);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LongValidator(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LongValidator(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region MaxValue domain property code
		
		/// <summary>
		/// MaxValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid MaxValueDomainPropertyId = new global::System.Guid(0x6c5d698f, 0x87f1, 0x4149, 0xa5, 0xc8, 0xc6, 0xd5, 0xf5, 0x4c, 0x4d, 0xed);
		
		/// <summary>
		/// Gets or sets the value of MaxValue domain property.
		/// The maximum value allowed for the property.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.LongValidator/MaxValue.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.LongValidator/MaxValue.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.LongValidator/MaxValue.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("6c5d698f-87f1-4149-a5c8-c6d5f54c4ded")]
		public global::System.Int64 MaxValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return MaxValuePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MaxValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LongValidator.MaxValue domain property.
		/// </summary>
		internal sealed partial class MaxValuePropertyHandler : DslModeling::DomainPropertyValueHandler<LongValidator, global::System.Int64>
		{
			private MaxValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LongValidator.MaxValue domain property value handler.
			/// </summary>
			public static readonly MaxValuePropertyHandler Instance = new MaxValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LongValidator.MaxValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MaxValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int64 GetValue(LongValidator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for MaxValue because its Kind is
				// set to CustomStorage. Please provide the GetMaxValueValue()
				// method on the domain class.
				return element.GetMaxValueValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LongValidator element, global::System.Int64 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int64 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for MaxValue because its Kind is
					// set to CustomStorage. Please provide the SetMaxValueValue()
					// method on the domain class.
					element.SetMaxValueValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region MinValue domain property code
		
		/// <summary>
		/// MinValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid MinValueDomainPropertyId = new global::System.Guid(0x628ab3c6, 0x3c34, 0x4fa8, 0xac, 0x5f, 0xfe, 0x01, 0x71, 0x3f, 0x5f, 0x67);
		
		/// <summary>
		/// Gets or sets the value of MinValue domain property.
		/// The minimum value allowed for the property.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.LongValidator/MinValue.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.LongValidator/MinValue.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.LongValidator/MinValue.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("628ab3c6-3c34-4fa8-ac5f-fe01713f5f67")]
		public global::System.Int64 MinValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return MinValuePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MinValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LongValidator.MinValue domain property.
		/// </summary>
		internal sealed partial class MinValuePropertyHandler : DslModeling::DomainPropertyValueHandler<LongValidator, global::System.Int64>
		{
			private MinValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LongValidator.MinValue domain property value handler.
			/// </summary>
			public static readonly MinValuePropertyHandler Instance = new MinValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LongValidator.MinValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MinValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int64 GetValue(LongValidator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for MinValue because its Kind is
				// set to CustomStorage. Please provide the GetMinValueValue()
				// method on the domain class.
				return element.GetMinValueValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LongValidator element, global::System.Int64 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int64 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for MinValue because its Kind is
					// set to CustomStorage. Please provide the SetMinValueValue()
					// method on the domain class.
					element.SetMinValueValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass PositiveTimeSpanValidator
	/// Validates properties of TimeSpan type.
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.PositiveTimeSpanValidator.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.PositiveTimeSpanValidator.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1f887b1f-0e17-4ed0-b52d-27fb598c506e")]
	public sealed partial class PositiveTimeSpanValidator : PropertyValidator
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PositiveTimeSpanValidator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1f887b1f, 0x0e17, 0x4ed0, 0xb5, 0x2d, 0x27, 0xfb, 0x59, 0x8c, 0x50, 0x6e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PositiveTimeSpanValidator(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PositiveTimeSpanValidator(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass TimeSpanValidator
	/// Validates properties of TimeSpan type.
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.TimeSpanValidator.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.TimeSpanValidator.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2941db5b-589b-48a4-9499-f9aabc27655e")]
	public sealed partial class TimeSpanValidator : NumberValidator
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TimeSpanValidator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2941db5b, 0x589b, 0x48a4, 0x94, 0x99, 0xf9, 0xaa, 0xbc, 0x27, 0x65, 0x5e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TimeSpanValidator(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TimeSpanValidator(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region MaxValue domain property code
		
		/// <summary>
		/// MaxValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid MaxValueDomainPropertyId = new global::System.Guid(0x41156c42, 0xd51b, 0x48b5, 0xad, 0x93, 0xbd, 0x58, 0xa4, 0x17, 0xb2, 0x15);
		
		/// <summary>
		/// Gets or sets the value of MaxValue domain property.
		/// The maximum value allowed for the property.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.TimeSpanValidator/MaxValue.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.TimeSpanValidator/MaxValue.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.TimeSpanValidator/MaxValue.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("41156c42-d51b-48b5-ad93-bd58a417b215")]
		public global::System.TimeSpan MaxValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return MaxValuePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MaxValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TimeSpanValidator.MaxValue domain property.
		/// </summary>
		internal sealed partial class MaxValuePropertyHandler : DslModeling::DomainPropertyValueHandler<TimeSpanValidator, global::System.TimeSpan>
		{
			private MaxValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TimeSpanValidator.MaxValue domain property value handler.
			/// </summary>
			public static readonly MaxValuePropertyHandler Instance = new MaxValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TimeSpanValidator.MaxValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MaxValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.TimeSpan GetValue(TimeSpanValidator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for MaxValue because its Kind is
				// set to CustomStorage. Please provide the GetMaxValueValue()
				// method on the domain class.
				return element.GetMaxValueValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TimeSpanValidator element, global::System.TimeSpan newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.TimeSpan oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for MaxValue because its Kind is
					// set to CustomStorage. Please provide the SetMaxValueValue()
					// method on the domain class.
					element.SetMaxValueValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region MinValue domain property code
		
		/// <summary>
		/// MinValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid MinValueDomainPropertyId = new global::System.Guid(0x5d5b0174, 0x1e11, 0x42e8, 0xa0, 0xa0, 0x3a, 0xa0, 0xb5, 0x2c, 0xbc, 0x5d);
		
		/// <summary>
		/// Gets or sets the value of MinValue domain property.
		/// The minimum value allowed for the property.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.TimeSpanValidator/MinValue.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.TimeSpanValidator/MinValue.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.TimeSpanValidator/MinValue.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("5d5b0174-1e11-42e8-a0a0-3aa0b52cbc5d")]
		public global::System.TimeSpan MinValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return MinValuePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MinValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TimeSpanValidator.MinValue domain property.
		/// </summary>
		internal sealed partial class MinValuePropertyHandler : DslModeling::DomainPropertyValueHandler<TimeSpanValidator, global::System.TimeSpan>
		{
			private MinValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TimeSpanValidator.MinValue domain property value handler.
			/// </summary>
			public static readonly MinValuePropertyHandler Instance = new MinValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TimeSpanValidator.MinValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MinValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.TimeSpan GetValue(TimeSpanValidator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for MinValue because its Kind is
				// set to CustomStorage. Please provide the GetMinValueValue()
				// method on the domain class.
				return element.GetMinValueValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TimeSpanValidator element, global::System.TimeSpan newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.TimeSpan oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for MinValue because its Kind is
					// set to CustomStorage. Please provide the SetMinValueValue()
					// method on the domain class.
					element.SetMinValueValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass RegexStringValidator
	/// Uses a regular expression to validate properties of the String type.
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.RegexStringValidator.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.RegexStringValidator.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("bfa722b6-1963-4535-a9d1-02c33c4fd511")]
	public sealed partial class RegexStringValidator : PropertyValidator
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RegexStringValidator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbfa722b6, 0x1963, 0x4535, 0xa9, 0xd1, 0x02, 0xc3, 0x3c, 0x4f, 0xd5, 0x11);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RegexStringValidator(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RegexStringValidator(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RegularExpression domain property code
		
		/// <summary>
		/// RegularExpression domain property Id.
		/// </summary>
		public static readonly global::System.Guid RegularExpressionDomainPropertyId = new global::System.Guid(0x6d94df04, 0x4a7d, 0x4292, 0xac, 0xd4, 0x23, 0xf5, 0x36, 0x9c, 0xbc, 0x65);
		
		/// <summary>
		/// Storage for RegularExpression
		/// </summary>
		private global::System.String regularExpressionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RegularExpression domain property.
		/// The regular expression used to filter the string assigned to the decorated
		/// configuration-element property.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.RegexStringValidator/RegularExpression.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.RegexStringValidator/RegularExpression.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.RegexStringValidator/RegularExpression.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6d94df04-4a7d-4292-acd4-23f5369cbc65")]
		public global::System.String RegularExpression
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return regularExpressionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RegularExpressionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RegexStringValidator.RegularExpression domain property.
		/// </summary>
		internal sealed partial class RegularExpressionPropertyHandler : DslModeling::DomainPropertyValueHandler<RegexStringValidator, global::System.String>
		{
			private RegularExpressionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RegexStringValidator.RegularExpression domain property value handler.
			/// </summary>
			public static readonly RegularExpressionPropertyHandler Instance = new RegularExpressionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RegexStringValidator.RegularExpression domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RegularExpressionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(RegexStringValidator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.regularExpressionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RegexStringValidator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.regularExpressionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass StringValidator
	/// Validates properties of String type.
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.StringValidator.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.StringValidator.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("891b7058-07cd-44fb-827f-259fd8877933")]
	public sealed partial class StringValidator : PropertyValidator
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// StringValidator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x891b7058, 0x07cd, 0x44fb, 0x82, 0x7f, 0x25, 0x9f, 0xd8, 0x87, 0x79, 0x33);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StringValidator(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StringValidator(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region InvalidCharacters domain property code
		
		/// <summary>
		/// InvalidCharacters domain property Id.
		/// </summary>
		public static readonly global::System.Guid InvalidCharactersDomainPropertyId = new global::System.Guid(0xaf99c1e9, 0x1235, 0x4ff5, 0xa0, 0x56, 0x31, 0x69, 0xb5, 0xbb, 0xbd, 0x49);
		
		/// <summary>
		/// Storage for InvalidCharacters
		/// </summary>
		private global::System.String invalidCharactersPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of InvalidCharacters domain property.
		/// The set of characters that are not allowed for the property.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.StringValidator/InvalidCharacters.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.StringValidator/InvalidCharacters.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.StringValidator/InvalidCharacters.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("af99c1e9-1235-4ff5-a056-3169b5bbbd49")]
		public global::System.String InvalidCharacters
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return invalidCharactersPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InvalidCharactersPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StringValidator.InvalidCharacters domain property.
		/// </summary>
		internal sealed partial class InvalidCharactersPropertyHandler : DslModeling::DomainPropertyValueHandler<StringValidator, global::System.String>
		{
			private InvalidCharactersPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StringValidator.InvalidCharacters domain property value handler.
			/// </summary>
			public static readonly InvalidCharactersPropertyHandler Instance = new InvalidCharactersPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StringValidator.InvalidCharacters domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InvalidCharactersDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StringValidator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.invalidCharactersPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StringValidator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.invalidCharactersPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MaxLength domain property code
		
		/// <summary>
		/// MaxLength domain property Id.
		/// </summary>
		public static readonly global::System.Guid MaxLengthDomainPropertyId = new global::System.Guid(0x181ee7ea, 0x03c5, 0x40c2, 0x91, 0x44, 0x1d, 0xf6, 0x57, 0xfc, 0xf8, 0xb0);
		
		/// <summary>
		/// Storage for MaxLength
		/// </summary>
		private global::System.Int32 maxLengthPropertyStorage = 2147483647;
		
		/// <summary>
		/// Gets or sets the value of MaxLength domain property.
		/// The maximum length allowed for the string to assign to the property.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.StringValidator/MaxLength.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.StringValidator/MaxLength.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.StringValidator/MaxLength.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(2147483647)]
		[DslModeling::DomainObjectId("181ee7ea-03c5-40c2-9144-1df657fcf8b0")]
		public global::System.Int32 MaxLength
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return maxLengthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MaxLengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StringValidator.MaxLength domain property.
		/// </summary>
		internal sealed partial class MaxLengthPropertyHandler : DslModeling::DomainPropertyValueHandler<StringValidator, global::System.Int32>
		{
			private MaxLengthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StringValidator.MaxLength domain property value handler.
			/// </summary>
			public static readonly MaxLengthPropertyHandler Instance = new MaxLengthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StringValidator.MaxLength domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MaxLengthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(StringValidator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.maxLengthPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StringValidator element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.maxLengthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MinLength domain property code
		
		/// <summary>
		/// MinLength domain property Id.
		/// </summary>
		public static readonly global::System.Guid MinLengthDomainPropertyId = new global::System.Guid(0xbe010dfa, 0xe04c, 0x41d5, 0x95, 0x7e, 0x60, 0x35, 0xd8, 0x49, 0x69, 0x31);
		
		/// <summary>
		/// Storage for MinLength
		/// </summary>
		private global::System.Int32 minLengthPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of MinLength domain property.
		/// The minimum allowed value for the string to assign to the property.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.StringValidator/MinLength.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.StringValidator/MinLength.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.StringValidator/MinLength.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("be010dfa-e04c-41d5-957e-6035d8496931")]
		public global::System.Int32 MinLength
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return minLengthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MinLengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StringValidator.MinLength domain property.
		/// </summary>
		internal sealed partial class MinLengthPropertyHandler : DslModeling::DomainPropertyValueHandler<StringValidator, global::System.Int32>
		{
			private MinLengthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StringValidator.MinLength domain property value handler.
			/// </summary>
			public static readonly MinLengthPropertyHandler Instance = new MinLengthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StringValidator.MinLength domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MinLengthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(StringValidator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.minLengthPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StringValidator element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.minLengthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass CustomTypeConverter
	/// Description for ConfigurationSectionDesigner.CustomTypeConverter
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.CustomTypeConverter.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.CustomTypeConverter.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("cdff1d9b-f69c-4481-861a-5e8be81add1e")]
	public partial class CustomTypeConverter : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CustomTypeConverter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcdff1d9b, 0xf69c, 0x4481, 0x86, 0x1a, 0x5e, 0x8b, 0xe8, 0x1a, 0xdd, 0x1e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CustomTypeConverter(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CustomTypeConverter(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xf7f5f949, 0xfbca, 0x4404, 0xac, 0x9f, 0xd1, 0x3a, 0x25, 0x3f, 0x70, 0x60);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the custom converter
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.CustomTypeConverter/Name.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.CustomTypeConverter/Name.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("f7f5f949-fbca-4404-ac9f-d13a253f7060")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CustomTypeConverter.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<CustomTypeConverter, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CustomTypeConverter.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CustomTypeConverter.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CustomTypeConverter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CustomTypeConverter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Documentation domain property code
		
		/// <summary>
		/// Documentation domain property Id.
		/// </summary>
		public static readonly global::System.Guid DocumentationDomainPropertyId = new global::System.Guid(0x1d21954a, 0xf4b2, 0x41d0, 0xa8, 0xaa, 0x25, 0x38, 0x15, 0x9d, 0xeb, 0x56);
		
		/// <summary>
		/// Storage for Documentation
		/// </summary>
		private global::System.String documentationPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Documentation domain property.
		/// Provides documentation notes on this custom converter.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.CustomTypeConverter/Documentation.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.CustomTypeConverter/Documentation.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.CustomTypeConverter/Documentation.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1d21954a-f4b2-41d0-a8aa-2538159deb56")]
		public global::System.String Documentation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return documentationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DocumentationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CustomTypeConverter.Documentation domain property.
		/// </summary>
		internal sealed partial class DocumentationPropertyHandler : DslModeling::DomainPropertyValueHandler<CustomTypeConverter, global::System.String>
		{
			private DocumentationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CustomTypeConverter.Documentation domain property value handler.
			/// </summary>
			public static readonly DocumentationPropertyHandler Instance = new DocumentationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CustomTypeConverter.Documentation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DocumentationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CustomTypeConverter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.documentationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CustomTypeConverter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.documentationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ConfigurationSectionModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ConfigurationSectionModel.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters.CustomTypeConverter
		/// </summary>
		public virtual ConfigurationSectionModel ConfigurationSectionModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters.CustomTypeConverterDomainRoleId) as ConfigurationSectionModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters.CustomTypeConverterDomainRoleId, value);
			}
		}
		#endregion
		#region ConfigurationProperties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ConfigurationProperties.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter.CustomTypeConverter
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConfigurationProperty> ConfigurationProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ConfigurationProperty>, ConfigurationProperty>(global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter.CustomTypeConverterDomainRoleId);
			}
		}
		#endregion
		#region Type opposite domain role accessor
		/// <summary>
		/// Gets or sets Type.
		/// The type this converter converts to and from
		/// </summary>
		public virtual TypeBase Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.CustomTypeConverterHasType.CustomTypeConverterDomainRoleId) as TypeBase;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.CustomTypeConverterHasType.CustomTypeConverterDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass TypeBase
	/// Description for ConfigurationSectionDesigner.TypeBase
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.TypeBase.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.TypeBase.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("d0cc5f43-1fd5-4f30-a187-3579f1d5e1f2")]
	public abstract partial class TypeBase : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TypeBase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd0cc5f43, 0x1fd5, 0x4f30, 0xa1, 0x87, 0x35, 0x79, 0xf1, 0xd5, 0xe1, 0xf2);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected TypeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x46f85fa9, 0xc1e4, 0x4c99, 0xa5, 0xd2, 0xa1, 0x63, 0xc9, 0x0d, 0x92, 0xf5);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the type
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.TypeBase/Name.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.TypeBase/Name.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.TypeBase/Name.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("46f85fa9-c1e4-4c99-a5d2-a163c90d92f5")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TypeBase.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<TypeBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TypeBase.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TypeBase.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TypeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TypeBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0x31f9cdbb, 0x80b7, 0x45f4, 0xbb, 0xfc, 0x5a, 0x65, 0x8c, 0xd8, 0x13, 0x74);
		
		/// <summary>
		/// Storage for Namespace
		/// </summary>
		private global::System.String namespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// The namespace of this type.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.TypeBase/Namespace.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.TypeBase/Namespace.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.TypeBase/Namespace.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("31f9cdbb-80b7-45f4-bbfc-5a658cd81374")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TypeBase.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<TypeBase, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TypeBase.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TypeBase.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TypeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TypeBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReferringCustomTypeConverters opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ReferringCustomTypeConverters.
		/// Description for ConfigurationSectionDesigner.CustomTypeConverterHasType.TypeBase
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CustomTypeConverter> ReferringCustomTypeConverters
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CustomTypeConverter>, CustomTypeConverter>(global::ConfigurationSectionDesigner.CustomTypeConverterHasType.TypeBaseDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass Attribute
	/// Represents an attribute.
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.Attribute.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.Attribute.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("aec58765-d7d4-469e-a827-af42c6bedc58")]
	public partial class Attribute : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Attribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaec58765, 0xd7d4, 0x469e, 0xa8, 0x27, 0xaf, 0x42, 0xc6, 0xbe, 0xdc, 0x58);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Attribute(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Attribute(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x128e700e, 0x48fe, 0x459a, 0x95, 0xe2, 0x70, 0x35, 0x89, 0x99, 0x98, 0xe7);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the attribute. This should be a Fully Qualified Name.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.Attribute/Name.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.Attribute/Name.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("128e700e-48fe-459a-95e2-7035899998e7")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Attribute.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Attribute, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Attribute.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Attribute.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Attribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Attribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Parameters opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Parameters.
		/// The list of parameters for this attribute.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AttributeParameter> Parameters
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<AttributeParameter>, AttributeParameter>(global::ConfigurationSectionDesigner.AttributeHasParameters.AttributeDomainRoleId);
			}
		}
		#endregion
		#region ConfigurationProperty opposite domain role accessor
		/// <summary>
		/// Gets or sets ConfigurationProperty.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes.Attribute
		/// </summary>
		public virtual ConfigurationProperty ConfigurationProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes.AttributeDomainRoleId) as ConfigurationProperty;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes.AttributeDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ConfigurationSectionDesigner.AttributeParameter.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::ConfigurationSectionDesigner.AttributeParameter sourceAttributeParameter1 = sourceElement as global::ConfigurationSectionDesigner.AttributeParameter;
			if (sourceAttributeParameter1 != null)
			{
				// Create link for path AttributeHasParameters.Parameters
				this.Parameters.Add(sourceAttributeParameter1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::ConfigurationSectionDesigner.AttributeParameter sourceAttributeParameter1 = sourceElement as global::ConfigurationSectionDesigner.AttributeParameter;
			if (sourceAttributeParameter1 != null)
			{
				// Delete link for path AttributeHasParameters.Parameters
				
				foreach (DslModeling::ElementLink link in global::ConfigurationSectionDesigner.AttributeHasParameters.GetLinks((global::ConfigurationSectionDesigner.Attribute)this, sourceAttributeParameter1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::ConfigurationSectionDesigner.AttributeHasParameters.AttributeDomainRoleId, global::ConfigurationSectionDesigner.AttributeHasParameters.AttributeParameterDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass AttributeParameter
	/// Description for ConfigurationSectionDesigner.AttributeParameter
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.AttributeParameter.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.AttributeParameter.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("53b3f479-ace4-439a-bb57-bb23906813e6")]
	public partial class AttributeParameter : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AttributeParameter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x53b3f479, 0xace4, 0x439a, 0xbb, 0x57, 0xbb, 0x23, 0x90, 0x68, 0x13, 0xe6);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AttributeParameter(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AttributeParameter(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x539879e8, 0xd7b5, 0x4367, 0xa3, 0x82, 0xdc, 0xa5, 0x3e, 0x9d, 0xf0, 0x73);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of a name attribute parameter. Set to empty string if the parameter is
		/// not named.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.AttributeParameter/Name.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.AttributeParameter/Name.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("539879e8-d7b5-4367-a382-dca53e9df073")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AttributeParameter.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<AttributeParameter, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AttributeParameter.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AttributeParameter.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AttributeParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AttributeParameter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Value domain property code
		
		/// <summary>
		/// Value domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueDomainPropertyId = new global::System.Guid(0xe9e3420c, 0xa13a, 0x4104, 0x85, 0x5b, 0x8a, 0xd5, 0x7a, 0x13, 0x1c, 0x44);
		
		/// <summary>
		/// Storage for Value
		/// </summary>
		private global::System.String valuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Value domain property.
		/// The value of the parameter.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.AttributeParameter/Value.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.AttributeParameter/Value.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e9e3420c-a13a-4104-855b-8ad57a131c44")]
		public global::System.String Value
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return valuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AttributeParameter.Value domain property.
		/// </summary>
		internal sealed partial class ValuePropertyHandler : DslModeling::DomainPropertyValueHandler<AttributeParameter, global::System.String>
		{
			private ValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AttributeParameter.Value domain property value handler.
			/// </summary>
			public static readonly ValuePropertyHandler Instance = new ValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AttributeParameter.Value domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AttributeParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.valuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AttributeParameter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.valuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Attribute opposite domain role accessor
		/// <summary>
		/// Gets or sets Attribute.
		/// Description for
		/// ConfigurationSectionDesigner.AttributeHasParameters.AttributeParameter
		/// </summary>
		public virtual Attribute Attribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.AttributeHasParameters.AttributeParameterDomainRoleId) as Attribute;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.AttributeHasParameters.AttributeParameterDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainClass Comment
	/// Diagram comment box. Will not affect resulting configuration code.
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.Comment.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.Comment.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3bf59c64-04a1-41f3-b6f8-741efaae6649")]
	public partial class Comment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Comment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3bf59c64, 0x04a1, 0x41f3, 0xb6, 0xf8, 0x74, 0x1e, 0xfa, 0xae, 0x66, 0x49);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x701e762d, 0x188d, 0x4acd, 0xa2, 0x64, 0xa4, 0xd3, 0x4f, 0x59, 0xeb, 0x17);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Comment text.
		/// </summary>
		[System.ComponentModel.Editor(typeof( System.ComponentModel.Design.MultilineStringEditor ), typeof( System.Drawing.Design.UITypeEditor ))]
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.Comment/Text.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.Comment/Text.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("701e762d-188d-4acd-a264-a4d34f59eb17")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Comment.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Comment, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Comment.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Comment.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Comment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Comment element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ConfigurationSectionModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ConfigurationSectionModel.
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionModelHasComments.Comment
		/// </summary>
		public virtual ConfigurationSectionModel ConfigurationSectionModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments.CommentDomainRoleId) as ConfigurationSectionModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments.CommentDomainRoleId, value);
			}
		}
		#endregion
		#region Subjects opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<BaseConfigurationType> Subjects
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<BaseConfigurationType>, BaseConfigurationType>(global::ConfigurationSectionDesigner.CommentsReferenceConfigurationItems.CommentDomainRoleId);
			}
		}
		#endregion
	}
}
