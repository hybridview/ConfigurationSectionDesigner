//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslValidation = global::Microsoft.VisualStudio.Modeling.Validation;
namespace ConfigurationSectionDesigner
{
	[DslValidation::ValidationState(DslValidation::ValidationState.Enabled)]
	public partial class AttributeProperty
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Generated code.")]
		[DslValidation::ValidationMethod(DslValidation::ValidationCategories.Open | DslValidation::ValidationCategories.Save | DslValidation::ValidationCategories.Menu)]
		private void ValidateAttributePropertyMultiplicity (DslValidation::ValidationContext context)
		{
			if (this.Type == null)
			{
				context.LogViolation(DslValidation::ViolationType.Error,
					string.Format(global::System.Globalization.CultureInfo.CurrentCulture, 
						ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel.SingletonResourceManager.GetString("MinimumMultiplicityMissingLink"), 
						"AttributeProperty", this.Name, "Type"),
						"DSL0001", this);
			}
		} // ValidateAttributePropertyMultiplicity
	} // class AttributeProperty
} // ConfigurationSectionDesigner

namespace ConfigurationSectionDesigner
{
	[DslValidation::ValidationState(DslValidation::ValidationState.Enabled)]
	public partial class ConfigurationElementCollection
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Generated code.")]
		[DslValidation::ValidationMethod(DslValidation::ValidationCategories.Open | DslValidation::ValidationCategories.Save | DslValidation::ValidationCategories.Menu)]
		private void ValidateConfigurationElementCollectionMultiplicity (DslValidation::ValidationContext context)
		{
			if (this.ItemType == null)
			{
				context.LogViolation(DslValidation::ViolationType.Error,
					string.Format(global::System.Globalization.CultureInfo.CurrentCulture, 
						ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel.SingletonResourceManager.GetString("MinimumMultiplicityMissingLink"), 
						"ConfigurationElementCollection", this.Name, "ItemType"),
						"DSL0001", this);
			}
		} // ValidateConfigurationElementCollectionMultiplicity
	} // class ConfigurationElementCollection
} // ConfigurationSectionDesigner

namespace ConfigurationSectionDesigner
{
	[DslValidation::ValidationState(DslValidation::ValidationState.Enabled)]
	public partial class ElementProperty
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Generated code.")]
		[DslValidation::ValidationMethod(DslValidation::ValidationCategories.Open | DslValidation::ValidationCategories.Save | DslValidation::ValidationCategories.Menu)]
		private void ValidateElementPropertyMultiplicity (DslValidation::ValidationContext context)
		{
			if (this.Type == null)
			{
				context.LogViolation(DslValidation::ViolationType.Error,
					string.Format(global::System.Globalization.CultureInfo.CurrentCulture, 
						ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel.SingletonResourceManager.GetString("MinimumMultiplicityMissingLink"), 
						"ElementProperty", this.Name, "Type"),
						"DSL0001", this);
			}
		} // ValidateElementPropertyMultiplicity
	} // class ElementProperty
} // ConfigurationSectionDesigner

namespace ConfigurationSectionDesigner
{
	[DslValidation::ValidationState(DslValidation::ValidationState.Enabled)]
	public partial class ConfigurationSectionProperty
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Generated code.")]
		[DslValidation::ValidationMethod(DslValidation::ValidationCategories.Open | DslValidation::ValidationCategories.Save | DslValidation::ValidationCategories.Menu)]
		private void ValidateConfigurationSectionPropertyMultiplicity (DslValidation::ValidationContext context)
		{
			if (this.ContainedConfigurationSection == null)
			{
				context.LogViolation(DslValidation::ViolationType.Error,
					string.Format(global::System.Globalization.CultureInfo.CurrentCulture, 
						ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel.SingletonResourceManager.GetString("MinimumMultiplicityMissingLink"), 
						"ConfigurationSectionProperty", "", "ContainedConfigurationSection"),
						"DSL0001", this);
			}
		} // ValidateConfigurationSectionPropertyMultiplicity
	} // class ConfigurationSectionProperty
} // ConfigurationSectionDesigner

namespace ConfigurationSectionDesigner
{
	[DslValidation::ValidationState(DslValidation::ValidationState.Enabled)]
	public partial class ConfigurationSectionGroupProperty
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Generated code.")]
		[DslValidation::ValidationMethod(DslValidation::ValidationCategories.Open | DslValidation::ValidationCategories.Save | DslValidation::ValidationCategories.Menu)]
		private void ValidateConfigurationSectionGroupPropertyMultiplicity (DslValidation::ValidationContext context)
		{
			if (this.ContainedConfigurationSectionGroup == null)
			{
				context.LogViolation(DslValidation::ViolationType.Error,
					string.Format(global::System.Globalization.CultureInfo.CurrentCulture, 
						ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel.SingletonResourceManager.GetString("MinimumMultiplicityMissingLink"), 
						"ConfigurationSectionGroupProperty", "", "ContainedConfigurationSectionGroup"),
						"DSL0001", this);
			}
		} // ValidateConfigurationSectionGroupPropertyMultiplicity
	} // class ConfigurationSectionGroupProperty
} // ConfigurationSectionDesigner

namespace ConfigurationSectionDesigner
{
	[DslValidation::ValidationState(DslValidation::ValidationState.Enabled)]
	public partial class CustomTypeConverter
	{
		/// <summary>
		/// Checks that the relationships that have a multiplicity of One or OneMany do actually have a link.
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Generated code.")]
		[DslValidation::ValidationMethod(DslValidation::ValidationCategories.Open | DslValidation::ValidationCategories.Save | DslValidation::ValidationCategories.Menu)]
		private void ValidateCustomTypeConverterMultiplicity (DslValidation::ValidationContext context)
		{
			if (this.Type == null)
			{
				context.LogViolation(DslValidation::ViolationType.Error,
					string.Format(global::System.Globalization.CultureInfo.CurrentCulture, 
						ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel.SingletonResourceManager.GetString("MinimumMultiplicityMissingLink"), 
						"CustomTypeConverter", this.Name, "Type"),
						"DSL0001", this);
			}
		} // ValidateCustomTypeConverterMultiplicity
	} // class CustomTypeConverter
} // ConfigurationSectionDesigner

	
 