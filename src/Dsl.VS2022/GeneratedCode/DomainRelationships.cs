//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship ConfigurationElementHasAttributeProperties
	/// Description for
	/// ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("5770271a-b8f0-4768-9598-e0025796fa76")]
	public partial class ConfigurationElementHasAttributeProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConfigurationElementHasAttributeProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5770271a, 0xb8f0, 0x4768, 0x95, 0x98, 0xe0, 0x02, 0x57, 0x96, 0xfa, 0x76);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConfigurationElementHasAttributeProperties link in the same Partition as the given ConfigurationElement
		/// </summary>
		/// <param name="source">ConfigurationElement to use as the source of the relationship.</param>
		/// <param name="target">AttributeProperty to use as the target of the relationship.</param>
		public ConfigurationElementHasAttributeProperties(ConfigurationElement source, AttributeProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConfigurationElementHasAttributeProperties.ConfigurationElementDomainRoleId, source), new DslModeling::RoleAssignment(ConfigurationElementHasAttributeProperties.AttributePropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationElementHasAttributeProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationElementHasAttributeProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationElementHasAttributeProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationElementHasAttributeProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConfigurationElement domain role code
		
		/// <summary>
		/// ConfigurationElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationElementDomainRoleId = new global::System.Guid(0xd531d4e7, 0x5eef, 0x4bd6, 0xa9, 0x89, 0x37, 0xda, 0x3a, 0xa0, 0xef, 0x57);
		
		/// <summary>
		/// DomainRole ConfigurationElement
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties.ConfigurationElement
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties/ConfigurationElement.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties/ConfigurationElement.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AttributeProperties", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties/ConfigurationElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d531d4e7-5eef-4bd6-a989-37da3aa0ef57")]
		public virtual ConfigurationElement ConfigurationElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConfigurationElement of a AttributeProperty
		/// <summary>
		/// Gets ConfigurationElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConfigurationElement GetConfigurationElement(AttributeProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributePropertyDomainRoleId) as ConfigurationElement;
		}
		
		/// <summary>
		/// Sets ConfigurationElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConfigurationElement(AttributeProperty element, ConfigurationElement newConfigurationElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributePropertyDomainRoleId, newConfigurationElement);
		}
		#endregion
		#region AttributeProperty domain role code
		
		/// <summary>
		/// AttributeProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributePropertyDomainRoleId = new global::System.Guid(0xe0a7c246, 0x6b21, 0x47e4, 0xb5, 0x37, 0xa2, 0x3b, 0xfe, 0xf8, 0x64, 0x01);
		
		/// <summary>
		/// DomainRole AttributeProperty
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties.AttributeProperty
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties/AttributeProperty.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties/AttributeProperty.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConfigurationElement", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties/AttributeProperty.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e0a7c246-6b21-47e4-b537-a23bfef86401")]
		public virtual AttributeProperty AttributeProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AttributeProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributePropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributePropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AttributeProperties of a ConfigurationElement
		/// <summary>
		/// Gets a list of AttributeProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AttributeProperty> GetAttributeProperties(ConfigurationElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AttributeProperty>, AttributeProperty>(element, ConfigurationElementDomainRoleId);
		}
		#endregion
		#region ConfigurationElement link accessor
		/// <summary>
		/// Get the list of ConfigurationElementHasAttributeProperties links to a ConfigurationElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties> GetLinksToAttributeProperties ( global::ConfigurationSectionDesigner.ConfigurationElement configurationElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties>(configurationElementInstance, global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties.ConfigurationElementDomainRoleId);
		}
		#endregion
		#region AttributeProperty link accessor
		/// <summary>
		/// Get the ConfigurationElementHasAttributeProperties link to a AttributeProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties GetLinkToConfigurationElement (global::ConfigurationSectionDesigner.AttributeProperty attributePropertyInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties>(attributePropertyInstance, global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties.AttributePropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AttributeProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConfigurationElementHasAttributeProperties instance accessors
		
		/// <summary>
		/// Get any ConfigurationElementHasAttributeProperties links between a given ConfigurationElement and a AttributeProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties> GetLinks( global::ConfigurationSectionDesigner.ConfigurationElement source, global::ConfigurationSectionDesigner.AttributeProperty target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties>(source, global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties.ConfigurationElementDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties link in links )
			{
				if ( target.Equals(link.AttributeProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConfigurationElementHasAttributeProperties link between a given ConfigurationElementand a AttributeProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties GetLink( global::ConfigurationSectionDesigner.ConfigurationElement source, global::ConfigurationSectionDesigner.AttributeProperty target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties>(source, global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties.ConfigurationElementDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationElementHasAttributeProperties link in links )
			{
				if ( target.Equals(link.AttributeProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship ConfigurationElementCollectionHasItemType
	/// Description for
	/// ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c2b30fd0-a8b8-4b9f-abe5-fd8447c1f53e")]
	public partial class ConfigurationElementCollectionHasItemType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConfigurationElementCollectionHasItemType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc2b30fd0, 0xa8b8, 0x4b9f, 0xab, 0xe5, 0xfd, 0x84, 0x47, 0xc1, 0xf5, 0x3e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConfigurationElementCollectionHasItemType link in the same Partition as the given ConfigurationElementCollection
		/// </summary>
		/// <param name="source">ConfigurationElementCollection to use as the source of the relationship.</param>
		/// <param name="target">ConfigurationElement to use as the target of the relationship.</param>
		public ConfigurationElementCollectionHasItemType(ConfigurationElementCollection source, ConfigurationElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConfigurationElementCollectionHasItemType.ConfigurationElementCollectionDomainRoleId, source), new DslModeling::RoleAssignment(ConfigurationElementCollectionHasItemType.ConfigurationElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationElementCollectionHasItemType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationElementCollectionHasItemType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationElementCollectionHasItemType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationElementCollectionHasItemType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConfigurationElementCollection domain role code
		
		/// <summary>
		/// ConfigurationElementCollection domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationElementCollectionDomainRoleId = new global::System.Guid(0xfb43fdc5, 0xb8e3, 0x4638, 0x95, 0xc8, 0x94, 0xf4, 0x93, 0x2b, 0xef, 0x14);
		
		/// <summary>
		/// DomainRole ConfigurationElementCollection
		/// The type of the items in this collection.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType/ConfigurationElementCollection.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType/ConfigurationElementCollection.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType/ConfigurationElementCollection.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ItemType", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType/ConfigurationElementCollection.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("fb43fdc5-b8e3-4638-95c8-94f4932bef14")]
		public virtual ConfigurationElementCollection ConfigurationElementCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationElementCollection)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationElementCollectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationElementCollectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferringConfigurationElementCollections of a ConfigurationElement
		/// <summary>
		/// Gets a list of ReferringConfigurationElementCollections.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConfigurationElementCollection> GetReferringConfigurationElementCollections(ConfigurationElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ConfigurationElementCollection>, ConfigurationElementCollection>(element, ConfigurationElementDomainRoleId);
		}
		#endregion
		#region ConfigurationElement domain role code
		
		/// <summary>
		/// ConfigurationElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationElementDomainRoleId = new global::System.Guid(0xc3883765, 0x4155, 0x41e5, 0x81, 0x18, 0x7b, 0x5a, 0x79, 0x08, 0x9c, 0x3e);
		
		/// <summary>
		/// DomainRole ConfigurationElement
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType.ConfigurationElement
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType/ConfigurationElement.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType/ConfigurationElement.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReferringConfigurationElementCollections", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType/ConfigurationElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c3883765-4155-41e5-8118-7b5a79089c3e")]
		public virtual ConfigurationElement ConfigurationElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ItemType of a ConfigurationElementCollection
		/// <summary>
		/// Gets ItemType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConfigurationElement GetItemType(ConfigurationElementCollection element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConfigurationElementCollectionDomainRoleId) as ConfigurationElement;
		}
		
		/// <summary>
		/// Sets ItemType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetItemType(ConfigurationElementCollection element, ConfigurationElement newConfigurationElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConfigurationElementCollectionDomainRoleId, newConfigurationElement);
		}
		#endregion
		#region ConfigurationElementCollection link accessor
		/// <summary>
		/// Get the ConfigurationElementCollectionHasItemType link to a ConfigurationElementCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType GetLinkToItemType (global::ConfigurationSectionDesigner.ConfigurationElementCollection configurationElementCollectionInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType>(configurationElementCollectionInstance, global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType.ConfigurationElementCollectionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConfigurationElementCollection not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConfigurationElement link accessor
		/// <summary>
		/// Get the list of ConfigurationElementCollectionHasItemType links to a ConfigurationElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType> GetLinksToReferringConfigurationElementCollections ( global::ConfigurationSectionDesigner.ConfigurationElement configurationElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType>(configurationElementInstance, global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType.ConfigurationElementDomainRoleId);
		}
		#endregion
		#region ConfigurationElementCollectionHasItemType instance accessors
		
		/// <summary>
		/// Get any ConfigurationElementCollectionHasItemType links between a given ConfigurationElementCollection and a ConfigurationElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType> GetLinks( global::ConfigurationSectionDesigner.ConfigurationElementCollection source, global::ConfigurationSectionDesigner.ConfigurationElement target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType>(source, global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType.ConfigurationElementCollectionDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType link in links )
			{
				if ( target.Equals(link.ConfigurationElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConfigurationElementCollectionHasItemType link between a given ConfigurationElementCollectionand a ConfigurationElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType GetLink( global::ConfigurationSectionDesigner.ConfigurationElementCollection source, global::ConfigurationSectionDesigner.ConfigurationElement target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType>(source, global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType.ConfigurationElementCollectionDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationElementCollectionHasItemType link in links )
			{
				if ( target.Equals(link.ConfigurationElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship ConfigurationElementHasElementProperties
	/// Description for
	/// ConfigurationSectionDesigner.ConfigurationElementHasElementProperties
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElementHasElementProperties.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElementHasElementProperties.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("12ffa767-778b-486d-a9a6-10d49f2fa642")]
	public partial class ConfigurationElementHasElementProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConfigurationElementHasElementProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x12ffa767, 0x778b, 0x486d, 0xa9, 0xa6, 0x10, 0xd4, 0x9f, 0x2f, 0xa6, 0x42);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConfigurationElementHasElementProperties link in the same Partition as the given ConfigurationElement
		/// </summary>
		/// <param name="source">ConfigurationElement to use as the source of the relationship.</param>
		/// <param name="target">ElementProperty to use as the target of the relationship.</param>
		public ConfigurationElementHasElementProperties(ConfigurationElement source, ElementProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConfigurationElementHasElementProperties.ConfigurationElementDomainRoleId, source), new DslModeling::RoleAssignment(ConfigurationElementHasElementProperties.ElementPropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationElementHasElementProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationElementHasElementProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationElementHasElementProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationElementHasElementProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConfigurationElement domain role code
		
		/// <summary>
		/// ConfigurationElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationElementDomainRoleId = new global::System.Guid(0xdd6504ef, 0x77ca, 0x4e58, 0x80, 0xcd, 0x35, 0xce, 0x12, 0x45, 0xbc, 0xfd);
		
		/// <summary>
		/// DomainRole ConfigurationElement
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationElementHasElementProperties.ConfigurationElement
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElementHasElementProperties/ConfigurationElement.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElementHasElementProperties/ConfigurationElement.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ElementProperties", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationElementHasElementProperties/ConfigurationElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dd6504ef-77ca-4e58-80cd-35ce1245bcfd")]
		public virtual ConfigurationElement ConfigurationElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConfigurationElement of a ElementProperty
		/// <summary>
		/// Gets ConfigurationElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConfigurationElement GetConfigurationElement(ElementProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementPropertyDomainRoleId) as ConfigurationElement;
		}
		
		/// <summary>
		/// Sets ConfigurationElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConfigurationElement(ElementProperty element, ConfigurationElement newConfigurationElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementPropertyDomainRoleId, newConfigurationElement);
		}
		#endregion
		#region ElementProperty domain role code
		
		/// <summary>
		/// ElementProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementPropertyDomainRoleId = new global::System.Guid(0xb31a7e8b, 0x3522, 0x45d9, 0x9f, 0x7c, 0x34, 0x6d, 0xba, 0xa5, 0x2f, 0x7f);
		
		/// <summary>
		/// DomainRole ElementProperty
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationElementHasElementProperties.ElementProperty
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationElementHasElementProperties/ElementProperty.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationElementHasElementProperties/ElementProperty.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConfigurationElement", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationElementHasElementProperties/ElementProperty.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b31a7e8b-3522-45d9-9f7c-346dbaa52f7f")]
		public virtual ElementProperty ElementProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ElementProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ElementProperties of a ConfigurationElement
		/// <summary>
		/// Gets a list of ElementProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ElementProperty> GetElementProperties(ConfigurationElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ElementProperty>, ElementProperty>(element, ConfigurationElementDomainRoleId);
		}
		#endregion
		#region ConfigurationElement link accessor
		/// <summary>
		/// Get the list of ConfigurationElementHasElementProperties links to a ConfigurationElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties> GetLinksToElementProperties ( global::ConfigurationSectionDesigner.ConfigurationElement configurationElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties>(configurationElementInstance, global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties.ConfigurationElementDomainRoleId);
		}
		#endregion
		#region ElementProperty link accessor
		/// <summary>
		/// Get the ConfigurationElementHasElementProperties link to a ElementProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties GetLinkToConfigurationElement (global::ConfigurationSectionDesigner.ElementProperty elementPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties>(elementPropertyInstance, global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties.ElementPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ElementProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConfigurationElementHasElementProperties instance accessors
		
		/// <summary>
		/// Get any ConfigurationElementHasElementProperties links between a given ConfigurationElement and a ElementProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties> GetLinks( global::ConfigurationSectionDesigner.ConfigurationElement source, global::ConfigurationSectionDesigner.ElementProperty target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties>(source, global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties.ConfigurationElementDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties link in links )
			{
				if ( target.Equals(link.ElementProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConfigurationElementHasElementProperties link between a given ConfigurationElementand a ElementProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties GetLink( global::ConfigurationSectionDesigner.ConfigurationElement source, global::ConfigurationSectionDesigner.ElementProperty target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties>(source, global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties.ConfigurationElementDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationElementHasElementProperties link in links )
			{
				if ( target.Equals(link.ElementProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship ElementPropertyHasType
	/// The type of this property.
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ElementPropertyHasType.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ElementPropertyHasType.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("817738b5-f315-4a74-9d4f-6ec5e726ddef")]
	public partial class ElementPropertyHasType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ElementPropertyHasType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x817738b5, 0xf315, 0x4a74, 0x9d, 0x4f, 0x6e, 0xc5, 0xe7, 0x26, 0xdd, 0xef);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ElementPropertyHasType link in the same Partition as the given ElementProperty
		/// </summary>
		/// <param name="source">ElementProperty to use as the source of the relationship.</param>
		/// <param name="target">ConfigurationElement to use as the target of the relationship.</param>
		public ElementPropertyHasType(ElementProperty source, ConfigurationElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ElementPropertyHasType.ElementPropertyDomainRoleId, source), new DslModeling::RoleAssignment(ElementPropertyHasType.ConfigurationElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementPropertyHasType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementPropertyHasType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementPropertyHasType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementPropertyHasType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ElementProperty domain role code
		
		/// <summary>
		/// ElementProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementPropertyDomainRoleId = new global::System.Guid(0x3627555c, 0xddc1, 0x4630, 0x9f, 0xe2, 0x6f, 0x8c, 0xbe, 0xba, 0xa3, 0x48);
		
		/// <summary>
		/// DomainRole ElementProperty
		/// The type of this property.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ElementPropertyHasType/ElementProperty.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ElementPropertyHasType/ElementProperty.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ElementPropertyHasType/ElementProperty.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Type", PropertyDisplayNameKey="ConfigurationSectionDesigner.ElementPropertyHasType/ElementProperty.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3627555c-ddc1-4630-9fe2-6f8cbebaa348")]
		public virtual ElementProperty ElementProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ElementProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferringElements of a ConfigurationElement
		/// <summary>
		/// Gets a list of ReferringElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ElementProperty> GetReferringElements(ConfigurationElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ElementProperty>, ElementProperty>(element, ConfigurationElementDomainRoleId);
		}
		#endregion
		#region ConfigurationElement domain role code
		
		/// <summary>
		/// ConfigurationElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationElementDomainRoleId = new global::System.Guid(0xddf49bab, 0xa5fb, 0x499f, 0x97, 0x99, 0x86, 0x51, 0xda, 0x65, 0x05, 0x92);
		
		/// <summary>
		/// DomainRole ConfigurationElement
		/// Description for
		/// ConfigurationSectionDesigner.ElementPropertyHasType.ConfigurationElement
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ElementPropertyHasType/ConfigurationElement.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ElementPropertyHasType/ConfigurationElement.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReferringElements", PropertyDisplayNameKey="ConfigurationSectionDesigner.ElementPropertyHasType/ConfigurationElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ddf49bab-a5fb-499f-9799-8651da650592")]
		public virtual ConfigurationElement ConfigurationElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Type of a ElementProperty
		/// <summary>
		/// Gets Type.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConfigurationElement GetType(ElementProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementPropertyDomainRoleId) as ConfigurationElement;
		}
		
		/// <summary>
		/// Sets Type.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetType(ElementProperty element, ConfigurationElement newConfigurationElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementPropertyDomainRoleId, newConfigurationElement);
		}
		#endregion
		#region ElementProperty link accessor
		/// <summary>
		/// Get the ElementPropertyHasType link to a ElementProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ElementPropertyHasType GetLinkToType (global::ConfigurationSectionDesigner.ElementProperty elementPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ElementPropertyHasType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ElementPropertyHasType>(elementPropertyInstance, global::ConfigurationSectionDesigner.ElementPropertyHasType.ElementPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ElementProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConfigurationElement link accessor
		/// <summary>
		/// Get the list of ElementPropertyHasType links to a ConfigurationElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ElementPropertyHasType> GetLinksToReferringElements ( global::ConfigurationSectionDesigner.ConfigurationElement configurationElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ElementPropertyHasType>(configurationElementInstance, global::ConfigurationSectionDesigner.ElementPropertyHasType.ConfigurationElementDomainRoleId);
		}
		#endregion
		#region ElementPropertyHasType instance accessors
		
		/// <summary>
		/// Get any ElementPropertyHasType links between a given ElementProperty and a ConfigurationElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ElementPropertyHasType> GetLinks( global::ConfigurationSectionDesigner.ElementProperty source, global::ConfigurationSectionDesigner.ConfigurationElement target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ElementPropertyHasType> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ElementPropertyHasType>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ElementPropertyHasType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ElementPropertyHasType>(source, global::ConfigurationSectionDesigner.ElementPropertyHasType.ElementPropertyDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ElementPropertyHasType link in links )
			{
				if ( target.Equals(link.ConfigurationElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ElementPropertyHasType link between a given ElementPropertyand a ConfigurationElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ElementPropertyHasType GetLink( global::ConfigurationSectionDesigner.ElementProperty source, global::ConfigurationSectionDesigner.ConfigurationElement target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ElementPropertyHasType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ElementPropertyHasType>(source, global::ConfigurationSectionDesigner.ElementPropertyHasType.ElementPropertyDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ElementPropertyHasType link in links )
			{
				if ( target.Equals(link.ConfigurationElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship AttributePropertyHasPropertyType
	/// The type of this property.
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.AttributePropertyHasPropertyType.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.AttributePropertyHasPropertyType.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("44edd3cb-a478-45de-84e8-57433006cb3f")]
	public partial class AttributePropertyHasPropertyType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AttributePropertyHasPropertyType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x44edd3cb, 0xa478, 0x45de, 0x84, 0xe8, 0x57, 0x43, 0x30, 0x06, 0xcb, 0x3f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AttributePropertyHasPropertyType link in the same Partition as the given AttributeProperty
		/// </summary>
		/// <param name="source">AttributeProperty to use as the source of the relationship.</param>
		/// <param name="target">TypeDefinition to use as the target of the relationship.</param>
		public AttributePropertyHasPropertyType(AttributeProperty source, TypeDefinition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AttributePropertyHasPropertyType.AttributePropertyDomainRoleId, source), new DslModeling::RoleAssignment(AttributePropertyHasPropertyType.TypeDefinitionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AttributePropertyHasPropertyType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AttributePropertyHasPropertyType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AttributePropertyHasPropertyType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AttributePropertyHasPropertyType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AttributeProperty domain role code
		
		/// <summary>
		/// AttributeProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributePropertyDomainRoleId = new global::System.Guid(0x7d16d8ac, 0x4ce5, 0x4865, 0x88, 0x8a, 0xee, 0x53, 0x0b, 0x21, 0x68, 0x4a);
		
		/// <summary>
		/// DomainRole AttributeProperty
		/// The type of this property.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.AttributePropertyHasPropertyType/AttributeProperty.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.AttributePropertyHasPropertyType/AttributeProperty.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.AttributePropertyHasPropertyType/AttributeProperty.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Type", PropertyDisplayNameKey="ConfigurationSectionDesigner.AttributePropertyHasPropertyType/AttributeProperty.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7d16d8ac-4ce5-4865-888a-ee530b21684a")]
		public virtual AttributeProperty AttributeProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AttributeProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributePropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributePropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferringAttributes of a TypeDefinition
		/// <summary>
		/// Gets a list of ReferringAttributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AttributeProperty> GetReferringAttributes(TypeDefinition element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AttributeProperty>, AttributeProperty>(element, TypeDefinitionDomainRoleId);
		}
		#endregion
		#region TypeDefinition domain role code
		
		/// <summary>
		/// TypeDefinition domain role Id.
		/// </summary>
		public static readonly global::System.Guid TypeDefinitionDomainRoleId = new global::System.Guid(0xbb3050bf, 0x0bc1, 0x4767, 0xa3, 0xa1, 0x8e, 0x55, 0x67, 0x8c, 0xcd, 0x59);
		
		/// <summary>
		/// DomainRole TypeDefinition
		/// Description for
		/// ConfigurationSectionDesigner.AttributePropertyHasPropertyType.TypeDefinition
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.AttributePropertyHasPropertyType/TypeDefinition.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.AttributePropertyHasPropertyType/TypeDefinition.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReferringAttributes", PropertyDisplayNameKey="ConfigurationSectionDesigner.AttributePropertyHasPropertyType/TypeDefinition.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bb3050bf-0bc1-4767-a3a1-8e55678ccd59")]
		public virtual TypeDefinition TypeDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TypeDefinition)DslModeling::DomainRoleInfo.GetRolePlayer(this, TypeDefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TypeDefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Type of a AttributeProperty
		/// <summary>
		/// Gets Type.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TypeDefinition GetType(AttributeProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributePropertyDomainRoleId) as TypeDefinition;
		}
		
		/// <summary>
		/// Sets Type.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetType(AttributeProperty element, TypeDefinition newTypeDefinition)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributePropertyDomainRoleId, newTypeDefinition);
		}
		#endregion
		#region AttributeProperty link accessor
		/// <summary>
		/// Get the AttributePropertyHasPropertyType link to a AttributeProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType GetLinkToType (global::ConfigurationSectionDesigner.AttributeProperty attributePropertyInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType>(attributePropertyInstance, global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType.AttributePropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AttributeProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TypeDefinition link accessor
		/// <summary>
		/// Get the list of AttributePropertyHasPropertyType links to a TypeDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType> GetLinksToReferringAttributes ( global::ConfigurationSectionDesigner.TypeDefinition typeDefinitionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType>(typeDefinitionInstance, global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType.TypeDefinitionDomainRoleId);
		}
		#endregion
		#region AttributePropertyHasPropertyType instance accessors
		
		/// <summary>
		/// Get any AttributePropertyHasPropertyType links between a given AttributeProperty and a TypeDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType> GetLinks( global::ConfigurationSectionDesigner.AttributeProperty source, global::ConfigurationSectionDesigner.TypeDefinition target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType>(source, global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType.AttributePropertyDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType link in links )
			{
				if ( target.Equals(link.TypeDefinition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AttributePropertyHasPropertyType link between a given AttributePropertyand a TypeDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType GetLink( global::ConfigurationSectionDesigner.AttributeProperty source, global::ConfigurationSectionDesigner.TypeDefinition target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType>(source, global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType.AttributePropertyDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.AttributePropertyHasPropertyType link in links )
			{
				if ( target.Equals(link.TypeDefinition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship ConfigurationSectionModelHasTypeDefinitions
	/// Description for
	/// ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("67b651a6-8f44-4a6b-b767-eed9de158dc4")]
	public partial class ConfigurationSectionModelHasTypeDefinitions : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConfigurationSectionModelHasTypeDefinitions domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x67b651a6, 0x8f44, 0x4a6b, 0xb7, 0x67, 0xee, 0xd9, 0xde, 0x15, 0x8d, 0xc4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConfigurationSectionModelHasTypeDefinitions link in the same Partition as the given ConfigurationSectionModel
		/// </summary>
		/// <param name="source">ConfigurationSectionModel to use as the source of the relationship.</param>
		/// <param name="target">TypeDefinition to use as the target of the relationship.</param>
		public ConfigurationSectionModelHasTypeDefinitions(ConfigurationSectionModel source, TypeDefinition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConfigurationSectionModelHasTypeDefinitions.ConfigurationSectionModelDomainRoleId, source), new DslModeling::RoleAssignment(ConfigurationSectionModelHasTypeDefinitions.TypeDefinitionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationSectionModelHasTypeDefinitions(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationSectionModelHasTypeDefinitions(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationSectionModelHasTypeDefinitions(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationSectionModelHasTypeDefinitions(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConfigurationSectionModel domain role code
		
		/// <summary>
		/// ConfigurationSectionModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationSectionModelDomainRoleId = new global::System.Guid(0xb9d0f943, 0x254e, 0x41b5, 0x92, 0x54, 0xd5, 0x7d, 0xc0, 0x5a, 0x33, 0xa9);
		
		/// <summary>
		/// DomainRole ConfigurationSectionModel
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions.ConfigurationSectionModel
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions/ConfigurationSectionModel.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions/ConfigurationSectionModel.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TypeDefinitions", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions/ConfigurationSectionModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b9d0f943-254e-41b5-9254-d57dc05a33a9")]
		public virtual ConfigurationSectionModel ConfigurationSectionModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationSectionModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationSectionModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationSectionModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConfigurationSectionModel of a TypeDefinition
		/// <summary>
		/// Gets ConfigurationSectionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConfigurationSectionModel GetConfigurationSectionModel(TypeDefinition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TypeDefinitionDomainRoleId) as ConfigurationSectionModel;
		}
		
		/// <summary>
		/// Sets ConfigurationSectionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConfigurationSectionModel(TypeDefinition element, ConfigurationSectionModel newConfigurationSectionModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TypeDefinitionDomainRoleId, newConfigurationSectionModel);
		}
		#endregion
		#region TypeDefinition domain role code
		
		/// <summary>
		/// TypeDefinition domain role Id.
		/// </summary>
		public static readonly global::System.Guid TypeDefinitionDomainRoleId = new global::System.Guid(0xbfa60ac5, 0x6010, 0x461b, 0x8c, 0xdc, 0x8a, 0xfa, 0x44, 0xb6, 0x4f, 0x39);
		
		/// <summary>
		/// DomainRole TypeDefinition
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions.TypeDefinition
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions/TypeDefinition.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions/TypeDefinition.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConfigurationSectionModel", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions/TypeDefinition.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("bfa60ac5-6010-461b-8cdc-8afa44b64f39")]
		public virtual TypeDefinition TypeDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TypeDefinition)DslModeling::DomainRoleInfo.GetRolePlayer(this, TypeDefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TypeDefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TypeDefinitions of a ConfigurationSectionModel
		/// <summary>
		/// Gets a list of TypeDefinitions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TypeDefinition> GetTypeDefinitions(ConfigurationSectionModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TypeDefinition>, TypeDefinition>(element, ConfigurationSectionModelDomainRoleId);
		}
		#endregion
		#region ConfigurationSectionModel link accessor
		/// <summary>
		/// Get the list of ConfigurationSectionModelHasTypeDefinitions links to a ConfigurationSectionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions> GetLinksToTypeDefinitions ( global::ConfigurationSectionDesigner.ConfigurationSectionModel configurationSectionModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions>(configurationSectionModelInstance, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions.ConfigurationSectionModelDomainRoleId);
		}
		#endregion
		#region TypeDefinition link accessor
		/// <summary>
		/// Get the ConfigurationSectionModelHasTypeDefinitions link to a TypeDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions GetLinkToConfigurationSectionModel (global::ConfigurationSectionDesigner.TypeDefinition typeDefinitionInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions>(typeDefinitionInstance, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions.TypeDefinitionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TypeDefinition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConfigurationSectionModelHasTypeDefinitions instance accessors
		
		/// <summary>
		/// Get any ConfigurationSectionModelHasTypeDefinitions links between a given ConfigurationSectionModel and a TypeDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions> GetLinks( global::ConfigurationSectionDesigner.ConfigurationSectionModel source, global::ConfigurationSectionDesigner.TypeDefinition target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions>(source, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions.ConfigurationSectionModelDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions link in links )
			{
				if ( target.Equals(link.TypeDefinition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConfigurationSectionModelHasTypeDefinitions link between a given ConfigurationSectionModeland a TypeDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions GetLink( global::ConfigurationSectionDesigner.ConfigurationSectionModel source, global::ConfigurationSectionDesigner.TypeDefinition target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions>(source, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions.ConfigurationSectionModelDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationSectionModelHasTypeDefinitions link in links )
			{
				if ( target.Equals(link.TypeDefinition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship EnumeratedTypeHasLiterals
	/// Description for ConfigurationSectionDesigner.EnumeratedTypeHasLiterals
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.EnumeratedTypeHasLiterals.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.EnumeratedTypeHasLiterals.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e2efdbc8-1f56-4d05-b808-22ecad823313")]
	public partial class EnumeratedTypeHasLiterals : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EnumeratedTypeHasLiterals domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe2efdbc8, 0x1f56, 0x4d05, 0xb8, 0x08, 0x22, 0xec, 0xad, 0x82, 0x33, 0x13);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EnumeratedTypeHasLiterals link in the same Partition as the given EnumeratedType
		/// </summary>
		/// <param name="source">EnumeratedType to use as the source of the relationship.</param>
		/// <param name="target">EnumerationLiteral to use as the target of the relationship.</param>
		public EnumeratedTypeHasLiterals(EnumeratedType source, EnumerationLiteral target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EnumeratedTypeHasLiterals.EnumeratedTypeDomainRoleId, source), new DslModeling::RoleAssignment(EnumeratedTypeHasLiterals.EnumerationLiteralDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EnumeratedTypeHasLiterals(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EnumeratedTypeHasLiterals(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EnumeratedTypeHasLiterals(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EnumeratedTypeHasLiterals(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EnumeratedType domain role code
		
		/// <summary>
		/// EnumeratedType domain role Id.
		/// </summary>
		public static readonly global::System.Guid EnumeratedTypeDomainRoleId = new global::System.Guid(0xdd223a91, 0x254e, 0x4f9d, 0xa3, 0xc7, 0x56, 0x4c, 0xf1, 0x5a, 0x50, 0x61);
		
		/// <summary>
		/// DomainRole EnumeratedType
		/// Description for
		/// ConfigurationSectionDesigner.EnumeratedTypeHasLiterals.EnumeratedType
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.EnumeratedTypeHasLiterals/EnumeratedType.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.EnumeratedTypeHasLiterals/EnumeratedType.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Literals", PropertyDisplayNameKey="ConfigurationSectionDesigner.EnumeratedTypeHasLiterals/EnumeratedType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dd223a91-254e-4f9d-a3c7-564cf15a5061")]
		public virtual EnumeratedType EnumeratedType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EnumeratedType)DslModeling::DomainRoleInfo.GetRolePlayer(this, EnumeratedTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EnumeratedTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EnumeratedType of a EnumerationLiteral
		/// <summary>
		/// Gets EnumeratedType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EnumeratedType GetEnumeratedType(EnumerationLiteral element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EnumerationLiteralDomainRoleId) as EnumeratedType;
		}
		
		/// <summary>
		/// Sets EnumeratedType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEnumeratedType(EnumerationLiteral element, EnumeratedType newEnumeratedType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EnumerationLiteralDomainRoleId, newEnumeratedType);
		}
		#endregion
		#region EnumerationLiteral domain role code
		
		/// <summary>
		/// EnumerationLiteral domain role Id.
		/// </summary>
		public static readonly global::System.Guid EnumerationLiteralDomainRoleId = new global::System.Guid(0x6f8dffe1, 0xbe1e, 0x4ef0, 0xa7, 0xd2, 0xe3, 0x2f, 0x53, 0x03, 0x33, 0x31);
		
		/// <summary>
		/// DomainRole EnumerationLiteral
		/// Description for
		/// ConfigurationSectionDesigner.EnumeratedTypeHasLiterals.EnumerationLiteral
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.EnumeratedTypeHasLiterals/EnumerationLiteral.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.EnumeratedTypeHasLiterals/EnumerationLiteral.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EnumeratedType", PropertyDisplayNameKey="ConfigurationSectionDesigner.EnumeratedTypeHasLiterals/EnumerationLiteral.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6f8dffe1-be1e-4ef0-a7d2-e32f53033331")]
		public virtual EnumerationLiteral EnumerationLiteral
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EnumerationLiteral)DslModeling::DomainRoleInfo.GetRolePlayer(this, EnumerationLiteralDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EnumerationLiteralDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Literals of a EnumeratedType
		/// <summary>
		/// Gets a list of Literals.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EnumerationLiteral> GetLiterals(EnumeratedType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EnumerationLiteral>, EnumerationLiteral>(element, EnumeratedTypeDomainRoleId);
		}
		#endregion
		#region EnumeratedType link accessor
		/// <summary>
		/// Get the list of EnumeratedTypeHasLiterals links to a EnumeratedType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals> GetLinksToLiterals ( global::ConfigurationSectionDesigner.EnumeratedType enumeratedTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals>(enumeratedTypeInstance, global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals.EnumeratedTypeDomainRoleId);
		}
		#endregion
		#region EnumerationLiteral link accessor
		/// <summary>
		/// Get the EnumeratedTypeHasLiterals link to a EnumerationLiteral.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals GetLinkToEnumeratedType (global::ConfigurationSectionDesigner.EnumerationLiteral enumerationLiteralInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals>(enumerationLiteralInstance, global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals.EnumerationLiteralDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EnumerationLiteral not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EnumeratedTypeHasLiterals instance accessors
		
		/// <summary>
		/// Get any EnumeratedTypeHasLiterals links between a given EnumeratedType and a EnumerationLiteral.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals> GetLinks( global::ConfigurationSectionDesigner.EnumeratedType source, global::ConfigurationSectionDesigner.EnumerationLiteral target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals>(source, global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals.EnumeratedTypeDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals link in links )
			{
				if ( target.Equals(link.EnumerationLiteral) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EnumeratedTypeHasLiterals link between a given EnumeratedTypeand a EnumerationLiteral.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals GetLink( global::ConfigurationSectionDesigner.EnumeratedType source, global::ConfigurationSectionDesigner.EnumerationLiteral target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals>(source, global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals.EnumeratedTypeDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.EnumeratedTypeHasLiterals link in links )
			{
				if ( target.Equals(link.EnumerationLiteral) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship ConfigurationSectionModelHasConfigurationElements
	/// Description for
	/// ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1adef01e-16c1-442b-9b1b-17234b7229aa")]
	public partial class ConfigurationSectionModelHasConfigurationElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConfigurationSectionModelHasConfigurationElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1adef01e, 0x16c1, 0x442b, 0x9b, 0x1b, 0x17, 0x23, 0x4b, 0x72, 0x29, 0xaa);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConfigurationSectionModelHasConfigurationElements link in the same Partition as the given ConfigurationSectionModel
		/// </summary>
		/// <param name="source">ConfigurationSectionModel to use as the source of the relationship.</param>
		/// <param name="target">BaseConfigurationType to use as the target of the relationship.</param>
		public ConfigurationSectionModelHasConfigurationElements(ConfigurationSectionModel source, BaseConfigurationType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConfigurationSectionModelHasConfigurationElements.ConfigurationSectionModelDomainRoleId, source), new DslModeling::RoleAssignment(ConfigurationSectionModelHasConfigurationElements.BaseConfigurationTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationSectionModelHasConfigurationElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationSectionModelHasConfigurationElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationSectionModelHasConfigurationElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationSectionModelHasConfigurationElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConfigurationSectionModel domain role code
		
		/// <summary>
		/// ConfigurationSectionModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationSectionModelDomainRoleId = new global::System.Guid(0xea7d0257, 0xfdcf, 0x4176, 0xa0, 0xf6, 0xa8, 0x42, 0xfd, 0x41, 0x9e, 0xd0);
		
		/// <summary>
		/// DomainRole ConfigurationSectionModel
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements.ConfigurationSectionModel
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements/ConfigurationSectionModel.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements/ConfigurationSectionModel.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConfigurationElements", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements/ConfigurationSectionModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ea7d0257-fdcf-4176-a0f6-a842fd419ed0")]
		public virtual ConfigurationSectionModel ConfigurationSectionModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationSectionModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationSectionModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationSectionModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConfigurationSectionModel of a BaseConfigurationType
		/// <summary>
		/// Gets ConfigurationSectionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConfigurationSectionModel GetConfigurationSectionModel(BaseConfigurationType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BaseConfigurationTypeDomainRoleId) as ConfigurationSectionModel;
		}
		
		/// <summary>
		/// Sets ConfigurationSectionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConfigurationSectionModel(BaseConfigurationType element, ConfigurationSectionModel newConfigurationSectionModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BaseConfigurationTypeDomainRoleId, newConfigurationSectionModel);
		}
		#endregion
		#region BaseConfigurationType domain role code
		
		/// <summary>
		/// BaseConfigurationType domain role Id.
		/// </summary>
		public static readonly global::System.Guid BaseConfigurationTypeDomainRoleId = new global::System.Guid(0xf2e44f3b, 0x3cf4, 0x4a4f, 0x87, 0x02, 0x5c, 0x6b, 0xd5, 0x1c, 0x21, 0x3a);
		
		/// <summary>
		/// DomainRole BaseConfigurationType
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements.BaseConfigurationType
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements/BaseConfigurationType.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements/BaseConfigurationType.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConfigurationSectionModel", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements/BaseConfigurationType.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f2e44f3b-3cf4-4a4f-8702-5c6bd51c213a")]
		public virtual BaseConfigurationType BaseConfigurationType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BaseConfigurationType)DslModeling::DomainRoleInfo.GetRolePlayer(this, BaseConfigurationTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BaseConfigurationTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConfigurationElements of a ConfigurationSectionModel
		/// <summary>
		/// Gets a list of ConfigurationElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<BaseConfigurationType> GetConfigurationElements(ConfigurationSectionModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<BaseConfigurationType>, BaseConfigurationType>(element, ConfigurationSectionModelDomainRoleId);
		}
		#endregion
		#region ConfigurationSectionModel link accessor
		/// <summary>
		/// Get the list of ConfigurationSectionModelHasConfigurationElements links to a ConfigurationSectionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements> GetLinksToConfigurationElements ( global::ConfigurationSectionDesigner.ConfigurationSectionModel configurationSectionModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements>(configurationSectionModelInstance, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements.ConfigurationSectionModelDomainRoleId);
		}
		#endregion
		#region BaseConfigurationType link accessor
		/// <summary>
		/// Get the ConfigurationSectionModelHasConfigurationElements link to a BaseConfigurationType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements GetLinkToConfigurationSectionModel (global::ConfigurationSectionDesigner.BaseConfigurationType baseConfigurationTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements>(baseConfigurationTypeInstance, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements.BaseConfigurationTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of BaseConfigurationType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConfigurationSectionModelHasConfigurationElements instance accessors
		
		/// <summary>
		/// Get any ConfigurationSectionModelHasConfigurationElements links between a given ConfigurationSectionModel and a BaseConfigurationType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements> GetLinks( global::ConfigurationSectionDesigner.ConfigurationSectionModel source, global::ConfigurationSectionDesigner.BaseConfigurationType target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements>(source, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements.ConfigurationSectionModelDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements link in links )
			{
				if ( target.Equals(link.BaseConfigurationType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConfigurationSectionModelHasConfigurationElements link between a given ConfigurationSectionModeland a BaseConfigurationType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements GetLink( global::ConfigurationSectionDesigner.ConfigurationSectionModel source, global::ConfigurationSectionDesigner.BaseConfigurationType target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements>(source, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements.ConfigurationSectionModelDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationSectionModelHasConfigurationElements link in links )
			{
				if ( target.Equals(link.BaseConfigurationType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship ConfigurationSectionGroupHasConfigurationSectionProperties
	/// Description for
	/// ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("923b418a-dd91-4bcc-8926-bf432fb1c412")]
	public partial class ConfigurationSectionGroupHasConfigurationSectionProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConfigurationSectionGroupHasConfigurationSectionProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x923b418a, 0xdd91, 0x4bcc, 0x89, 0x26, 0xbf, 0x43, 0x2f, 0xb1, 0xc4, 0x12);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConfigurationSectionGroupHasConfigurationSectionProperties link in the same Partition as the given ConfigurationSectionGroup
		/// </summary>
		/// <param name="source">ConfigurationSectionGroup to use as the source of the relationship.</param>
		/// <param name="target">ConfigurationSectionProperty to use as the target of the relationship.</param>
		public ConfigurationSectionGroupHasConfigurationSectionProperties(ConfigurationSectionGroup source, ConfigurationSectionProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConfigurationSectionGroupHasConfigurationSectionProperties.ConfigurationSectionGroupDomainRoleId, source), new DslModeling::RoleAssignment(ConfigurationSectionGroupHasConfigurationSectionProperties.ConfigurationSectionPropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationSectionGroupHasConfigurationSectionProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationSectionGroupHasConfigurationSectionProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationSectionGroupHasConfigurationSectionProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationSectionGroupHasConfigurationSectionProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConfigurationSectionGroup domain role code
		
		/// <summary>
		/// ConfigurationSectionGroup domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationSectionGroupDomainRoleId = new global::System.Guid(0x2838e823, 0x5ea2, 0x4dc2, 0x99, 0x6b, 0xf7, 0x5f, 0xb7, 0xc9, 0xc2, 0xcd);
		
		/// <summary>
		/// DomainRole ConfigurationSectionGroup
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties.ConfigurationSectionGroup
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties/ConfigurationSectionGroup.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties/ConfigurationSectionGroup.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConfigurationSectionProperties", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties/ConfigurationSectionGroup.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2838e823-5ea2-4dc2-996b-f75fb7c9c2cd")]
		public virtual ConfigurationSectionGroup ConfigurationSectionGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationSectionGroup)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationSectionGroupDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationSectionGroupDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConfigurationSectionGroup of a ConfigurationSectionProperty
		/// <summary>
		/// Gets ConfigurationSectionGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConfigurationSectionGroup GetConfigurationSectionGroup(ConfigurationSectionProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConfigurationSectionPropertyDomainRoleId) as ConfigurationSectionGroup;
		}
		
		/// <summary>
		/// Sets ConfigurationSectionGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConfigurationSectionGroup(ConfigurationSectionProperty element, ConfigurationSectionGroup newConfigurationSectionGroup)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConfigurationSectionPropertyDomainRoleId, newConfigurationSectionGroup);
		}
		#endregion
		#region ConfigurationSectionProperty domain role code
		
		/// <summary>
		/// ConfigurationSectionProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationSectionPropertyDomainRoleId = new global::System.Guid(0x3a71dd6c, 0xcc33, 0x4efc, 0x87, 0xfe, 0x04, 0x7d, 0xb4, 0xa1, 0xcf, 0x64);
		
		/// <summary>
		/// DomainRole ConfigurationSectionProperty
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties.ConfigurationSectionProperty
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties/ConfigurationSectionProperty.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties/ConfigurationSectionProperty.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConfigurationSectionGroup", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties/ConfigurationSectionProperty.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3a71dd6c-cc33-4efc-87fe-047db4a1cf64")]
		public virtual ConfigurationSectionProperty ConfigurationSectionProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationSectionProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationSectionPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationSectionPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConfigurationSectionProperties of a ConfigurationSectionGroup
		/// <summary>
		/// Gets a list of ConfigurationSectionProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConfigurationSectionProperty> GetConfigurationSectionProperties(ConfigurationSectionGroup element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ConfigurationSectionProperty>, ConfigurationSectionProperty>(element, ConfigurationSectionGroupDomainRoleId);
		}
		#endregion
		#region ConfigurationSectionGroup link accessor
		/// <summary>
		/// Get the list of ConfigurationSectionGroupHasConfigurationSectionProperties links to a ConfigurationSectionGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties> GetLinksToConfigurationSectionProperties ( global::ConfigurationSectionDesigner.ConfigurationSectionGroup configurationSectionGroupInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties>(configurationSectionGroupInstance, global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties.ConfigurationSectionGroupDomainRoleId);
		}
		#endregion
		#region ConfigurationSectionProperty link accessor
		/// <summary>
		/// Get the ConfigurationSectionGroupHasConfigurationSectionProperties link to a ConfigurationSectionProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties GetLinkToConfigurationSectionGroup (global::ConfigurationSectionDesigner.ConfigurationSectionProperty configurationSectionPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties>(configurationSectionPropertyInstance, global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties.ConfigurationSectionPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConfigurationSectionProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConfigurationSectionGroupHasConfigurationSectionProperties instance accessors
		
		/// <summary>
		/// Get any ConfigurationSectionGroupHasConfigurationSectionProperties links between a given ConfigurationSectionGroup and a ConfigurationSectionProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties> GetLinks( global::ConfigurationSectionDesigner.ConfigurationSectionGroup source, global::ConfigurationSectionDesigner.ConfigurationSectionProperty target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties>(source, global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties.ConfigurationSectionGroupDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties link in links )
			{
				if ( target.Equals(link.ConfigurationSectionProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConfigurationSectionGroupHasConfigurationSectionProperties link between a given ConfigurationSectionGroupand a ConfigurationSectionProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties GetLink( global::ConfigurationSectionDesigner.ConfigurationSectionGroup source, global::ConfigurationSectionDesigner.ConfigurationSectionProperty target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties>(source, global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties.ConfigurationSectionGroupDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionProperties link in links )
			{
				if ( target.Equals(link.ConfigurationSectionProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship ConfigurationSectionPropertyHasConfigurationSection
	/// Description for
	/// ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d919466a-4800-461d-81c7-e11140541141")]
	public partial class ConfigurationSectionPropertyHasConfigurationSection : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConfigurationSectionPropertyHasConfigurationSection domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd919466a, 0x4800, 0x461d, 0x81, 0xc7, 0xe1, 0x11, 0x40, 0x54, 0x11, 0x41);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConfigurationSectionPropertyHasConfigurationSection link in the same Partition as the given ConfigurationSectionProperty
		/// </summary>
		/// <param name="source">ConfigurationSectionProperty to use as the source of the relationship.</param>
		/// <param name="target">ConfigurationSection to use as the target of the relationship.</param>
		public ConfigurationSectionPropertyHasConfigurationSection(ConfigurationSectionProperty source, ConfigurationSection target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConfigurationSectionPropertyHasConfigurationSection.ConfigurationSectionPropertyDomainRoleId, source), new DslModeling::RoleAssignment(ConfigurationSectionPropertyHasConfigurationSection.ConfigurationSectionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationSectionPropertyHasConfigurationSection(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationSectionPropertyHasConfigurationSection(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationSectionPropertyHasConfigurationSection(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationSectionPropertyHasConfigurationSection(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConfigurationSectionProperty domain role code
		
		/// <summary>
		/// ConfigurationSectionProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationSectionPropertyDomainRoleId = new global::System.Guid(0x2bbaeed7, 0x0255, 0x4803, 0xb4, 0x38, 0xfb, 0xc1, 0x86, 0xd8, 0x40, 0x38);
		
		/// <summary>
		/// DomainRole ConfigurationSectionProperty
		/// The configuration section the section group contains
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection/ConfigurationSectionProperty.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection/ConfigurationSectionProperty.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection/ConfigurationSectionProperty.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ContainedConfigurationSection", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection/ConfigurationSectionProperty.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("2bbaeed7-0255-4803-b438-fbc186d84038")]
		public virtual ConfigurationSectionProperty ConfigurationSectionProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationSectionProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationSectionPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationSectionPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferringConfigurationSectionGroup of a ConfigurationSection
		/// <summary>
		/// Gets ReferringConfigurationSectionGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConfigurationSectionProperty GetReferringConfigurationSectionGroup(ConfigurationSection element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConfigurationSectionDomainRoleId) as ConfigurationSectionProperty;
		}
		
		/// <summary>
		/// Sets ReferringConfigurationSectionGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReferringConfigurationSectionGroup(ConfigurationSection element, ConfigurationSectionProperty newConfigurationSectionProperty)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConfigurationSectionDomainRoleId, newConfigurationSectionProperty);
		}
		#endregion
		#region ConfigurationSection domain role code
		
		/// <summary>
		/// ConfigurationSection domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationSectionDomainRoleId = new global::System.Guid(0x9d0a72ee, 0x0ae9, 0x4fd4, 0xba, 0xbe, 0x69, 0x5f, 0xf6, 0xf9, 0xbd, 0x11);
		
		/// <summary>
		/// DomainRole ConfigurationSection
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection.ConfigurationSection
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection/ConfigurationSection.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection/ConfigurationSection.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReferringConfigurationSectionGroup", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection/ConfigurationSection.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("9d0a72ee-0ae9-4fd4-babe-695ff6f9bd11")]
		public virtual ConfigurationSection ConfigurationSection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationSection)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationSectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationSectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ContainedConfigurationSection of a ConfigurationSectionProperty
		/// <summary>
		/// Gets ContainedConfigurationSection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConfigurationSection GetContainedConfigurationSection(ConfigurationSectionProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConfigurationSectionPropertyDomainRoleId) as ConfigurationSection;
		}
		
		/// <summary>
		/// Sets ContainedConfigurationSection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetContainedConfigurationSection(ConfigurationSectionProperty element, ConfigurationSection newConfigurationSection)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConfigurationSectionPropertyDomainRoleId, newConfigurationSection);
		}
		#endregion
		#region ConfigurationSectionProperty link accessor
		/// <summary>
		/// Get the ConfigurationSectionPropertyHasConfigurationSection link to a ConfigurationSectionProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection GetLinkToContainedConfigurationSection (global::ConfigurationSectionDesigner.ConfigurationSectionProperty configurationSectionPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection>(configurationSectionPropertyInstance, global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection.ConfigurationSectionPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConfigurationSectionProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConfigurationSection link accessor
		/// <summary>
		/// Get the ConfigurationSectionPropertyHasConfigurationSection link to a ConfigurationSection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection GetLinkToReferringConfigurationSectionGroup (global::ConfigurationSectionDesigner.ConfigurationSection configurationSectionInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection>(configurationSectionInstance, global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection.ConfigurationSectionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConfigurationSection not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConfigurationSectionPropertyHasConfigurationSection instance accessors
		
		/// <summary>
		/// Get any ConfigurationSectionPropertyHasConfigurationSection links between a given ConfigurationSectionProperty and a ConfigurationSection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection> GetLinks( global::ConfigurationSectionDesigner.ConfigurationSectionProperty source, global::ConfigurationSectionDesigner.ConfigurationSection target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection>(source, global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection.ConfigurationSectionPropertyDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection link in links )
			{
				if ( target.Equals(link.ConfigurationSection) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConfigurationSectionPropertyHasConfigurationSection link between a given ConfigurationSectionPropertyand a ConfigurationSection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection GetLink( global::ConfigurationSectionDesigner.ConfigurationSectionProperty source, global::ConfigurationSectionDesigner.ConfigurationSection target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection>(source, global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection.ConfigurationSectionPropertyDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationSectionPropertyHasConfigurationSection link in links )
			{
				if ( target.Equals(link.ConfigurationSection) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship ConfigurationSectionGroupHasConfigurationSectionGroupProperties
	/// Description for
	/// ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("61e3af3d-d9c2-4bcb-a602-0a1c8b938c39")]
	public partial class ConfigurationSectionGroupHasConfigurationSectionGroupProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConfigurationSectionGroupHasConfigurationSectionGroupProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x61e3af3d, 0xd9c2, 0x4bcb, 0xa6, 0x02, 0x0a, 0x1c, 0x8b, 0x93, 0x8c, 0x39);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConfigurationSectionGroupHasConfigurationSectionGroupProperties link in the same Partition as the given ConfigurationSectionGroup
		/// </summary>
		/// <param name="source">ConfigurationSectionGroup to use as the source of the relationship.</param>
		/// <param name="target">ConfigurationSectionGroupProperty to use as the target of the relationship.</param>
		public ConfigurationSectionGroupHasConfigurationSectionGroupProperties(ConfigurationSectionGroup source, ConfigurationSectionGroupProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConfigurationSectionGroupHasConfigurationSectionGroupProperties.ConfigurationSectionGroupDomainRoleId, source), new DslModeling::RoleAssignment(ConfigurationSectionGroupHasConfigurationSectionGroupProperties.ConfigurationSectionGroupPropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationSectionGroupHasConfigurationSectionGroupProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationSectionGroupHasConfigurationSectionGroupProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationSectionGroupHasConfigurationSectionGroupProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationSectionGroupHasConfigurationSectionGroupProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConfigurationSectionGroup domain role code
		
		/// <summary>
		/// ConfigurationSectionGroup domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationSectionGroupDomainRoleId = new global::System.Guid(0xbde62e92, 0xe0ea, 0x483b, 0xbe, 0x95, 0x4f, 0xd0, 0x2c, 0x91, 0x0e, 0x5b);
		
		/// <summary>
		/// DomainRole ConfigurationSectionGroup
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties.ConfigurationSectionGroup
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties/ConfigurationSectionGroup.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties/ConfigurationSectionGroup.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConfigurationSectionGroupProperties", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties/ConfigurationSectionGroup.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bde62e92-e0ea-483b-be95-4fd02c910e5b")]
		public virtual ConfigurationSectionGroup ConfigurationSectionGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationSectionGroup)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationSectionGroupDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationSectionGroupDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConfigurationSectionGroup of a ConfigurationSectionGroupProperty
		/// <summary>
		/// Gets ConfigurationSectionGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConfigurationSectionGroup GetConfigurationSectionGroup(ConfigurationSectionGroupProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConfigurationSectionGroupPropertyDomainRoleId) as ConfigurationSectionGroup;
		}
		
		/// <summary>
		/// Sets ConfigurationSectionGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConfigurationSectionGroup(ConfigurationSectionGroupProperty element, ConfigurationSectionGroup newConfigurationSectionGroup)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConfigurationSectionGroupPropertyDomainRoleId, newConfigurationSectionGroup);
		}
		#endregion
		#region ConfigurationSectionGroupProperty domain role code
		
		/// <summary>
		/// ConfigurationSectionGroupProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationSectionGroupPropertyDomainRoleId = new global::System.Guid(0xa75ab573, 0x5a61, 0x45bc, 0xa0, 0x94, 0x96, 0xe1, 0xa4, 0x17, 0x1c, 0x6f);
		
		/// <summary>
		/// DomainRole ConfigurationSectionGroupProperty
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties.ConfigurationSectionGroupProperty
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties/ConfigurationSectionGroupProperty.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties/ConfigurationSectionGroupProperty.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConfigurationSectionGroup", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties/ConfigurationSectionGroupProperty.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a75ab573-5a61-45bc-a094-96e1a4171c6f")]
		public virtual ConfigurationSectionGroupProperty ConfigurationSectionGroupProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationSectionGroupProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationSectionGroupPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationSectionGroupPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConfigurationSectionGroupProperties of a ConfigurationSectionGroup
		/// <summary>
		/// Gets a list of ConfigurationSectionGroupProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConfigurationSectionGroupProperty> GetConfigurationSectionGroupProperties(ConfigurationSectionGroup element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ConfigurationSectionGroupProperty>, ConfigurationSectionGroupProperty>(element, ConfigurationSectionGroupDomainRoleId);
		}
		#endregion
		#region ConfigurationSectionGroup link accessor
		/// <summary>
		/// Get the list of ConfigurationSectionGroupHasConfigurationSectionGroupProperties links to a ConfigurationSectionGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties> GetLinksToConfigurationSectionGroupProperties ( global::ConfigurationSectionDesigner.ConfigurationSectionGroup configurationSectionGroupInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties>(configurationSectionGroupInstance, global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties.ConfigurationSectionGroupDomainRoleId);
		}
		#endregion
		#region ConfigurationSectionGroupProperty link accessor
		/// <summary>
		/// Get the ConfigurationSectionGroupHasConfigurationSectionGroupProperties link to a ConfigurationSectionGroupProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties GetLinkToConfigurationSectionGroup (global::ConfigurationSectionDesigner.ConfigurationSectionGroupProperty configurationSectionGroupPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties>(configurationSectionGroupPropertyInstance, global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties.ConfigurationSectionGroupPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConfigurationSectionGroupProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConfigurationSectionGroupHasConfigurationSectionGroupProperties instance accessors
		
		/// <summary>
		/// Get any ConfigurationSectionGroupHasConfigurationSectionGroupProperties links between a given ConfigurationSectionGroup and a ConfigurationSectionGroupProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties> GetLinks( global::ConfigurationSectionDesigner.ConfigurationSectionGroup source, global::ConfigurationSectionDesigner.ConfigurationSectionGroupProperty target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties>(source, global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties.ConfigurationSectionGroupDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties link in links )
			{
				if ( target.Equals(link.ConfigurationSectionGroupProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConfigurationSectionGroupHasConfigurationSectionGroupProperties link between a given ConfigurationSectionGroupand a ConfigurationSectionGroupProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties GetLink( global::ConfigurationSectionDesigner.ConfigurationSectionGroup source, global::ConfigurationSectionDesigner.ConfigurationSectionGroupProperty target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties>(source, global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties.ConfigurationSectionGroupDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationSectionGroupHasConfigurationSectionGroupProperties link in links )
			{
				if ( target.Equals(link.ConfigurationSectionGroupProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship ConfigurationSectionGroupPropertyHasConfigurationSectionGroup
	/// Description for
	/// ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b168b5ae-d730-494c-90a0-ef7e06bcb125")]
	public partial class ConfigurationSectionGroupPropertyHasConfigurationSectionGroup : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConfigurationSectionGroupPropertyHasConfigurationSectionGroup domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb168b5ae, 0xd730, 0x494c, 0x90, 0xa0, 0xef, 0x7e, 0x06, 0xbc, 0xb1, 0x25);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConfigurationSectionGroupPropertyHasConfigurationSectionGroup link in the same Partition as the given ConfigurationSectionGroupProperty
		/// </summary>
		/// <param name="source">ConfigurationSectionGroupProperty to use as the source of the relationship.</param>
		/// <param name="target">ConfigurationSectionGroup to use as the target of the relationship.</param>
		public ConfigurationSectionGroupPropertyHasConfigurationSectionGroup(ConfigurationSectionGroupProperty source, ConfigurationSectionGroup target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConfigurationSectionGroupPropertyHasConfigurationSectionGroup.ConfigurationSectionGroupPropertyDomainRoleId, source), new DslModeling::RoleAssignment(ConfigurationSectionGroupPropertyHasConfigurationSectionGroup.ConfigurationSectionGroupDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationSectionGroupPropertyHasConfigurationSectionGroup(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationSectionGroupPropertyHasConfigurationSectionGroup(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationSectionGroupPropertyHasConfigurationSectionGroup(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationSectionGroupPropertyHasConfigurationSectionGroup(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConfigurationSectionGroupProperty domain role code
		
		/// <summary>
		/// ConfigurationSectionGroupProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationSectionGroupPropertyDomainRoleId = new global::System.Guid(0x39cde385, 0xa63e, 0x424e, 0xaf, 0x55, 0x2e, 0x70, 0xdf, 0x24, 0xd7, 0xa2);
		
		/// <summary>
		/// DomainRole ConfigurationSectionGroupProperty
		/// The configuration section the section group contains
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup/ConfigurationSectionGroupProperty.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup/ConfigurationSectionGroupProperty.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup/ConfigurationSectionGroupProperty.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ContainedConfigurationSectionGroup", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup/ConfigurationSectionGroupProperty.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("39cde385-a63e-424e-af55-2e70df24d7a2")]
		public virtual ConfigurationSectionGroupProperty ConfigurationSectionGroupProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationSectionGroupProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationSectionGroupPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationSectionGroupPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferringConfigurationSectionGroup of a ConfigurationSectionGroup
		/// <summary>
		/// Gets ReferringConfigurationSectionGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConfigurationSectionGroupProperty GetReferringConfigurationSectionGroup(ConfigurationSectionGroup element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConfigurationSectionGroupDomainRoleId) as ConfigurationSectionGroupProperty;
		}
		
		/// <summary>
		/// Sets ReferringConfigurationSectionGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReferringConfigurationSectionGroup(ConfigurationSectionGroup element, ConfigurationSectionGroupProperty newConfigurationSectionGroupProperty)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConfigurationSectionGroupDomainRoleId, newConfigurationSectionGroupProperty);
		}
		#endregion
		#region ConfigurationSectionGroup domain role code
		
		/// <summary>
		/// ConfigurationSectionGroup domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationSectionGroupDomainRoleId = new global::System.Guid(0x4667c6a9, 0xf024, 0x4a0f, 0xb1, 0x14, 0x8d, 0x4e, 0x29, 0x6c, 0x05, 0xc6);
		
		/// <summary>
		/// DomainRole ConfigurationSectionGroup
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup.ConfigurationSectionGroup
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup/ConfigurationSectionGroup.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup/ConfigurationSectionGroup.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReferringConfigurationSectionGroup", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup/ConfigurationSectionGroup.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4667c6a9-f024-4a0f-b114-8d4e296c05c6")]
		public virtual ConfigurationSectionGroup ConfigurationSectionGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationSectionGroup)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationSectionGroupDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationSectionGroupDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ContainedConfigurationSectionGroup of a ConfigurationSectionGroupProperty
		/// <summary>
		/// Gets ContainedConfigurationSectionGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConfigurationSectionGroup GetContainedConfigurationSectionGroup(ConfigurationSectionGroupProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConfigurationSectionGroupPropertyDomainRoleId) as ConfigurationSectionGroup;
		}
		
		/// <summary>
		/// Sets ContainedConfigurationSectionGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetContainedConfigurationSectionGroup(ConfigurationSectionGroupProperty element, ConfigurationSectionGroup newConfigurationSectionGroup)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConfigurationSectionGroupPropertyDomainRoleId, newConfigurationSectionGroup);
		}
		#endregion
		#region ConfigurationSectionGroupProperty link accessor
		/// <summary>
		/// Get the ConfigurationSectionGroupPropertyHasConfigurationSectionGroup link to a ConfigurationSectionGroupProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup GetLinkToContainedConfigurationSectionGroup (global::ConfigurationSectionDesigner.ConfigurationSectionGroupProperty configurationSectionGroupPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup>(configurationSectionGroupPropertyInstance, global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup.ConfigurationSectionGroupPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConfigurationSectionGroupProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConfigurationSectionGroup link accessor
		/// <summary>
		/// Get the ConfigurationSectionGroupPropertyHasConfigurationSectionGroup link to a ConfigurationSectionGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup GetLinkToReferringConfigurationSectionGroup (global::ConfigurationSectionDesigner.ConfigurationSectionGroup configurationSectionGroupInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup>(configurationSectionGroupInstance, global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup.ConfigurationSectionGroupDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConfigurationSectionGroup not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConfigurationSectionGroupPropertyHasConfigurationSectionGroup instance accessors
		
		/// <summary>
		/// Get any ConfigurationSectionGroupPropertyHasConfigurationSectionGroup links between a given ConfigurationSectionGroupProperty and a ConfigurationSectionGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup> GetLinks( global::ConfigurationSectionDesigner.ConfigurationSectionGroupProperty source, global::ConfigurationSectionDesigner.ConfigurationSectionGroup target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup>(source, global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup.ConfigurationSectionGroupPropertyDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup link in links )
			{
				if ( target.Equals(link.ConfigurationSectionGroup) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConfigurationSectionGroupPropertyHasConfigurationSectionGroup link between a given ConfigurationSectionGroupPropertyand a ConfigurationSectionGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup GetLink( global::ConfigurationSectionDesigner.ConfigurationSectionGroupProperty source, global::ConfigurationSectionDesigner.ConfigurationSectionGroup target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup>(source, global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup.ConfigurationSectionGroupPropertyDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationSectionGroupPropertyHasConfigurationSectionGroup link in links )
			{
				if ( target.Equals(link.ConfigurationSectionGroup) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship ConfigurationSectionModelHasPropertyValidators
	/// Description for
	/// ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e56558c8-7988-43a2-bb79-80a0349a4f0c")]
	public partial class ConfigurationSectionModelHasPropertyValidators : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConfigurationSectionModelHasPropertyValidators domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe56558c8, 0x7988, 0x43a2, 0xbb, 0x79, 0x80, 0xa0, 0x34, 0x9a, 0x4f, 0x0c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConfigurationSectionModelHasPropertyValidators link in the same Partition as the given ConfigurationSectionModel
		/// </summary>
		/// <param name="source">ConfigurationSectionModel to use as the source of the relationship.</param>
		/// <param name="target">PropertyValidators to use as the target of the relationship.</param>
		public ConfigurationSectionModelHasPropertyValidators(ConfigurationSectionModel source, PropertyValidators target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConfigurationSectionModelHasPropertyValidators.ConfigurationSectionModelDomainRoleId, source), new DslModeling::RoleAssignment(ConfigurationSectionModelHasPropertyValidators.PropertyValidatorsDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationSectionModelHasPropertyValidators(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationSectionModelHasPropertyValidators(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationSectionModelHasPropertyValidators(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationSectionModelHasPropertyValidators(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConfigurationSectionModel domain role code
		
		/// <summary>
		/// ConfigurationSectionModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationSectionModelDomainRoleId = new global::System.Guid(0x9cd358d7, 0x41ee, 0x46dd, 0x99, 0xc1, 0x09, 0xfd, 0x79, 0x0a, 0x78, 0x52);
		
		/// <summary>
		/// DomainRole ConfigurationSectionModel
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators.ConfigurationSectionModel
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators/ConfigurationSectionModel.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators/ConfigurationSectionModel.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PropertyValidators", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators/ConfigurationSectionModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("9cd358d7-41ee-46dd-99c1-09fd790a7852")]
		public virtual ConfigurationSectionModel ConfigurationSectionModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationSectionModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationSectionModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationSectionModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConfigurationSectionModel of a PropertyValidators
		/// <summary>
		/// Gets ConfigurationSectionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConfigurationSectionModel GetConfigurationSectionModel(PropertyValidators element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyValidatorsDomainRoleId) as ConfigurationSectionModel;
		}
		
		/// <summary>
		/// Sets ConfigurationSectionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConfigurationSectionModel(PropertyValidators element, ConfigurationSectionModel newConfigurationSectionModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyValidatorsDomainRoleId, newConfigurationSectionModel);
		}
		#endregion
		#region PropertyValidators domain role code
		
		/// <summary>
		/// PropertyValidators domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyValidatorsDomainRoleId = new global::System.Guid(0x2e404e32, 0x005e, 0x4975, 0x96, 0xb0, 0x26, 0x89, 0xb1, 0x78, 0xff, 0xab);
		
		/// <summary>
		/// DomainRole PropertyValidators
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators.PropertyValidators
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators/PropertyValidators.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators/PropertyValidators.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConfigurationSectionModel", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators/PropertyValidators.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("2e404e32-005e-4975-96b0-2689b178ffab")]
		public virtual PropertyValidators PropertyValidators
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PropertyValidators)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyValidatorsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyValidatorsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PropertyValidators of a ConfigurationSectionModel
		/// <summary>
		/// Gets PropertyValidators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PropertyValidators GetPropertyValidators(ConfigurationSectionModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConfigurationSectionModelDomainRoleId) as PropertyValidators;
		}
		
		/// <summary>
		/// Sets PropertyValidators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPropertyValidators(ConfigurationSectionModel element, PropertyValidators newPropertyValidators)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConfigurationSectionModelDomainRoleId, newPropertyValidators);
		}
		#endregion
		#region ConfigurationSectionModel link accessor
		/// <summary>
		/// Get the ConfigurationSectionModelHasPropertyValidators link to a ConfigurationSectionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators GetLinkToPropertyValidators (global::ConfigurationSectionDesigner.ConfigurationSectionModel configurationSectionModelInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators>(configurationSectionModelInstance, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators.ConfigurationSectionModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConfigurationSectionModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PropertyValidators link accessor
		/// <summary>
		/// Get the ConfigurationSectionModelHasPropertyValidators link to a PropertyValidators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators GetLinkToConfigurationSectionModel (global::ConfigurationSectionDesigner.PropertyValidators propertyValidatorsInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators>(propertyValidatorsInstance, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators.PropertyValidatorsDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PropertyValidators not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConfigurationSectionModelHasPropertyValidators instance accessors
		
		/// <summary>
		/// Get any ConfigurationSectionModelHasPropertyValidators links between a given ConfigurationSectionModel and a PropertyValidators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators> GetLinks( global::ConfigurationSectionDesigner.ConfigurationSectionModel source, global::ConfigurationSectionDesigner.PropertyValidators target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators>(source, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators.ConfigurationSectionModelDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators link in links )
			{
				if ( target.Equals(link.PropertyValidators) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConfigurationSectionModelHasPropertyValidators link between a given ConfigurationSectionModeland a PropertyValidators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators GetLink( global::ConfigurationSectionDesigner.ConfigurationSectionModel source, global::ConfigurationSectionDesigner.PropertyValidators target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators>(source, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators.ConfigurationSectionModelDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationSectionModelHasPropertyValidators link in links )
			{
				if ( target.Equals(link.PropertyValidators) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship PropertyValidatorsHasValidators
	/// Description for ConfigurationSectionDesigner.PropertyValidatorsHasValidators
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.PropertyValidatorsHasValidators.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.PropertyValidatorsHasValidators.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8d6c7262-eb89-42ca-b6f1-cd012016b71d")]
	public partial class PropertyValidatorsHasValidators : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PropertyValidatorsHasValidators domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8d6c7262, 0xeb89, 0x42ca, 0xb6, 0xf1, 0xcd, 0x01, 0x20, 0x16, 0xb7, 0x1d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PropertyValidatorsHasValidators link in the same Partition as the given PropertyValidators
		/// </summary>
		/// <param name="source">PropertyValidators to use as the source of the relationship.</param>
		/// <param name="target">PropertyValidator to use as the target of the relationship.</param>
		public PropertyValidatorsHasValidators(PropertyValidators source, PropertyValidator target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PropertyValidatorsHasValidators.PropertyValidatorsDomainRoleId, source), new DslModeling::RoleAssignment(PropertyValidatorsHasValidators.PropertyValidatorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PropertyValidatorsHasValidators(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PropertyValidatorsHasValidators(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PropertyValidatorsHasValidators(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PropertyValidatorsHasValidators(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PropertyValidators domain role code
		
		/// <summary>
		/// PropertyValidators domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyValidatorsDomainRoleId = new global::System.Guid(0xe210e39e, 0x9c8d, 0x4926, 0xb5, 0x23, 0x78, 0xe9, 0xf7, 0xc3, 0xf9, 0xc3);
		
		/// <summary>
		/// DomainRole PropertyValidators
		/// Description for
		/// ConfigurationSectionDesigner.PropertyValidatorsHasValidators.PropertyValidators
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.PropertyValidatorsHasValidators/PropertyValidators.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.PropertyValidatorsHasValidators/PropertyValidators.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Validators", PropertyDisplayNameKey="ConfigurationSectionDesigner.PropertyValidatorsHasValidators/PropertyValidators.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e210e39e-9c8d-4926-b523-78e9f7c3f9c3")]
		public virtual PropertyValidators PropertyValidators
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PropertyValidators)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyValidatorsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyValidatorsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PropertyValidators of a PropertyValidator
		/// <summary>
		/// Gets PropertyValidators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PropertyValidators GetPropertyValidators(PropertyValidator element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyValidatorDomainRoleId) as PropertyValidators;
		}
		
		/// <summary>
		/// Sets PropertyValidators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPropertyValidators(PropertyValidator element, PropertyValidators newPropertyValidators)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyValidatorDomainRoleId, newPropertyValidators);
		}
		#endregion
		#region PropertyValidator domain role code
		
		/// <summary>
		/// PropertyValidator domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyValidatorDomainRoleId = new global::System.Guid(0xb66cd1b8, 0xee71, 0x40b1, 0x82, 0x8a, 0xdb, 0xd4, 0x10, 0x6f, 0xb4, 0x9d);
		
		/// <summary>
		/// DomainRole PropertyValidator
		/// Description for
		/// ConfigurationSectionDesigner.PropertyValidatorsHasValidators.PropertyValidator
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.PropertyValidatorsHasValidators/PropertyValidator.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.PropertyValidatorsHasValidators/PropertyValidator.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PropertyValidators", PropertyDisplayNameKey="ConfigurationSectionDesigner.PropertyValidatorsHasValidators/PropertyValidator.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b66cd1b8-ee71-40b1-828a-dbd4106fb49d")]
		public virtual PropertyValidator PropertyValidator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PropertyValidator)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyValidatorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyValidatorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Validators of a PropertyValidators
		/// <summary>
		/// Gets a list of Validators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<PropertyValidator> GetValidators(PropertyValidators element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<PropertyValidator>, PropertyValidator>(element, PropertyValidatorsDomainRoleId);
		}
		#endregion
		#region PropertyValidators link accessor
		/// <summary>
		/// Get the list of PropertyValidatorsHasValidators links to a PropertyValidators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators> GetLinksToValidators ( global::ConfigurationSectionDesigner.PropertyValidators propertyValidatorsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators>(propertyValidatorsInstance, global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators.PropertyValidatorsDomainRoleId);
		}
		#endregion
		#region PropertyValidator link accessor
		/// <summary>
		/// Get the PropertyValidatorsHasValidators link to a PropertyValidator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators GetLinkToPropertyValidators (global::ConfigurationSectionDesigner.PropertyValidator propertyValidatorInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators>(propertyValidatorInstance, global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators.PropertyValidatorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PropertyValidator not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PropertyValidatorsHasValidators instance accessors
		
		/// <summary>
		/// Get any PropertyValidatorsHasValidators links between a given PropertyValidators and a PropertyValidator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators> GetLinks( global::ConfigurationSectionDesigner.PropertyValidators source, global::ConfigurationSectionDesigner.PropertyValidator target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators>(source, global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators.PropertyValidatorsDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators link in links )
			{
				if ( target.Equals(link.PropertyValidator) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PropertyValidatorsHasValidators link between a given PropertyValidatorsand a PropertyValidator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators GetLink( global::ConfigurationSectionDesigner.PropertyValidators source, global::ConfigurationSectionDesigner.PropertyValidator target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators>(source, global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators.PropertyValidatorsDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.PropertyValidatorsHasValidators link in links )
			{
				if ( target.Equals(link.PropertyValidator) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship ConfigurationPropertyHasPropertyValidator
	/// Description for
	/// ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("4425730d-db79-493a-bd8e-d366b21149e0")]
	public partial class ConfigurationPropertyHasPropertyValidator : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConfigurationPropertyHasPropertyValidator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4425730d, 0xdb79, 0x493a, 0xbd, 0x8e, 0xd3, 0x66, 0xb2, 0x11, 0x49, 0xe0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConfigurationPropertyHasPropertyValidator link in the same Partition as the given ConfigurationProperty
		/// </summary>
		/// <param name="source">ConfigurationProperty to use as the source of the relationship.</param>
		/// <param name="target">PropertyValidator to use as the target of the relationship.</param>
		public ConfigurationPropertyHasPropertyValidator(ConfigurationProperty source, PropertyValidator target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConfigurationPropertyHasPropertyValidator.ConfigurationPropertyDomainRoleId, source), new DslModeling::RoleAssignment(ConfigurationPropertyHasPropertyValidator.PropertyValidatorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationPropertyHasPropertyValidator(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationPropertyHasPropertyValidator(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationPropertyHasPropertyValidator(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationPropertyHasPropertyValidator(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConfigurationProperty domain role code
		
		/// <summary>
		/// ConfigurationProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationPropertyDomainRoleId = new global::System.Guid(0x13383714, 0x1aec, 0x4a69, 0xac, 0xc3, 0x52, 0xfc, 0xe0, 0xa3, 0xb2, 0xd3);
		
		/// <summary>
		/// DomainRole ConfigurationProperty
		/// The validator used to validate this property. Add validators by viewing the
		/// 'Configuration Section Explorer' explorer tab and locating the Property
		/// Validators item. Right-click that item to add.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator/ConfigurationProperty.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator/ConfigurationProperty.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator/ConfigurationProperty.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Validator", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator/ConfigurationProperty.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("13383714-1aec-4a69-acc3-52fce0a3b2d3")]
		public virtual ConfigurationProperty ConfigurationProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferringConfigurationProperties of a PropertyValidator
		/// <summary>
		/// Gets a list of ReferringConfigurationProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConfigurationProperty> GetReferringConfigurationProperties(PropertyValidator element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ConfigurationProperty>, ConfigurationProperty>(element, PropertyValidatorDomainRoleId);
		}
		#endregion
		#region PropertyValidator domain role code
		
		/// <summary>
		/// PropertyValidator domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyValidatorDomainRoleId = new global::System.Guid(0x6c7be187, 0x0f7b, 0x442c, 0x86, 0xaa, 0x7f, 0xb3, 0x19, 0xeb, 0xe5, 0xc3);
		
		/// <summary>
		/// DomainRole PropertyValidator
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator.PropertyValidator
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator/PropertyValidator.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator/PropertyValidator.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReferringConfigurationProperties", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator/PropertyValidator.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6c7be187-0f7b-442c-86aa-7fb319ebe5c3")]
		public virtual PropertyValidator PropertyValidator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PropertyValidator)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyValidatorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyValidatorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Validator of a ConfigurationProperty
		/// <summary>
		/// Gets Validator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PropertyValidator GetValidator(ConfigurationProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConfigurationPropertyDomainRoleId) as PropertyValidator;
		}
		
		/// <summary>
		/// Sets Validator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValidator(ConfigurationProperty element, PropertyValidator newPropertyValidator)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConfigurationPropertyDomainRoleId, newPropertyValidator);
		}
		#endregion
		#region ConfigurationProperty link accessor
		/// <summary>
		/// Get the ConfigurationPropertyHasPropertyValidator link to a ConfigurationProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator GetLinkToValidator (global::ConfigurationSectionDesigner.ConfigurationProperty configurationPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator>(configurationPropertyInstance, global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator.ConfigurationPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConfigurationProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PropertyValidator link accessor
		/// <summary>
		/// Get the list of ConfigurationPropertyHasPropertyValidator links to a PropertyValidator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator> GetLinksToReferringConfigurationProperties ( global::ConfigurationSectionDesigner.PropertyValidator propertyValidatorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator>(propertyValidatorInstance, global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator.PropertyValidatorDomainRoleId);
		}
		#endregion
		#region ConfigurationPropertyHasPropertyValidator instance accessors
		
		/// <summary>
		/// Get any ConfigurationPropertyHasPropertyValidator links between a given ConfigurationProperty and a PropertyValidator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator> GetLinks( global::ConfigurationSectionDesigner.ConfigurationProperty source, global::ConfigurationSectionDesigner.PropertyValidator target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator>(source, global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator.ConfigurationPropertyDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator link in links )
			{
				if ( target.Equals(link.PropertyValidator) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConfigurationPropertyHasPropertyValidator link between a given ConfigurationPropertyand a PropertyValidator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator GetLink( global::ConfigurationSectionDesigner.ConfigurationProperty source, global::ConfigurationSectionDesigner.PropertyValidator target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator>(source, global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator.ConfigurationPropertyDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationPropertyHasPropertyValidator link in links )
			{
				if ( target.Equals(link.PropertyValidator) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship ConfigurationSectionModelHasCustomTypeConverters
	/// Description for
	/// ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f6d4e7ff-ce6c-4bef-8942-a870622bb8ae")]
	public partial class ConfigurationSectionModelHasCustomTypeConverters : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConfigurationSectionModelHasCustomTypeConverters domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf6d4e7ff, 0xce6c, 0x4bef, 0x89, 0x42, 0xa8, 0x70, 0x62, 0x2b, 0xb8, 0xae);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConfigurationSectionModelHasCustomTypeConverters link in the same Partition as the given ConfigurationSectionModel
		/// </summary>
		/// <param name="source">ConfigurationSectionModel to use as the source of the relationship.</param>
		/// <param name="target">CustomTypeConverter to use as the target of the relationship.</param>
		public ConfigurationSectionModelHasCustomTypeConverters(ConfigurationSectionModel source, CustomTypeConverter target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConfigurationSectionModelHasCustomTypeConverters.ConfigurationSectionModelDomainRoleId, source), new DslModeling::RoleAssignment(ConfigurationSectionModelHasCustomTypeConverters.CustomTypeConverterDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationSectionModelHasCustomTypeConverters(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationSectionModelHasCustomTypeConverters(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationSectionModelHasCustomTypeConverters(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationSectionModelHasCustomTypeConverters(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConfigurationSectionModel domain role code
		
		/// <summary>
		/// ConfigurationSectionModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationSectionModelDomainRoleId = new global::System.Guid(0x362e12a7, 0x349d, 0x4ac8, 0xa7, 0xa9, 0xca, 0x61, 0x6a, 0x4e, 0x7b, 0x59);
		
		/// <summary>
		/// DomainRole ConfigurationSectionModel
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters.ConfigurationSectionModel
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters/ConfigurationSectionModel.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters/ConfigurationSectionModel.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CustomTypeConverters", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters/ConfigurationSectionModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("362e12a7-349d-4ac8-a7a9-ca616a4e7b59")]
		public virtual ConfigurationSectionModel ConfigurationSectionModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationSectionModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationSectionModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationSectionModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConfigurationSectionModel of a CustomTypeConverter
		/// <summary>
		/// Gets ConfigurationSectionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConfigurationSectionModel GetConfigurationSectionModel(CustomTypeConverter element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CustomTypeConverterDomainRoleId) as ConfigurationSectionModel;
		}
		
		/// <summary>
		/// Sets ConfigurationSectionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConfigurationSectionModel(CustomTypeConverter element, ConfigurationSectionModel newConfigurationSectionModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CustomTypeConverterDomainRoleId, newConfigurationSectionModel);
		}
		#endregion
		#region CustomTypeConverter domain role code
		
		/// <summary>
		/// CustomTypeConverter domain role Id.
		/// </summary>
		public static readonly global::System.Guid CustomTypeConverterDomainRoleId = new global::System.Guid(0x342d46c1, 0x792f, 0x4603, 0x82, 0x84, 0x29, 0x69, 0x05, 0x67, 0xa6, 0x36);
		
		/// <summary>
		/// DomainRole CustomTypeConverter
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters.CustomTypeConverter
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters/CustomTypeConverter.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters/CustomTypeConverter.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConfigurationSectionModel", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters/CustomTypeConverter.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("342d46c1-792f-4603-8284-29690567a636")]
		public virtual CustomTypeConverter CustomTypeConverter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CustomTypeConverter)DslModeling::DomainRoleInfo.GetRolePlayer(this, CustomTypeConverterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CustomTypeConverterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CustomTypeConverters of a ConfigurationSectionModel
		/// <summary>
		/// Gets a list of CustomTypeConverters.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CustomTypeConverter> GetCustomTypeConverters(ConfigurationSectionModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<CustomTypeConverter>, CustomTypeConverter>(element, ConfigurationSectionModelDomainRoleId);
		}
		#endregion
		#region ConfigurationSectionModel link accessor
		/// <summary>
		/// Get the list of ConfigurationSectionModelHasCustomTypeConverters links to a ConfigurationSectionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters> GetLinksToCustomTypeConverters ( global::ConfigurationSectionDesigner.ConfigurationSectionModel configurationSectionModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters>(configurationSectionModelInstance, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters.ConfigurationSectionModelDomainRoleId);
		}
		#endregion
		#region CustomTypeConverter link accessor
		/// <summary>
		/// Get the ConfigurationSectionModelHasCustomTypeConverters link to a CustomTypeConverter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters GetLinkToConfigurationSectionModel (global::ConfigurationSectionDesigner.CustomTypeConverter customTypeConverterInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters>(customTypeConverterInstance, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters.CustomTypeConverterDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CustomTypeConverter not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConfigurationSectionModelHasCustomTypeConverters instance accessors
		
		/// <summary>
		/// Get any ConfigurationSectionModelHasCustomTypeConverters links between a given ConfigurationSectionModel and a CustomTypeConverter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters> GetLinks( global::ConfigurationSectionDesigner.ConfigurationSectionModel source, global::ConfigurationSectionDesigner.CustomTypeConverter target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters>(source, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters.ConfigurationSectionModelDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters link in links )
			{
				if ( target.Equals(link.CustomTypeConverter) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConfigurationSectionModelHasCustomTypeConverters link between a given ConfigurationSectionModeland a CustomTypeConverter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters GetLink( global::ConfigurationSectionDesigner.ConfigurationSectionModel source, global::ConfigurationSectionDesigner.CustomTypeConverter target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters>(source, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters.ConfigurationSectionModelDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationSectionModelHasCustomTypeConverters link in links )
			{
				if ( target.Equals(link.CustomTypeConverter) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship ConfigurationPropertyReferencesCustomTypeConverter
	/// Description for
	/// ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d77d39bf-afcb-4612-923c-f7513617f76e")]
	public partial class ConfigurationPropertyReferencesCustomTypeConverter : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConfigurationPropertyReferencesCustomTypeConverter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd77d39bf, 0xafcb, 0x4612, 0x92, 0x3c, 0xf7, 0x51, 0x36, 0x17, 0xf7, 0x6e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConfigurationPropertyReferencesCustomTypeConverter link in the same Partition as the given ConfigurationProperty
		/// </summary>
		/// <param name="source">ConfigurationProperty to use as the source of the relationship.</param>
		/// <param name="target">CustomTypeConverter to use as the target of the relationship.</param>
		public ConfigurationPropertyReferencesCustomTypeConverter(ConfigurationProperty source, CustomTypeConverter target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConfigurationPropertyReferencesCustomTypeConverter.ConfigurationPropertyDomainRoleId, source), new DslModeling::RoleAssignment(ConfigurationPropertyReferencesCustomTypeConverter.CustomTypeConverterDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationPropertyReferencesCustomTypeConverter(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationPropertyReferencesCustomTypeConverter(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationPropertyReferencesCustomTypeConverter(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationPropertyReferencesCustomTypeConverter(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConfigurationProperty domain role code
		
		/// <summary>
		/// ConfigurationProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationPropertyDomainRoleId = new global::System.Guid(0xaebf2438, 0xfdc3, 0x4318, 0x89, 0x44, 0x88, 0xe5, 0x0d, 0x51, 0xf3, 0x7e);
		
		/// <summary>
		/// DomainRole ConfigurationProperty
		/// The custom type converter to use if the TypeConverter property is set to Custom
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter/ConfigurationProperty.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter/ConfigurationProperty.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter/ConfigurationProperty.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CustomTypeConverter", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter/ConfigurationProperty.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("aebf2438-fdc3-4318-8944-88e50d51f37e")]
		public virtual ConfigurationProperty ConfigurationProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConfigurationProperties of a CustomTypeConverter
		/// <summary>
		/// Gets a list of ConfigurationProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConfigurationProperty> GetConfigurationProperties(CustomTypeConverter element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ConfigurationProperty>, ConfigurationProperty>(element, CustomTypeConverterDomainRoleId);
		}
		#endregion
		#region CustomTypeConverter domain role code
		
		/// <summary>
		/// CustomTypeConverter domain role Id.
		/// </summary>
		public static readonly global::System.Guid CustomTypeConverterDomainRoleId = new global::System.Guid(0xa07d8f5c, 0x248e, 0x434a, 0xba, 0xb4, 0x20, 0xe5, 0x16, 0x27, 0xc1, 0x7d);
		
		/// <summary>
		/// DomainRole CustomTypeConverter
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter.CustomTypeConverter
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter/CustomTypeConverter.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter/CustomTypeConverter.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConfigurationProperties", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter/CustomTypeConverter.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a07d8f5c-248e-434a-bab4-20e51627c17d")]
		public virtual CustomTypeConverter CustomTypeConverter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CustomTypeConverter)DslModeling::DomainRoleInfo.GetRolePlayer(this, CustomTypeConverterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CustomTypeConverterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CustomTypeConverter of a ConfigurationProperty
		/// <summary>
		/// Gets CustomTypeConverter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CustomTypeConverter GetCustomTypeConverter(ConfigurationProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConfigurationPropertyDomainRoleId) as CustomTypeConverter;
		}
		
		/// <summary>
		/// Sets CustomTypeConverter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCustomTypeConverter(ConfigurationProperty element, CustomTypeConverter newCustomTypeConverter)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConfigurationPropertyDomainRoleId, newCustomTypeConverter);
		}
		#endregion
		#region ConfigurationProperty link accessor
		/// <summary>
		/// Get the ConfigurationPropertyReferencesCustomTypeConverter link to a ConfigurationProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter GetLinkToCustomTypeConverter (global::ConfigurationSectionDesigner.ConfigurationProperty configurationPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter>(configurationPropertyInstance, global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter.ConfigurationPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConfigurationProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CustomTypeConverter link accessor
		/// <summary>
		/// Get the list of ConfigurationPropertyReferencesCustomTypeConverter links to a CustomTypeConverter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter> GetLinksToConfigurationProperties ( global::ConfigurationSectionDesigner.CustomTypeConverter customTypeConverterInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter>(customTypeConverterInstance, global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter.CustomTypeConverterDomainRoleId);
		}
		#endregion
		#region ConfigurationPropertyReferencesCustomTypeConverter instance accessors
		
		/// <summary>
		/// Get any ConfigurationPropertyReferencesCustomTypeConverter links between a given ConfigurationProperty and a CustomTypeConverter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter> GetLinks( global::ConfigurationSectionDesigner.ConfigurationProperty source, global::ConfigurationSectionDesigner.CustomTypeConverter target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter>(source, global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter.ConfigurationPropertyDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter link in links )
			{
				if ( target.Equals(link.CustomTypeConverter) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConfigurationPropertyReferencesCustomTypeConverter link between a given ConfigurationPropertyand a CustomTypeConverter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter GetLink( global::ConfigurationSectionDesigner.ConfigurationProperty source, global::ConfigurationSectionDesigner.CustomTypeConverter target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter>(source, global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter.ConfigurationPropertyDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationPropertyReferencesCustomTypeConverter link in links )
			{
				if ( target.Equals(link.CustomTypeConverter) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship CustomTypeConverterHasType
	/// Description for ConfigurationSectionDesigner.CustomTypeConverterHasType
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.CustomTypeConverterHasType.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.CustomTypeConverterHasType.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8a5af61d-5d76-47b2-9d2c-c625702492c2")]
	public partial class CustomTypeConverterHasType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CustomTypeConverterHasType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8a5af61d, 0x5d76, 0x47b2, 0x9d, 0x2c, 0xc6, 0x25, 0x70, 0x24, 0x92, 0xc2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CustomTypeConverterHasType link in the same Partition as the given CustomTypeConverter
		/// </summary>
		/// <param name="source">CustomTypeConverter to use as the source of the relationship.</param>
		/// <param name="target">TypeBase to use as the target of the relationship.</param>
		public CustomTypeConverterHasType(CustomTypeConverter source, TypeBase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CustomTypeConverterHasType.CustomTypeConverterDomainRoleId, source), new DslModeling::RoleAssignment(CustomTypeConverterHasType.TypeBaseDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CustomTypeConverterHasType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CustomTypeConverterHasType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CustomTypeConverterHasType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CustomTypeConverterHasType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CustomTypeConverter domain role code
		
		/// <summary>
		/// CustomTypeConverter domain role Id.
		/// </summary>
		public static readonly global::System.Guid CustomTypeConverterDomainRoleId = new global::System.Guid(0x7021ddca, 0xb96a, 0x4c47, 0xb2, 0x4a, 0x62, 0x01, 0xff, 0x10, 0x12, 0x72);
		
		/// <summary>
		/// DomainRole CustomTypeConverter
		/// The type this converter converts to and from
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.CustomTypeConverterHasType/CustomTypeConverter.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.CustomTypeConverterHasType/CustomTypeConverter.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Type", PropertyDisplayNameKey="ConfigurationSectionDesigner.CustomTypeConverterHasType/CustomTypeConverter.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7021ddca-b96a-4c47-b24a-6201ff101272")]
		public virtual CustomTypeConverter CustomTypeConverter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CustomTypeConverter)DslModeling::DomainRoleInfo.GetRolePlayer(this, CustomTypeConverterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CustomTypeConverterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferringCustomTypeConverters of a TypeBase
		/// <summary>
		/// Gets a list of ReferringCustomTypeConverters.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CustomTypeConverter> GetReferringCustomTypeConverters(TypeBase element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<CustomTypeConverter>, CustomTypeConverter>(element, TypeBaseDomainRoleId);
		}
		#endregion
		#region TypeBase domain role code
		
		/// <summary>
		/// TypeBase domain role Id.
		/// </summary>
		public static readonly global::System.Guid TypeBaseDomainRoleId = new global::System.Guid(0x97181424, 0xd129, 0x4f7d, 0xbe, 0xea, 0x7d, 0xfa, 0x67, 0xd6, 0xdf, 0x35);
		
		/// <summary>
		/// DomainRole TypeBase
		/// Description for ConfigurationSectionDesigner.CustomTypeConverterHasType.TypeBase
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.CustomTypeConverterHasType/TypeBase.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.CustomTypeConverterHasType/TypeBase.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReferringCustomTypeConverters", PropertyDisplayNameKey="ConfigurationSectionDesigner.CustomTypeConverterHasType/TypeBase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("97181424-d129-4f7d-beea-7dfa67d6df35")]
		public virtual TypeBase TypeBase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TypeBase)DslModeling::DomainRoleInfo.GetRolePlayer(this, TypeBaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TypeBaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Type of a CustomTypeConverter
		/// <summary>
		/// Gets Type.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TypeBase GetType(CustomTypeConverter element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CustomTypeConverterDomainRoleId) as TypeBase;
		}
		
		/// <summary>
		/// Sets Type.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetType(CustomTypeConverter element, TypeBase newTypeBase)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CustomTypeConverterDomainRoleId, newTypeBase);
		}
		#endregion
		#region CustomTypeConverter link accessor
		/// <summary>
		/// Get the CustomTypeConverterHasType link to a CustomTypeConverter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.CustomTypeConverterHasType GetLinkToType (global::ConfigurationSectionDesigner.CustomTypeConverter customTypeConverterInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.CustomTypeConverterHasType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.CustomTypeConverterHasType>(customTypeConverterInstance, global::ConfigurationSectionDesigner.CustomTypeConverterHasType.CustomTypeConverterDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CustomTypeConverter not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TypeBase link accessor
		/// <summary>
		/// Get the list of CustomTypeConverterHasType links to a TypeBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.CustomTypeConverterHasType> GetLinksToReferringCustomTypeConverters ( global::ConfigurationSectionDesigner.TypeBase typeBaseInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.CustomTypeConverterHasType>(typeBaseInstance, global::ConfigurationSectionDesigner.CustomTypeConverterHasType.TypeBaseDomainRoleId);
		}
		#endregion
		#region CustomTypeConverterHasType instance accessors
		
		/// <summary>
		/// Get any CustomTypeConverterHasType links between a given CustomTypeConverter and a TypeBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.CustomTypeConverterHasType> GetLinks( global::ConfigurationSectionDesigner.CustomTypeConverter source, global::ConfigurationSectionDesigner.TypeBase target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.CustomTypeConverterHasType> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.CustomTypeConverterHasType>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.CustomTypeConverterHasType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.CustomTypeConverterHasType>(source, global::ConfigurationSectionDesigner.CustomTypeConverterHasType.CustomTypeConverterDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.CustomTypeConverterHasType link in links )
			{
				if ( target.Equals(link.TypeBase) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CustomTypeConverterHasType link between a given CustomTypeConverterand a TypeBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.CustomTypeConverterHasType GetLink( global::ConfigurationSectionDesigner.CustomTypeConverter source, global::ConfigurationSectionDesigner.TypeBase target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.CustomTypeConverterHasType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.CustomTypeConverterHasType>(source, global::ConfigurationSectionDesigner.CustomTypeConverterHasType.CustomTypeConverterDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.CustomTypeConverterHasType link in links )
			{
				if ( target.Equals(link.TypeBase) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship BaseConfigurationTypeHasBaseClass
	/// Description for ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("1baa42c8-dd15-4029-9ba7-79ec811a0f1a")]
	public partial class BaseConfigurationTypeHasBaseClass : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BaseConfigurationTypeHasBaseClass domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1baa42c8, 0xdd15, 0x4029, 0x9b, 0xa7, 0x79, 0xec, 0x81, 0x1a, 0x0f, 0x1a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BaseConfigurationTypeHasBaseClass link in the same Partition as the given BaseConfigurationType
		/// </summary>
		/// <param name="source">BaseConfigurationType to use as the source of the relationship.</param>
		/// <param name="target">BaseConfigurationType to use as the target of the relationship.</param>
		public BaseConfigurationTypeHasBaseClass(BaseConfigurationType source, BaseConfigurationType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BaseConfigurationTypeHasBaseClass.SourceBaseConfigurationTypeDomainRoleId, source), new DslModeling::RoleAssignment(BaseConfigurationTypeHasBaseClass.TargetBaseConfigurationTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BaseConfigurationTypeHasBaseClass(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BaseConfigurationTypeHasBaseClass(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BaseConfigurationTypeHasBaseClass(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BaseConfigurationTypeHasBaseClass(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceBaseConfigurationType domain role code
		
		/// <summary>
		/// SourceBaseConfigurationType domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceBaseConfigurationTypeDomainRoleId = new global::System.Guid(0x4373f92f, 0x6e61, 0x4830, 0xac, 0x95, 0x99, 0x33, 0x0c, 0xbb, 0x22, 0x25);
		
		/// <summary>
		/// DomainRole SourceBaseConfigurationType
		/// Base class of this type
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass/SourceBaseConfigurationType.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass/SourceBaseConfigurationType.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass/SourceBaseConfigurationType.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "BaseClass", PropertyDisplayNameKey="ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass/SourceBaseConfigurationType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4373f92f-6e61-4830-ac95-99330cbb2225")]
		public virtual BaseConfigurationType SourceBaseConfigurationType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BaseConfigurationType)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceBaseConfigurationTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceBaseConfigurationTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SuperClassOf of a BaseConfigurationType
		/// <summary>
		/// Gets a list of SuperClassOf.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<BaseConfigurationType> GetSuperClassOf(BaseConfigurationType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<BaseConfigurationType>, BaseConfigurationType>(element, TargetBaseConfigurationTypeDomainRoleId);
		}
		#endregion
		#region TargetBaseConfigurationType domain role code
		
		/// <summary>
		/// TargetBaseConfigurationType domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetBaseConfigurationTypeDomainRoleId = new global::System.Guid(0xf706d85d, 0x7190, 0x41aa, 0x82, 0x0c, 0x6b, 0x8d, 0x40, 0x72, 0x48, 0x33);
		
		/// <summary>
		/// DomainRole TargetBaseConfigurationType
		/// Description for
		/// ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass.TargetBaseConfigurationType
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass/TargetBaseConfigurationType.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass/TargetBaseConfigurationType.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SuperClassOf", PropertyDisplayNameKey="ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass/TargetBaseConfigurationType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f706d85d-7190-41aa-820c-6b8d40724833")]
		public virtual BaseConfigurationType TargetBaseConfigurationType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BaseConfigurationType)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetBaseConfigurationTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetBaseConfigurationTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BaseClass of a BaseConfigurationType
		/// <summary>
		/// Gets BaseClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static BaseConfigurationType GetBaseClass(BaseConfigurationType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceBaseConfigurationTypeDomainRoleId) as BaseConfigurationType;
		}
		
		/// <summary>
		/// Sets BaseClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBaseClass(BaseConfigurationType element, BaseConfigurationType newTargetBaseConfigurationType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceBaseConfigurationTypeDomainRoleId, newTargetBaseConfigurationType);
		}
		#endregion
		#region SourceBaseConfigurationType link accessor
		/// <summary>
		/// Get the BaseConfigurationTypeHasBaseClass link to a BaseConfigurationType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass GetLinkToBaseClass (global::ConfigurationSectionDesigner.BaseConfigurationType sourceBaseConfigurationTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass>(sourceBaseConfigurationTypeInstance, global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass.SourceBaseConfigurationTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SourceBaseConfigurationType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetBaseConfigurationType link accessor
		/// <summary>
		/// Get the list of BaseConfigurationTypeHasBaseClass links to a BaseConfigurationType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass> GetLinksToSuperClassOf ( global::ConfigurationSectionDesigner.BaseConfigurationType targetBaseConfigurationTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass>(targetBaseConfigurationTypeInstance, global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass.TargetBaseConfigurationTypeDomainRoleId);
		}
		#endregion
		#region BaseConfigurationTypeHasBaseClass instance accessors
		
		/// <summary>
		/// Get any BaseConfigurationTypeHasBaseClass links between a given BaseConfigurationType and a BaseConfigurationType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass> GetLinks( global::ConfigurationSectionDesigner.BaseConfigurationType source, global::ConfigurationSectionDesigner.BaseConfigurationType target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass>(source, global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass.SourceBaseConfigurationTypeDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass link in links )
			{
				if ( target.Equals(link.TargetBaseConfigurationType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one BaseConfigurationTypeHasBaseClass link between a given BaseConfigurationTypeand a BaseConfigurationType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass GetLink( global::ConfigurationSectionDesigner.BaseConfigurationType source, global::ConfigurationSectionDesigner.BaseConfigurationType target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass>(source, global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass.SourceBaseConfigurationTypeDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.BaseConfigurationTypeHasBaseClass link in links )
			{
				if ( target.Equals(link.TargetBaseConfigurationType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship AttributeHasParameters
	/// Description for ConfigurationSectionDesigner.AttributeHasParameters
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.AttributeHasParameters.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.AttributeHasParameters.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("44e84722-2ff6-48a1-90dc-803dfa50cca5")]
	public partial class AttributeHasParameters : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AttributeHasParameters domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x44e84722, 0x2ff6, 0x48a1, 0x90, 0xdc, 0x80, 0x3d, 0xfa, 0x50, 0xcc, 0xa5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AttributeHasParameters link in the same Partition as the given Attribute
		/// </summary>
		/// <param name="source">Attribute to use as the source of the relationship.</param>
		/// <param name="target">AttributeParameter to use as the target of the relationship.</param>
		public AttributeHasParameters(Attribute source, AttributeParameter target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AttributeHasParameters.AttributeDomainRoleId, source), new DslModeling::RoleAssignment(AttributeHasParameters.AttributeParameterDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AttributeHasParameters(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AttributeHasParameters(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AttributeHasParameters(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AttributeHasParameters(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Attribute domain role code
		
		/// <summary>
		/// Attribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeDomainRoleId = new global::System.Guid(0x713c1da5, 0x5c5a, 0x4352, 0xa1, 0x0e, 0x3e, 0x72, 0xd4, 0xf0, 0xa4, 0xb3);
		
		/// <summary>
		/// DomainRole Attribute
		/// The list of parameters for this attribute.
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.AttributeHasParameters/Attribute.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.AttributeHasParameters/Attribute.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Parameters", PropertyDisplayNameKey="ConfigurationSectionDesigner.AttributeHasParameters/Attribute.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("713c1da5-5c5a-4352-a10e-3e72d4f0a4b3")]
		public virtual Attribute Attribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Attribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attribute of a AttributeParameter
		/// <summary>
		/// Gets Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Attribute GetAttribute(AttributeParameter element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeParameterDomainRoleId) as Attribute;
		}
		
		/// <summary>
		/// Sets Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAttribute(AttributeParameter element, Attribute newAttribute)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeParameterDomainRoleId, newAttribute);
		}
		#endregion
		#region AttributeParameter domain role code
		
		/// <summary>
		/// AttributeParameter domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeParameterDomainRoleId = new global::System.Guid(0xbf506f51, 0xc08d, 0x43fb, 0xb3, 0x00, 0x31, 0x82, 0xb4, 0x18, 0x4e, 0x74);
		
		/// <summary>
		/// DomainRole AttributeParameter
		/// Description for
		/// ConfigurationSectionDesigner.AttributeHasParameters.AttributeParameter
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.AttributeHasParameters/AttributeParameter.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.AttributeHasParameters/AttributeParameter.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Attribute", PropertyDisplayNameKey="ConfigurationSectionDesigner.AttributeHasParameters/AttributeParameter.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("bf506f51-c08d-43fb-b300-3182b4184e74")]
		public virtual AttributeParameter AttributeParameter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AttributeParameter)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeParameterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeParameterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parameters of a Attribute
		/// <summary>
		/// Gets a list of Parameters.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AttributeParameter> GetParameters(Attribute element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AttributeParameter>, AttributeParameter>(element, AttributeDomainRoleId);
		}
		#endregion
		#region Attribute link accessor
		/// <summary>
		/// Get the list of AttributeHasParameters links to a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.AttributeHasParameters> GetLinksToParameters ( global::ConfigurationSectionDesigner.Attribute attributeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.AttributeHasParameters>(attributeInstance, global::ConfigurationSectionDesigner.AttributeHasParameters.AttributeDomainRoleId);
		}
		#endregion
		#region AttributeParameter link accessor
		/// <summary>
		/// Get the AttributeHasParameters link to a AttributeParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.AttributeHasParameters GetLinkToAttribute (global::ConfigurationSectionDesigner.AttributeParameter attributeParameterInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.AttributeHasParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.AttributeHasParameters>(attributeParameterInstance, global::ConfigurationSectionDesigner.AttributeHasParameters.AttributeParameterDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AttributeParameter not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AttributeHasParameters instance accessors
		
		/// <summary>
		/// Get any AttributeHasParameters links between a given Attribute and a AttributeParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.AttributeHasParameters> GetLinks( global::ConfigurationSectionDesigner.Attribute source, global::ConfigurationSectionDesigner.AttributeParameter target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.AttributeHasParameters> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.AttributeHasParameters>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.AttributeHasParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.AttributeHasParameters>(source, global::ConfigurationSectionDesigner.AttributeHasParameters.AttributeDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.AttributeHasParameters link in links )
			{
				if ( target.Equals(link.AttributeParameter) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AttributeHasParameters link between a given Attributeand a AttributeParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.AttributeHasParameters GetLink( global::ConfigurationSectionDesigner.Attribute source, global::ConfigurationSectionDesigner.AttributeParameter target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.AttributeHasParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.AttributeHasParameters>(source, global::ConfigurationSectionDesigner.AttributeHasParameters.AttributeDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.AttributeHasParameters link in links )
			{
				if ( target.Equals(link.AttributeParameter) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship ConfigurationPropertyHasAttributes
	/// Description for ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e49ba3bf-c523-4e21-85d1-4880fcb17f1f")]
	public partial class ConfigurationPropertyHasAttributes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConfigurationPropertyHasAttributes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe49ba3bf, 0xc523, 0x4e21, 0x85, 0xd1, 0x48, 0x80, 0xfc, 0xb1, 0x7f, 0x1f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConfigurationPropertyHasAttributes link in the same Partition as the given ConfigurationProperty
		/// </summary>
		/// <param name="source">ConfigurationProperty to use as the source of the relationship.</param>
		/// <param name="target">Attribute to use as the target of the relationship.</param>
		public ConfigurationPropertyHasAttributes(ConfigurationProperty source, Attribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConfigurationPropertyHasAttributes.ConfigurationPropertyDomainRoleId, source), new DslModeling::RoleAssignment(ConfigurationPropertyHasAttributes.AttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationPropertyHasAttributes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationPropertyHasAttributes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationPropertyHasAttributes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationPropertyHasAttributes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConfigurationProperty domain role code
		
		/// <summary>
		/// ConfigurationProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationPropertyDomainRoleId = new global::System.Guid(0x6b1b4fb9, 0xe6d5, 0x4c65, 0xaf, 0x2e, 0xc9, 0xb5, 0xe7, 0x42, 0x33, 0xe2);
		
		/// <summary>
		/// DomainRole ConfigurationProperty
		/// Adds custom Attributes to the property
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes/ConfigurationProperty.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes/ConfigurationProperty.Category", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes/ConfigurationProperty.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Attributes", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes/ConfigurationProperty.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6b1b4fb9-e6d5-4c65-af2e-c9b5e74233e2")]
		public virtual ConfigurationProperty ConfigurationProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConfigurationProperty of a Attribute
		/// <summary>
		/// Gets ConfigurationProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConfigurationProperty GetConfigurationProperty(Attribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeDomainRoleId) as ConfigurationProperty;
		}
		
		/// <summary>
		/// Sets ConfigurationProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConfigurationProperty(Attribute element, ConfigurationProperty newConfigurationProperty)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeDomainRoleId, newConfigurationProperty);
		}
		#endregion
		#region Attribute domain role code
		
		/// <summary>
		/// Attribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeDomainRoleId = new global::System.Guid(0x890cf041, 0x32e8, 0x4db9, 0x86, 0x02, 0xbc, 0xfc, 0x98, 0xbe, 0xab, 0x11);
		
		/// <summary>
		/// DomainRole Attribute
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes.Attribute
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes/Attribute.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes/Attribute.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConfigurationProperty", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes/Attribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("890cf041-32e8-4db9-8602-bcfc98beab11")]
		public virtual Attribute Attribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Attribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attributes of a ConfigurationProperty
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Attribute> GetAttributes(ConfigurationProperty element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Attribute>, Attribute>(element, ConfigurationPropertyDomainRoleId);
		}
		#endregion
		#region ConfigurationProperty link accessor
		/// <summary>
		/// Get the list of ConfigurationPropertyHasAttributes links to a ConfigurationProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes> GetLinksToAttributes ( global::ConfigurationSectionDesigner.ConfigurationProperty configurationPropertyInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes>(configurationPropertyInstance, global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes.ConfigurationPropertyDomainRoleId);
		}
		#endregion
		#region Attribute link accessor
		/// <summary>
		/// Get the ConfigurationPropertyHasAttributes link to a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes GetLinkToConfigurationProperty (global::ConfigurationSectionDesigner.Attribute attributeInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes>(attributeInstance, global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes.AttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Attribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConfigurationPropertyHasAttributes instance accessors
		
		/// <summary>
		/// Get any ConfigurationPropertyHasAttributes links between a given ConfigurationProperty and a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes> GetLinks( global::ConfigurationSectionDesigner.ConfigurationProperty source, global::ConfigurationSectionDesigner.Attribute target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes>(source, global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes.ConfigurationPropertyDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConfigurationPropertyHasAttributes link between a given ConfigurationPropertyand a Attribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes GetLink( global::ConfigurationSectionDesigner.ConfigurationProperty source, global::ConfigurationSectionDesigner.Attribute target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes>(source, global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes.ConfigurationPropertyDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationPropertyHasAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship ConfigurationSectionModelHasComments
	/// Description for
	/// ConfigurationSectionDesigner.ConfigurationSectionModelHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasComments.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasComments.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("04d566c5-f5da-4d61-be32-d91f4ad5b1e7")]
	public partial class ConfigurationSectionModelHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConfigurationSectionModelHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x04d566c5, 0xf5da, 0x4d61, 0xbe, 0x32, 0xd9, 0x1f, 0x4a, 0xd5, 0xb1, 0xe7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConfigurationSectionModelHasComments link in the same Partition as the given ConfigurationSectionModel
		/// </summary>
		/// <param name="source">ConfigurationSectionModel to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ConfigurationSectionModelHasComments(ConfigurationSectionModel source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConfigurationSectionModelHasComments.ConfigurationSectionModelDomainRoleId, source), new DslModeling::RoleAssignment(ConfigurationSectionModelHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationSectionModelHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationSectionModelHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConfigurationSectionModelHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConfigurationSectionModelHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConfigurationSectionModel domain role code
		
		/// <summary>
		/// ConfigurationSectionModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationSectionModelDomainRoleId = new global::System.Guid(0x82dd23e8, 0xec76, 0x4558, 0xa5, 0x1e, 0xf1, 0xb3, 0x1c, 0x02, 0xde, 0x6d);
		
		/// <summary>
		/// DomainRole ConfigurationSectionModel
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionModelHasComments.ConfigurationSectionModel
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasComments/ConfigurationSectionModel.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasComments/ConfigurationSectionModel.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationSectionModelHasComments/ConfigurationSectionModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("82dd23e8-ec76-4558-a51e-f1b31c02de6d")]
		public virtual ConfigurationSectionModel ConfigurationSectionModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationSectionModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationSectionModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationSectionModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConfigurationSectionModel of a Comment
		/// <summary>
		/// Gets ConfigurationSectionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConfigurationSectionModel GetConfigurationSectionModel(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as ConfigurationSectionModel;
		}
		
		/// <summary>
		/// Sets ConfigurationSectionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConfigurationSectionModel(Comment element, ConfigurationSectionModel newConfigurationSectionModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newConfigurationSectionModel);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x4bfffecc, 0xbd39, 0x4d9c, 0xb2, 0x2d, 0xff, 0xd0, 0x52, 0x2d, 0x9c, 0x15);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for
		/// ConfigurationSectionDesigner.ConfigurationSectionModelHasComments.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasComments/Comment.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.ConfigurationSectionModelHasComments/Comment.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConfigurationSectionModel", PropertyDisplayNameKey="ConfigurationSectionDesigner.ConfigurationSectionModelHasComments/Comment.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4bfffecc-bd39-4d9c-b22d-ffd0522d9c15")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ConfigurationSectionModel
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ConfigurationSectionModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ConfigurationSectionModelDomainRoleId);
		}
		#endregion
		#region ConfigurationSectionModel link accessor
		/// <summary>
		/// Get the list of ConfigurationSectionModelHasComments links to a ConfigurationSectionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments> GetLinksToComments ( global::ConfigurationSectionDesigner.ConfigurationSectionModel configurationSectionModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments>(configurationSectionModelInstance, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments.ConfigurationSectionModelDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the ConfigurationSectionModelHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments GetLinkToConfigurationSectionModel (global::ConfigurationSectionDesigner.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments>(commentInstance, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConfigurationSectionModelHasComments instance accessors
		
		/// <summary>
		/// Get any ConfigurationSectionModelHasComments links between a given ConfigurationSectionModel and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments> GetLinks( global::ConfigurationSectionDesigner.ConfigurationSectionModel source, global::ConfigurationSectionDesigner.Comment target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments>(source, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments.ConfigurationSectionModelDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConfigurationSectionModelHasComments link between a given ConfigurationSectionModeland a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments GetLink( global::ConfigurationSectionDesigner.ConfigurationSectionModel source, global::ConfigurationSectionDesigner.Comment target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments>(source, global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments.ConfigurationSectionModelDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.ConfigurationSectionModelHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// DomainRelationship CommentsReferenceConfigurationItems
	/// Description for ConfigurationSectionDesigner.CommentsReferenceConfigurationItems
	/// </summary>
	[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.CommentsReferenceConfigurationItems.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ConfigurationSectionDesigner.CommentsReferenceConfigurationItems.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("070e998b-947e-4aec-be77-f88beb8d727b")]
	public partial class CommentsReferenceConfigurationItems : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentsReferenceConfigurationItems domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x070e998b, 0x947e, 0x4aec, 0xbe, 0x77, 0xf8, 0x8b, 0xeb, 0x8d, 0x72, 0x7b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentsReferenceConfigurationItems link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">BaseConfigurationType to use as the target of the relationship.</param>
		public CommentsReferenceConfigurationItems(Comment source, BaseConfigurationType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentsReferenceConfigurationItems.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentsReferenceConfigurationItems.SubjectDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentsReferenceConfigurationItems(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentsReferenceConfigurationItems(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentsReferenceConfigurationItems(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentsReferenceConfigurationItems(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x47585056, 0x4f3c, 0x4d8d, 0xa7, 0x3c, 0x3f, 0xff, 0xf6, 0xa0, 0x93, 0x83);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.CommentsReferenceConfigurationItems/Comment.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.CommentsReferenceConfigurationItems/Comment.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subjects", PropertyDisplayNameKey="ConfigurationSectionDesigner.CommentsReferenceConfigurationItems/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("47585056-4f3c-4d8d-a73c-3ffff6a09383")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a BaseConfigurationType
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(BaseConfigurationType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0xc8b442e7, 0x3005, 0x486f, 0xab, 0x51, 0x67, 0x54, 0x2a, 0x90, 0xfe, 0x9b);
		
		/// <summary>
		/// DomainRole Subject
		/// </summary>
		[DslDesign::DisplayNameResource("ConfigurationSectionDesigner.CommentsReferenceConfigurationItems/Subject.DisplayName", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ConfigurationSectionDesigner.CommentsReferenceConfigurationItems/Subject.Description", typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDomainModel), "ConfigurationSectionDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comments", PropertyDisplayNameKey="ConfigurationSectionDesigner.CommentsReferenceConfigurationItems/Subject.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c8b442e7-3005-486f-ab51-67542a90fe9b")]
		public virtual BaseConfigurationType Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BaseConfigurationType)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subjects of a Comment
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<BaseConfigurationType> GetSubjects(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<BaseConfigurationType>, BaseConfigurationType>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentsReferenceConfigurationItems links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.CommentsReferenceConfigurationItems> GetLinksToSubjects ( global::ConfigurationSectionDesigner.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.CommentsReferenceConfigurationItems>(commentInstance, global::ConfigurationSectionDesigner.CommentsReferenceConfigurationItems.CommentDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of CommentsReferenceConfigurationItems links to a BaseConfigurationType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.CommentsReferenceConfigurationItems> GetLinksToComments ( global::ConfigurationSectionDesigner.BaseConfigurationType subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.CommentsReferenceConfigurationItems>(subjectInstance, global::ConfigurationSectionDesigner.CommentsReferenceConfigurationItems.SubjectDomainRoleId);
		}
		#endregion
		#region CommentsReferenceConfigurationItems instance accessors
		
		/// <summary>
		/// Get any CommentsReferenceConfigurationItems links between a given Comment and a BaseConfigurationType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ConfigurationSectionDesigner.CommentsReferenceConfigurationItems> GetLinks( global::ConfigurationSectionDesigner.Comment source, global::ConfigurationSectionDesigner.BaseConfigurationType target )
		{
			global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.CommentsReferenceConfigurationItems> outLinks = new global::System.Collections.Generic.List<global::ConfigurationSectionDesigner.CommentsReferenceConfigurationItems>();
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.CommentsReferenceConfigurationItems> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.CommentsReferenceConfigurationItems>(source, global::ConfigurationSectionDesigner.CommentsReferenceConfigurationItems.CommentDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.CommentsReferenceConfigurationItems link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentsReferenceConfigurationItems link between a given Commentand a BaseConfigurationType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ConfigurationSectionDesigner.CommentsReferenceConfigurationItems GetLink( global::ConfigurationSectionDesigner.Comment source, global::ConfigurationSectionDesigner.BaseConfigurationType target )
		{
			global::System.Collections.Generic.IList<global::ConfigurationSectionDesigner.CommentsReferenceConfigurationItems> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ConfigurationSectionDesigner.CommentsReferenceConfigurationItems>(source, global::ConfigurationSectionDesigner.CommentsReferenceConfigurationItems.CommentDomainRoleId);
			foreach ( global::ConfigurationSectionDesigner.CommentsReferenceConfigurationItems link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
