
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Drawing.Design;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using VSShellInterop = global::Microsoft.VisualStudio.Shell.Interop;
using VSShell = global::Microsoft.VisualStudio.Shell;
using DslShell = global::Microsoft.VisualStudio.Modeling.Shell;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslModeling = global::Microsoft.VisualStudio.Modeling;

namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// This class implements the VS package that integrates this DSL into Visual Studio.
	/// </summary>
	[VSShell::PackageRegistration(RegisterUsing = VSShell::RegistrationMethod.Assembly, UseManagedResourcesOnly = true, AllowsBackgroundLoading = true)]
	[VSShell::ProvideToolWindow(typeof(ConfigurationSectionDesignerExplorerToolWindow), MultiInstances = false, Style = VSShell::VsDockStyle.Tabbed, Orientation = VSShell::ToolWindowOrientation.Right, Window = "{3AE79031-E1BC-11D0-8F78-00A0C9110057}")]
	[VSShell::ProvideToolWindowVisibility(typeof(ConfigurationSectionDesignerExplorerToolWindow), Constants.ConfigurationSectionDesignerEditorFactoryId)]
	[VSShell::ProvideStaticToolboxGroup("@Configuration Section DesignerToolboxTab;ConfigurationSectionDesigner.Dsl.dll", "ConfigurationSectionDesigner.Configuration Section DesignerToolboxTab")]
	[VSShell::ProvideStaticToolboxItem("ConfigurationSectionDesigner.Configuration Section DesignerToolboxTab",
					"@ConfigurationSectionToolboxItem;ConfigurationSectionDesigner.Dsl.dll", 
					"ConfigurationSectionDesigner.ConfigurationSectionToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"ConfigurationSection", 
					"@ConfigurationSectionToolboxBitmap;ConfigurationSectionDesigner.Dsl.dll", 
					0xff00ff,
					Index = 0)]
	[VSShell::ProvideStaticToolboxItem("ConfigurationSectionDesigner.Configuration Section DesignerToolboxTab",
					"@ConfigurationElementToolboxItem;ConfigurationSectionDesigner.Dsl.dll", 
					"ConfigurationSectionDesigner.ConfigurationElementToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"ConfigurationElement", 
					"@ConfigurationElementToolboxBitmap;ConfigurationSectionDesigner.Dsl.dll", 
					0xff00ff,
					Index = 1)]
	[VSShell::ProvideStaticToolboxItem("ConfigurationSectionDesigner.Configuration Section DesignerToolboxTab",
					"@ConfigurationElementCollectionToolboxItem;ConfigurationSectionDesigner.Dsl.dll", 
					"ConfigurationSectionDesigner.ConfigurationElementCollectionToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"ConfigurationElementCollection", 
					"@ConfigurationElementCollectionToolboxBitmap;ConfigurationSectionDesigner.Dsl.dll", 
					0xff00ff,
					Index = 2)]
	[VSShell::ProvideStaticToolboxItem("ConfigurationSectionDesigner.Configuration Section DesignerToolboxTab",
					"@CollectionItemTypeToolboxItem;ConfigurationSectionDesigner.Dsl.dll", 
					"ConfigurationSectionDesigner.CollectionItemTypeToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"CollectionItemType", 
					"@CollectionItemTypeToolboxBitmap;ConfigurationSectionDesigner.Dsl.dll", 
					0xff00ff,
					Index = 3)]
	[VSShell::ProvideStaticToolboxItem("ConfigurationSectionDesigner.Configuration Section DesignerToolboxTab",
					"@ConfigurationSectionGroupToolboxItem;ConfigurationSectionDesigner.Dsl.dll", 
					"ConfigurationSectionDesigner.ConfigurationSectionGroupToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"ConfigurationSectionGroup", 
					"@ConfigurationSectionGroupToolboxBitmap;ConfigurationSectionDesigner.Dsl.dll", 
					0xff00ff,
					Index = 4)]
	[VSShell::ProvideStaticToolboxItem("ConfigurationSectionDesigner.Configuration Section DesignerToolboxTab",
					"@CommentToolboxItem;ConfigurationSectionDesigner.Dsl.dll", 
					"ConfigurationSectionDesigner.CommentToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"ConnectCommentF1Keyword", 
					"@CommentToolboxBitmap;ConfigurationSectionDesigner.Dsl.dll", 
					0xff00ff,
					Index = 5)]
	[VSShell::ProvideStaticToolboxItem("ConfigurationSectionDesigner.Configuration Section DesignerToolboxTab",
					"@CommentConnectorToolboxItem;ConfigurationSectionDesigner.Dsl.dll", 
					"ConfigurationSectionDesigner.CommentConnectorToolboxItem", 
					"CF_TOOLBOXITEMCONTAINER,CF_TOOLBOXITEMCONTAINER_HASH,CF_TOOLBOXITEMCONTAINER_CONTENTS", 
					"ConnectCommentsReferenceTypesF1Keyword", 
					"@CommentConnectorToolboxBitmap;ConfigurationSectionDesigner.Dsl.dll", 
					0xff00ff,
					Index = 6)]
	[VSShell::ProvideEditorFactory(typeof(ConfigurationSectionDesignerEditorFactory), 103, TrustLevel = VSShellInterop::__VSEDITORTRUSTLEVEL.ETL_AlwaysTrusted)]
	[VSShell::ProvideEditorExtension(typeof(ConfigurationSectionDesignerEditorFactory), "." + Constants.DesignerFileExtension, 50)]
	[VSShell::ProvideEditorLogicalView(typeof(ConfigurationSectionDesignerEditorFactory), "{7651A702-06E5-11D1-8EBD-00A0C90F26EA}")] // Designer logical view GUID i.e. VSConstants.LOGVIEWID_Designer
	[DslShell::ProvideRelatedFile("." + Constants.DesignerFileExtension, Constants.DefaultDiagramExtension,
		ProjectSystem = DslShell::ProvideRelatedFileAttribute.CSharpProjectGuid,
		FileOptions = DslShell::RelatedFileType.FileName)]
	[DslShell::ProvideRelatedFile("." + Constants.DesignerFileExtension, Constants.DefaultDiagramExtension,
		ProjectSystem = DslShell::ProvideRelatedFileAttribute.VisualBasicProjectGuid,
		FileOptions = DslShell::RelatedFileType.FileName)]
	[DslShell::RegisterAsDslToolsEditor]
	[global::System.Runtime.InteropServices.ComVisible(true)]
	[DslShell::ProvideBindingPath]
	[DslShell::ProvideXmlEditorChooserBlockSxSWithXmlEditor(@"ConfigurationSectionDesigner", typeof(ConfigurationSectionDesignerEditorFactory))]

	internal abstract partial class ConfigurationSectionDesignerPackageBase : DslShell::AsyncModelingPackage
	{
		protected global::ConfigurationSectionDesigner.ConfigurationSectionDesignerToolboxHelper toolboxHelper;	
		
		/// <summary>
		/// Initialization method called by the package base class when this package is loaded.
		/// </summary>
		protected async override System.Threading.Tasks.Task InitializeAsync(CancellationToken cancellationToken, IProgress<VSShell.ServiceProgressData> progress)
		{
			await base.InitializeAsync(cancellationToken, progress);

			// Register the editor factory used to create the DSL editor.
			this.RegisterEditorFactory(new ConfigurationSectionDesignerEditorFactory(this));
			
			// Initialize the toolbox helper
			toolboxHelper = new global::ConfigurationSectionDesigner.ConfigurationSectionDesignerToolboxHelper(this);

			// Create the command set that handles menu commands provided by this package.
			ConfigurationSectionDesignerCommandSet commandSet = new ConfigurationSectionDesignerCommandSet(this);
			await commandSet.InitializeAsync(cancellationToken);
			
			// Create the command set that handles cut/copy/paste commands provided by this package.
			ConfigurationSectionDesignerClipboardCommandSet clipboardCommandSet = new ConfigurationSectionDesignerClipboardCommandSet(this);
			await clipboardCommandSet.InitializeAsync(cancellationToken);
			
			// Register the model explorer tool window for this DSL.
			this.AddToolWindow(typeof(ConfigurationSectionDesignerExplorerToolWindow));

			if (cancellationToken.IsCancellationRequested)
			{
				return;
			}

			await JoinableTaskFactory.SwitchToMainThreadAsync();

			// Initialize Extension Registars
			// this is a partial method call
			this.InitializeExtensions();

			// Add dynamic toolbox items
			await this.SetupDynamicToolboxAsync(cancellationToken);
		}

		/// <summary>
		/// Partial method to initialize ExtensionRegistrars (if any) in the DslPackage
		/// </summary>
		partial void InitializeExtensions();
		
		/// <summary>
		/// Returns any dynamic tool items for the designer
		/// </summary>
		/// <remarks>The default implementation is to return the list of items from the generated toolbox helper.</remarks>
		protected override global::System.Collections.Generic.IList<DslDesign::ModelingToolboxItem> CreateToolboxItems()
		{
			try
			{
				Debug.Assert(toolboxHelper != null, "Toolbox helper is not initialized");
				return toolboxHelper.CreateToolboxItems();
			}
			catch (global::System.Exception e)
			{
				global::System.Diagnostics.Debug.Fail("Exception thrown during toolbox item creation.  This may result in Package Load Failure:\r\n\r\n" + e);
				throw;
			}
		}
		
		
		/// <summary>
		/// Given a toolbox item "unique ID" and a data format identifier, returns the content of
		/// the data format. 
		/// </summary>
		/// <param name="itemId">The unique ToolboxItem to retrieve data for</param>
		/// <param name="format">The desired format of the resulting data</param>
		protected override object GetToolboxItemData(string itemId, DataFormats.Format format)
		{
			Debug.Assert(toolboxHelper != null, "Toolbox helper is not initialized");
		
			// Retrieve the specified ToolboxItem from the DSL
			return toolboxHelper.GetToolboxItemData(itemId, format);
		}

		public override VSShellInterop::IVsAsyncToolWindowFactory GetAsyncToolWindowFactory(Guid toolWindowType)
		{
			if (toolWindowType == typeof(ConfigurationSectionDesignerExplorerToolWindow).GUID)
			{
				return this;
			}

			return base.GetAsyncToolWindowFactory(toolWindowType);
		}
	}
}

//
// Package attributes which may need to change are placed on the partial class below, rather than in the main include file.
//
namespace ConfigurationSectionDesigner
{
	/// <summary>
	/// Double-derived class to allow easier code customization.
	/// </summary>
	/// <remarks>
	/// A package load key is required to allow this package to load when the Visual Studio SDK is not installed.
	/// Package load keys may be obtained from http://msdn.microsoft.com/vstudio/extend.
	/// Consult the Visual Studio SDK documentation for more information.
	/// [VSShell::ProvideLoadKey("Standard", Constants.ProductVersion, Constants.ProductName, Constants.CompanyName, 1)]
	/// </remarks>
	[VSShell::ProvideLoadKey("Standard", Constants.ProductVersion, Constants.ProductName, Constants.CompanyName, 1)]
	[VSShell::ProvideMenuResource("1000.ctmenu", version: 2)]
	[VSShell::ProvideToolboxItems(1)]
	[global::Microsoft.VisualStudio.TextTemplating.VSHost.ProvideDirectiveProcessor(typeof(global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDirectiveProcessor), global::ConfigurationSectionDesigner.ConfigurationSectionDesignerDirectiveProcessor.ConfigurationSectionDesignerDirectiveProcessorName, "A directive processor that provides access to ConfigurationSectionDesigner files")]
	[global::System.Runtime.InteropServices.Guid(Constants.ConfigurationSectionDesignerPackageId)]
	[FileGenerationRegistrationAttribute(Constants.ConfigurationSectionDesignerPackageId, "{D8760704-A993-40ee-89B9-FB77764D99AF}", "{" + Constants.ConfigurationSectionDesignerEditorFactoryId + "}", typeof(ConfigurationSectionDesigner.CsdFileGenerator))]
	internal sealed partial class ConfigurationSectionDesignerPackage : ConfigurationSectionDesignerPackageBase
	{
	}
}